{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Giri\u015f Rahman ve Rahim olan Allah'\u0131n ad\u0131yla. Bu projeyi \u00fcretebilme imkan\u0131n\u0131 bana veren Allah'a hamd olsun. Pratik Yapay Zeka , yapay zeka teknolojilerinde kendini geli\u015ftirmek isteyen, elde etti\u011fi bilgi ve tecr\u00fcbesini ba\u015fkalar\u0131yla payla\u015fmak isteyen, de\u011fer katmaktan, \u00fcretmek ve payla\u015fmaktan zevk alan herkes i\u00e7in olu\u015fturulmu\u015f projedir. Konu Ba\u015fl\u0131klar\u0131 A\u015fa\u011f\u0131da yer alan konular zamanla bu projeye eklenecektir. Konu Ba\u015fl\u0131\u011f\u0131 Durum Python Haz\u0131rlan\u0131yor NumPy Eklenecek Pandas Eklenecek Destek Projeye destek olmak i\u00e7in Github \u00fczerinden Pull Request g\u00f6nderebilirsiniz veya eklenmesini istedi\u011finiz bir \u00f6zelli\u011fi Issues k\u0131sm\u0131nda a\u00e7arak belirtebilirsiniz. Projeye katk\u0131da bulunabilmek i\u00e7in izlemeniz gereken ad\u0131mlar; Ad\u0131mlar yak\u0131nda eklenecek. \u015eu an geli\u015ftirilme a\u015famas\u0131nda. Son G\u00fcncelleme 27 Aral\u0131k 2019 - Cuma Lisans Bu projenin lisans\u0131 Attribution-NonCommercial-ShareAlike 4.0 International","title":"Giri\u015f"},{"location":"#giris","text":"","title":"Giri\u015f"},{"location":"#_1","text":"Rahman ve Rahim olan Allah'\u0131n ad\u0131yla. Bu projeyi \u00fcretebilme imkan\u0131n\u0131 bana veren Allah'a hamd olsun. Pratik Yapay Zeka , yapay zeka teknolojilerinde kendini geli\u015ftirmek isteyen, elde etti\u011fi bilgi ve tecr\u00fcbesini ba\u015fkalar\u0131yla payla\u015fmak isteyen, de\u011fer katmaktan, \u00fcretmek ve payla\u015fmaktan zevk alan herkes i\u00e7in olu\u015fturulmu\u015f projedir.","title":"  "},{"location":"#konu-baslklar","text":"A\u015fa\u011f\u0131da yer alan konular zamanla bu projeye eklenecektir. Konu Ba\u015fl\u0131\u011f\u0131 Durum Python Haz\u0131rlan\u0131yor NumPy Eklenecek Pandas Eklenecek","title":"Konu Ba\u015fl\u0131klar\u0131"},{"location":"#destek","text":"Projeye destek olmak i\u00e7in Github \u00fczerinden Pull Request g\u00f6nderebilirsiniz veya eklenmesini istedi\u011finiz bir \u00f6zelli\u011fi Issues k\u0131sm\u0131nda a\u00e7arak belirtebilirsiniz. Projeye katk\u0131da bulunabilmek i\u00e7in izlemeniz gereken ad\u0131mlar; Ad\u0131mlar yak\u0131nda eklenecek. \u015eu an geli\u015ftirilme a\u015famas\u0131nda.","title":"Destek"},{"location":"#son-guncelleme","text":"27 Aral\u0131k 2019 - Cuma","title":"Son G\u00fcncelleme"},{"location":"#lisans","text":"Bu projenin lisans\u0131 Attribution-NonCommercial-ShareAlike 4.0 International","title":"Lisans"},{"location":"changelog/","text":"De\u011fi\u015fiklik Kayd\u0131 Bu projede yap\u0131lan t\u00fcm de\u011fi\u015fiklikler bu dosyada belgelenmektedir. 0.2.7 - 2019-12-27 Eklendi Jupyter Notebooks i\u00e7erisine python_iler_duzey_fonksiyonlar.ipynb eklendi. python_ileri_duzey_fonksiyonlar.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.2.6 - 2019-12-26 Eklendi Jupyter Notebooks i\u00e7erisine python_gomulu_fonksiyonlar.ipynb eklendi. python_gomulu_fonksiyonlar.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.2.6 - 2019-12-25 Eklendi Jupyter Notebooks i\u00e7erisine python_fonksiyonlar.ipynb eklendi. python_fonksiyonlar.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.2.5 - 2019-12-24 Eklendi Jupyter Notebooks i\u00e7erisine python_sayilar.ipynb eklendi. python_sayilar.md eklendi. Jupyet Notebooks i\u00e7erisine python_sozlukler.ipynb eklendi. python_sozluklar.md eklendi. Jupyter Notebooks i\u00e7erisine python_sozluklerin_metotlari.ipynb eklendi. python_sozluklerin_metotlari.md eklendi. Jupyter Notebooks i\u00e7erisine python_kumeler_dondurulmus_kumeler.ipynb eklendi. python_kumeler_dondurulmus_kumeler.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. index.md dosyas\u0131nda son g\u00fcncelleme k\u0131sm\u0131 g\u00fcncellendi. 0.2.4 - 2019-12-23 Eklendi Jupyter Notebooks i\u00e7erisine python_listeler_demetler_metodlari.ipynb eklendi. python_listeler_demetler_metodlari.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. index.md dosyas\u0131nda son g\u00fcncelleme k\u0131sm\u0131 g\u00fcncellendi. 0.2.3 - 2019-12-20 Eklendi Jupyter Notebooks i\u00e7erisine python_listeler_demetler.ipynb eklendi. python_listeler_demetler.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. index.md dosyas\u0131nda son g\u00fcncelleme k\u0131sm\u0131 g\u00fcncellendi. 0.2.2 - 2019-12-19 Eklendi Jupyter Notebooks i\u00e7erisine python_format_metodu.ipynb eklendi. python_format_metodu.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.2.1 - 2019-12-18 Eklendi Jupyter Notebooks i\u00e7erisine python_karakter_dizileri.ipynb eklendi. python_karakter_dizileri.md eklendi. Jupyter Notebooks i\u00e7erisine python_karakter_dizilerinin_metotlari.ipynb eklendi. python_karakter_dizilerinin_metotlari.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.2.0 - 2019-12-17 Eklendi Jupyter Notebooks i\u00e7erisine hata yakalama eklendi. python_hata_yakalama.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.1.9 - 2019-12-16 Eklendi Jupyter Notebooks i\u00e7erisine print fonksiyonu eklendi. print.md eklendi. Jupyer Notebooks i\u00e7erisine ka\u00e7\u0131\u015f dizileri eklendi. kacis_dizileri.md eklendi. Jupyter Notebooks i\u00e7erisine kullan\u0131c\u0131dan bilgi almak eklendi. kullanicidan_bilgi_almak.md eklendi. Jupyter Notebooks i\u00e7erisine ko\u015fullu durumlar eklendi. kosullu_durumlar.md eklendi. Jupyter Notebooks i\u00e7erisine i\u015flemler eklendi. islecler.md eklendi. Jupyter Notebooks i\u00e7erisine d\u00f6ng\u00fcler eklendi. python_donguler.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.1.8 - 2019-12-14 Eklendi referanslar.md eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.1.7 - 2019-12-14 Eklendi Jupyter Notebooks ve Python klas\u00f6r\u00fc olu\u015fturuldu. De\u011fi\u015fkenler \u00e7al\u0131\u015fmas\u0131 eklendi. degiskenler.md dosyas\u0131 eklendi. De\u011fi\u015fti mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. 0.1.6 - 2019-12-14 Eklendi Men\u00fc ibaresi mkdocs.yml dosyas\u0131na eklendi. 0.1.5 - 2019-12-14 Eklendi Web sayfas\u0131 i\u00e7in changelog.md dosyas\u0131 olu\u015fturuldu. De\u011fi\u015fti Readme.md dosyas\u0131 g\u00fcncellendi. 0.1.4 - 2019-12-14 De\u011fi\u015fti Index.md dosyas\u0131 g\u00fcncellendi. Readme.md dosyas\u0131 g\u00fcncellendi. 0.1.3 - 2019-12-14 De\u011fi\u015fti Readme.md dosyas\u0131 g\u00fcncellendi. 0.1.2 - 2019-12-14 De\u011fi\u015fti Favicon g\u00fcncellendi. Logo g\u00fcncellendi. 0.1.1 - 2019-12-14 Eklendi Changelog.md dosyas\u0131 eklendi. 0.1.0 - 2019-12-14 De\u011fi\u015fti Readme.md dosyas\u0131 g\u00fcncellendi. 0.0.9 - 2019-12-14 Eklendi Mkdocs.yml dosyas\u0131na sosyal medya ba\u011flant\u0131lar\u0131 eklendi. 0.0.8 - 2019-12-14 Eklendi Mkdocs.yml dosyas\u0131na telif hakk\u0131 ibaresi eklendi. 0.0.7 - 2019-12-14 Eklendi Mkdocs.yml dosyas\u0131na repo bilgileri eklendi. 0.0.6 - 2019-12-14 Eklendi Mkdocs.yml dosyas\u0131nda dil de\u011fi\u015fikli\u011fi yap\u0131ld\u0131. 0.0.5 - 2019-12-14 Eklendi Mkdocs.yml dosyas\u0131na proje bilgileri k\u0131sm\u0131 eklendi. 0.0.4 - 2019-12-14 Eklendi Mkdocs d\u00f6k\u00fcman\u0131n\u0131n temas\u0131 de\u011fi\u015ftirildi. 0.0.3 - 2019-12-14 Eklendi Markdown bi\u00e7imlendirme dilini destekleyen mkdocs d\u00f6k\u00fcman\u0131 olu\u015fturuldu. 0.0.2 - 2019-12-14 Eklendi Lisans dosyas\u0131 eklendi. 0.0.1 - 2019-12-14 Eklendi Repo olu\u015fturuldu. README.md dosyas\u0131 otomatik olarak olu\u015fturuldu.","title":"De\u011fi\u015fiklik Kayd\u0131"},{"location":"changelog/#degisiklik-kayd","text":"Bu projede yap\u0131lan t\u00fcm de\u011fi\u015fiklikler bu dosyada belgelenmektedir.","title":"De\u011fi\u015fiklik Kayd\u0131"},{"location":"changelog/#027-2019-12-27","text":"","title":"0.2.7 - 2019-12-27"},{"location":"changelog/#eklendi","text":"Jupyter Notebooks i\u00e7erisine python_iler_duzey_fonksiyonlar.ipynb eklendi. python_ileri_duzey_fonksiyonlar.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#026-2019-12-26","text":"","title":"0.2.6 - 2019-12-26"},{"location":"changelog/#eklendi_1","text":"Jupyter Notebooks i\u00e7erisine python_gomulu_fonksiyonlar.ipynb eklendi. python_gomulu_fonksiyonlar.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_1","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#026-2019-12-25","text":"","title":"0.2.6 - 2019-12-25"},{"location":"changelog/#eklendi_2","text":"Jupyter Notebooks i\u00e7erisine python_fonksiyonlar.ipynb eklendi. python_fonksiyonlar.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_2","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#025-2019-12-24","text":"","title":"0.2.5 - 2019-12-24"},{"location":"changelog/#eklendi_3","text":"Jupyter Notebooks i\u00e7erisine python_sayilar.ipynb eklendi. python_sayilar.md eklendi. Jupyet Notebooks i\u00e7erisine python_sozlukler.ipynb eklendi. python_sozluklar.md eklendi. Jupyter Notebooks i\u00e7erisine python_sozluklerin_metotlari.ipynb eklendi. python_sozluklerin_metotlari.md eklendi. Jupyter Notebooks i\u00e7erisine python_kumeler_dondurulmus_kumeler.ipynb eklendi. python_kumeler_dondurulmus_kumeler.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_3","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. index.md dosyas\u0131nda son g\u00fcncelleme k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#024-2019-12-23","text":"","title":"0.2.4 - 2019-12-23"},{"location":"changelog/#eklendi_4","text":"Jupyter Notebooks i\u00e7erisine python_listeler_demetler_metodlari.ipynb eklendi. python_listeler_demetler_metodlari.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_4","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. index.md dosyas\u0131nda son g\u00fcncelleme k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#023-2019-12-20","text":"","title":"0.2.3 - 2019-12-20"},{"location":"changelog/#eklendi_5","text":"Jupyter Notebooks i\u00e7erisine python_listeler_demetler.ipynb eklendi. python_listeler_demetler.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_5","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi. index.md dosyas\u0131nda son g\u00fcncelleme k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#022-2019-12-19","text":"","title":"0.2.2 - 2019-12-19"},{"location":"changelog/#eklendi_6","text":"Jupyter Notebooks i\u00e7erisine python_format_metodu.ipynb eklendi. python_format_metodu.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_6","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#021-2019-12-18","text":"","title":"0.2.1 - 2019-12-18"},{"location":"changelog/#eklendi_7","text":"Jupyter Notebooks i\u00e7erisine python_karakter_dizileri.ipynb eklendi. python_karakter_dizileri.md eklendi. Jupyter Notebooks i\u00e7erisine python_karakter_dizilerinin_metotlari.ipynb eklendi. python_karakter_dizilerinin_metotlari.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_7","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#020-2019-12-17","text":"","title":"0.2.0 - 2019-12-17"},{"location":"changelog/#eklendi_8","text":"Jupyter Notebooks i\u00e7erisine hata yakalama eklendi. python_hata_yakalama.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_8","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#019-2019-12-16","text":"","title":"0.1.9 - 2019-12-16"},{"location":"changelog/#eklendi_9","text":"Jupyter Notebooks i\u00e7erisine print fonksiyonu eklendi. print.md eklendi. Jupyer Notebooks i\u00e7erisine ka\u00e7\u0131\u015f dizileri eklendi. kacis_dizileri.md eklendi. Jupyter Notebooks i\u00e7erisine kullan\u0131c\u0131dan bilgi almak eklendi. kullanicidan_bilgi_almak.md eklendi. Jupyter Notebooks i\u00e7erisine ko\u015fullu durumlar eklendi. kosullu_durumlar.md eklendi. Jupyter Notebooks i\u00e7erisine i\u015flemler eklendi. islecler.md eklendi. Jupyter Notebooks i\u00e7erisine d\u00f6ng\u00fcler eklendi. python_donguler.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_9","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#018-2019-12-14","text":"","title":"0.1.8 - 2019-12-14"},{"location":"changelog/#eklendi_10","text":"referanslar.md eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_10","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#017-2019-12-14","text":"","title":"0.1.7 - 2019-12-14"},{"location":"changelog/#eklendi_11","text":"Jupyter Notebooks ve Python klas\u00f6r\u00fc olu\u015fturuldu. De\u011fi\u015fkenler \u00e7al\u0131\u015fmas\u0131 eklendi. degiskenler.md dosyas\u0131 eklendi.","title":"Eklendi"},{"location":"changelog/#degisti_11","text":"mkdocs.yml dosyas\u0131nda men\u00fc k\u0131sm\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#016-2019-12-14","text":"","title":"0.1.6 - 2019-12-14"},{"location":"changelog/#eklendi_12","text":"Men\u00fc ibaresi mkdocs.yml dosyas\u0131na eklendi.","title":"Eklendi"},{"location":"changelog/#015-2019-12-14","text":"","title":"0.1.5 - 2019-12-14"},{"location":"changelog/#eklendi_13","text":"Web sayfas\u0131 i\u00e7in changelog.md dosyas\u0131 olu\u015fturuldu.","title":"Eklendi"},{"location":"changelog/#degisti_12","text":"Readme.md dosyas\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#014-2019-12-14","text":"","title":"0.1.4 - 2019-12-14"},{"location":"changelog/#degisti_13","text":"Index.md dosyas\u0131 g\u00fcncellendi. Readme.md dosyas\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#013-2019-12-14","text":"","title":"0.1.3 - 2019-12-14"},{"location":"changelog/#degisti_14","text":"Readme.md dosyas\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#012-2019-12-14","text":"","title":"0.1.2 - 2019-12-14"},{"location":"changelog/#degisti_15","text":"Favicon g\u00fcncellendi. Logo g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#011-2019-12-14","text":"","title":"0.1.1 - 2019-12-14"},{"location":"changelog/#eklendi_14","text":"Changelog.md dosyas\u0131 eklendi.","title":"Eklendi"},{"location":"changelog/#010-2019-12-14","text":"","title":"0.1.0 - 2019-12-14"},{"location":"changelog/#degisti_16","text":"Readme.md dosyas\u0131 g\u00fcncellendi.","title":"De\u011fi\u015fti"},{"location":"changelog/#009-2019-12-14","text":"","title":"0.0.9 - 2019-12-14"},{"location":"changelog/#eklendi_15","text":"Mkdocs.yml dosyas\u0131na sosyal medya ba\u011flant\u0131lar\u0131 eklendi.","title":"Eklendi"},{"location":"changelog/#008-2019-12-14","text":"","title":"0.0.8 - 2019-12-14"},{"location":"changelog/#eklendi_16","text":"Mkdocs.yml dosyas\u0131na telif hakk\u0131 ibaresi eklendi.","title":"Eklendi"},{"location":"changelog/#007-2019-12-14","text":"","title":"0.0.7 - 2019-12-14"},{"location":"changelog/#eklendi_17","text":"Mkdocs.yml dosyas\u0131na repo bilgileri eklendi.","title":"Eklendi"},{"location":"changelog/#006-2019-12-14","text":"","title":"0.0.6 - 2019-12-14"},{"location":"changelog/#eklendi_18","text":"Mkdocs.yml dosyas\u0131nda dil de\u011fi\u015fikli\u011fi yap\u0131ld\u0131.","title":"Eklendi"},{"location":"changelog/#005-2019-12-14","text":"","title":"0.0.5 - 2019-12-14"},{"location":"changelog/#eklendi_19","text":"Mkdocs.yml dosyas\u0131na proje bilgileri k\u0131sm\u0131 eklendi.","title":"Eklendi"},{"location":"changelog/#004-2019-12-14","text":"","title":"0.0.4 - 2019-12-14"},{"location":"changelog/#eklendi_20","text":"Mkdocs d\u00f6k\u00fcman\u0131n\u0131n temas\u0131 de\u011fi\u015ftirildi.","title":"Eklendi"},{"location":"changelog/#003-2019-12-14","text":"","title":"0.0.3 - 2019-12-14"},{"location":"changelog/#eklendi_21","text":"Markdown bi\u00e7imlendirme dilini destekleyen mkdocs d\u00f6k\u00fcman\u0131 olu\u015fturuldu.","title":"Eklendi"},{"location":"changelog/#002-2019-12-14","text":"","title":"0.0.2 - 2019-12-14"},{"location":"changelog/#eklendi_22","text":"Lisans dosyas\u0131 eklendi.","title":"Eklendi"},{"location":"changelog/#001-2019-12-14","text":"","title":"0.0.1 - 2019-12-14"},{"location":"changelog/#eklendi_23","text":"Repo olu\u015fturuldu. README.md dosyas\u0131 otomatik olarak olu\u015fturuldu.","title":"Eklendi"},{"location":"referanslar/","text":"Referanslar Bu projede bulunan i\u00e7erikler a\u015fa\u011f\u0131da bulunan kaynaklar kullan\u0131larak haz\u0131rlanm\u0131\u015ft\u0131r. Son G\u00fcncelleme: 14 Aral\u0131k 2019 Python Dok\u00fcmantasyonu Python 3 i\u00e7in T\u00fcrk\u00e7e K\u0131lavuz","title":"Referanslar"},{"location":"referanslar/#referanslar","text":"Bu projede bulunan i\u00e7erikler a\u015fa\u011f\u0131da bulunan kaynaklar kullan\u0131larak haz\u0131rlanm\u0131\u015ft\u0131r. Son G\u00fcncelleme: 14 Aral\u0131k 2019 Python Dok\u00fcmantasyonu Python 3 i\u00e7in T\u00fcrk\u00e7e K\u0131lavuz","title":"Referanslar"},{"location":"matplotlib/matplotlib/","text":"Matplotlib Matplolib k\u00fct\u00fcphanesi: Matplotlib, platformlarda \u00e7e\u015fitli bas\u0131l\u0131 fig\u00fcrler ve etkile\u015fimli ortamlarda kullan\u0131labilen bir Python 2D \u00e7izim k\u00fct\u00fcphanesidir. Matplotlib, Python scriptlerinde, IPython dosyalar\u0131nda, Jupyter notebook ve web uygulama sunucular\u0131nda kullan\u0131labilir. Not: Burada bulunan anahtar kelimeler T\u00fcrk\u00e7ele\u015ftirilmeden kullan\u0131lm\u0131\u015ft\u0131r. internette arama yaparken daha kolay bulabilmeniz i\u00e7indir. import numpy as np import pandas as pd import warnings warnings.filterwarnings('ignore') df = pd.read_csv('../datas/Pokemon.csv') Matplotlib K\u00fct\u00fcphanesini Tan\u0131mlama import matplotlib.pyplot as plt Matplotlib Nesne Yap\u0131s\u0131 Matplotlib'den en iyi \u015fekilde yararlanmak i\u00e7in, nesne yap\u0131s\u0131n\u0131 \u00e7ok iyi bilmeniz gerekir. from matplotlib.ticker import AutoMinorLocator, MultipleLocator, FuncFormatter np.random.seed(19680801) X = np.linspace(0.5, 3.5, 100) Y1 = 3+np.cos(X) Y2 = 1+np.cos(1+X/0.75)/2 Y3 = np.random.uniform(Y1, Y2, len(X)) fig = plt.figure(figsize=(15, 15)) ax = fig.add_subplot(1, 1, 1, aspect=1) def minor_tick(x, pos): if not x % 1.0: return \"\" return \"%.2f\" % x ax.xaxis.set_major_locator(MultipleLocator(1.000)) ax.xaxis.set_minor_locator(AutoMinorLocator(4)) ax.yaxis.set_major_locator(MultipleLocator(1.000)) ax.yaxis.set_minor_locator(AutoMinorLocator(4)) ax.xaxis.set_minor_formatter(FuncFormatter(minor_tick)) ax.set_xlim(0, 4) ax.set_ylim(0, 4) ax.tick_params(which='major', width=1.0) ax.tick_params(which='major', length=10) ax.tick_params(which='minor', width=1.0, labelsize=10) ax.tick_params(which='minor', length=5, labelsize=10, labelcolor='0.25') ax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10) ax.plot(X, Y1, c=(0.25, 0.25, 1.00), lw=2, label=\"Blue signal\", zorder=10) ax.plot(X, Y2, c=(1.00, 0.25, 0.25), lw=2, label=\"Red signal\") ax.plot(X, Y3, linewidth=0, marker='o', markerfacecolor='w', markeredgecolor='k') ax.set_title(\"Anatomy of a figure\", fontsize=20, verticalalignment='bottom') ax.set_xlabel(\"X axis label\") ax.set_ylabel(\"Y axis label\") ax.legend() def circle(x, y, radius=0.15): from matplotlib.patches import Circle from matplotlib.patheffects import withStroke circle = Circle((x, y), radius, clip_on=False, zorder=10, linewidth=1, edgecolor='black', facecolor=(0, 0, 0, .0125), path_effects=[withStroke(linewidth=5, foreground='w')]) ax.add_artist(circle) def text(x, y, text): ax.text(x, y, text, backgroundcolor=\"white\", ha='center', va='top', weight='bold', color='blue') # Minor tick circle(0.50, -0.10) text(0.50, -0.32, \"Minor tick label\") # Major tick circle(-0.03, 4.00) text(0.03, 3.80, \"Major tick\") # Minor tick circle(0.00, 3.50) text(0.00, 3.30, \"Minor tick\") # Major tick label circle(-0.15, 3.00) text(-0.15, 2.80, \"Major tick label\") # X Label circle(1.80, -0.27) text(1.80, -0.45, \"X axis label\") # Y Label circle(-0.27, 1.80) text(-0.27, 1.6, \"Y axis label\") # Title circle(1.60, 4.13) text(1.60, 3.93, \"Title\") # Blue plot circle(1.75, 2.80) text(1.75, 2.60, \"Line\\n(line plot)\") # Red plot circle(1.20, 0.60) text(1.20, 0.40, \"Line\\n(line plot)\") # Scatter plot circle(3.20, 1.75) text(3.20, 1.55, \"Markers\\n(scatter plot)\") # Grid circle(3.00, 3.00) text(3.00, 2.80, \"Grid\") # Legend circle(3.70, 3.80) text(3.70, 3.60, \"Legend\") # Axes circle(0.5, 0.5) text(0.5, 0.3, \"Axes\") # Figure circle(-0.3, 0.65) text(-0.3, 0.45, \"Figure\") color = 'blue' ax.annotate('Spines', xy=(4.0, 0.35), xycoords='data', xytext=(3.3, 0.5), textcoords='data', weight='bold', color=color, arrowprops=dict(arrowstyle='->', connectionstyle=\"arc3\", color=color)) ax.annotate('', xy=(3.15, 0.0), xycoords='data', xytext=(3.45, 0.45), textcoords='data', weight='bold', color=color, arrowprops=dict(arrowstyle='->', connectionstyle=\"arc3\", color=color)) ax.text(4.0, -0.4, \"Made with http://matplotlib.org\", fontsize=10, ha=\"right\", color='.5') plt.show() \u00c7\u0131kt\u0131lar\u0131 Dosya Olarak Kaydetme Bazen \u00fcretti\u011fimiz fig\u00fcr\u00fc kaydetmek isteyebiliriz. Bunun i\u00e7in matplotlib'in dosya kaydederken hangi dosya t\u00fcrlerini destekledi\u011finiz bilmemiz gerekir. fig = plt.figure() # fig.savefig('my_figure.png') -> This code save the your figure. fig.canvas.get_supported_filetypes() {'ps': 'Postscript', 'eps': 'Encapsulated Postscript', 'pdf': 'Portable Document Format', 'pgf': 'PGF code for LaTeX', 'png': 'Portable Network Graphics', 'raw': 'Raw RGBA bitmap', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector Graphics', 'jpg': 'Joint Photographic Experts Group', 'jpeg': 'Joint Photographic Experts Group', 'tif': 'Tagged Image File Format', 'tiff': 'Tagged Image File Format'} <Figure size 432x288 with 0 Axes> Stiller(Stylesheets) Matplotlib'de bir\u00e7ok stil var. Bu stillerin t\u00fcm\u00fc a\u015fa\u011f\u0131da listelenmi\u015ftir. plt.style.available # plt.style.use('stylename') ['seaborn-muted', 'seaborn', 'seaborn-talk', 'seaborn-colorblind', 'seaborn-poster', 'seaborn-ticks', 'seaborn-dark', 'seaborn-whitegrid', 'ggplot', 'seaborn-pastel', 'classic', 'seaborn-white', 'seaborn-bright', 'Solarize_Light2', 'seaborn-paper', 'fivethirtyeight', 'fast', 'seaborn-dark-palette', 'dark_background', 'bmh', 'seaborn-notebook', 'seaborn-deep', '_classic_test', 'grayscale', 'seaborn-darkgrid', 'tableau-colorblind10'] def plot_scatter(ax, prng, nb_samples=100): \"\"\"Scatter plot. \"\"\" for mu, sigma, marker in [(-.5, 0.75, 'o'), (0.75, 1., 's')]: x, y = prng.normal(loc=mu, scale=sigma, size=(2, nb_samples)) ax.plot(x, y, ls='none', marker=marker) ax.set_xlabel('X-label') return ax def plot_colored_sinusoidal_lines(ax): \"\"\"Plot sinusoidal lines with colors following the style color cycle. \"\"\" L = 2 * np.pi x = np.linspace(0, L) nb_colors = len(plt.rcParams['axes.prop_cycle']) shift = np.linspace(0, L, nb_colors, endpoint=False) for s in shift: ax.plot(x, np.sin(x + s), '-') ax.set_xlim([x[0], x[-1]]) return ax def plot_bar_graphs(ax, prng, min_value=5, max_value=25, nb_samples=5): \"\"\"Plot two bar graphs side by side, with letters as x-tick labels. \"\"\" x = np.arange(nb_samples) ya, yb = prng.randint(min_value, max_value, size=(2, nb_samples)) width = 0.25 ax.bar(x, ya, width) ax.bar(x + width, yb, width, color='C2') ax.set_xticks(x + width) ax.set_xticklabels(['a', 'b', 'c', 'd', 'e']) return ax def plot_colored_circles(ax, prng, nb_samples=15): \"\"\"Plot circle patches. NB: draws a fixed amount of samples, rather than using the length of the color cycle, because different styles may have different numbers of colors. \"\"\" for sty_dict, j in zip(plt.rcParams['axes.prop_cycle'], range(nb_samples)): ax.add_patch(plt.Circle(prng.normal(scale=3, size=2), radius=1.0, color=sty_dict['color'])) # Force the limits to be the same across the styles (because different # styles may have different numbers of available colors). ax.set_xlim([-4, 8]) ax.set_ylim([-5, 6]) ax.set_aspect('equal', adjustable='box') # to plot circles as circles return ax def plot_image_and_patch(ax, prng, size=(20, 20)): \"\"\"Plot an image with random values and superimpose a circular patch. \"\"\" values = prng.random_sample(size=size) ax.imshow(values, interpolation='none') c = plt.Circle((5, 5), radius=5, label='patch') ax.add_patch(c) # Remove ticks ax.set_xticks([]) ax.set_yticks([]) def plot_histograms(ax, prng, nb_samples=10000): \"\"\"Plot 4 histograms and a text annotation. \"\"\" params = ((10, 10), (4, 12), (50, 12), (6, 55)) for a, b in params: values = prng.beta(a, b, size=nb_samples) ax.hist(values, histtype=\"stepfilled\", bins=30, alpha=0.8, normed=True) # Add a small annotation. ax.annotate('Annotation', xy=(0.25, 4.25), xycoords='data', xytext=(0.9, 0.9), textcoords='axes fraction', va=\"top\", ha=\"right\", bbox=dict(boxstyle=\"round\", alpha=0.2), arrowprops=dict( arrowstyle=\"->\", connectionstyle=\"angle,angleA=-95,angleB=35,rad=10\"), ) return ax def plot_figure(style_label=\"\"): \"\"\"Setup and plot the demonstration figure with a given style. \"\"\" # Use a dedicated RandomState instance to draw the same \"random\" values # across the different figures. prng = np.random.RandomState(96917002) # Tweak the figure size to be better suited for a row of numerous plots: # double the width and halve the height. NB: use relative changes because # some styles may have a figure size different from the default one. (fig_width, fig_height) = plt.rcParams['figure.figsize'] fig_size = [fig_width * 2, fig_height / 2] fig, axes = plt.subplots(ncols=6, nrows=1, num=style_label, figsize=fig_size, squeeze=True) axes[0].set_ylabel(style_label) plot_scatter(axes[0], prng) plot_image_and_patch(axes[1], prng) plot_bar_graphs(axes[2], prng) plot_colored_circles(axes[3], prng) plot_colored_sinusoidal_lines(axes[4]) plot_histograms(axes[5], prng) fig.tight_layout() return fig if __name__ == \"__main__\": # Setup a list of all available styles, in alphabetical order but # the `default` and `classic` ones, which will be forced resp. in # first and second position. style_list = list(plt.style.available) # *new* list: avoids side effects. style_list.remove('classic') # `classic` is in the list: first remove it. style_list.sort() style_list.insert(0, u'default') style_list.insert(1, u'classic') # Plot a demonstration figure for every available style sheet. for style_label in style_list: with plt.style.context(style_label): fig = plot_figure(style_label=style_label) plt.show() \u0130ki Aray\u00fcz MatPlotlib'i kullanman\u0131n iki farkl\u0131 yolu vard\u0131r. Bunlardan ilki MATLAB stili, ikincisi ise nesne y\u00f6nelimli aray\u00fcz stilidir. \u015eimdi bunlara bakal\u0131m. MATLAB Stil Aray\u00fcz\u00fc plt.figure() # create a plot figure x = np.linspace(0, 10, 100) # create the first of two panels and set current axis plt.subplot(2, 1, 1) # (rows, columns, panel number) plt.plot(x, np.sin(x)) # create the second panel and set current axis plt.subplot(2, 1, 2) plt.plot(x, np.cos(x)); plt.show() Nesne Y\u00f6nelimli Aray\u00fcz # First create a grid of plots # ax will be an array of two Axes objects fig, ax = plt.subplots(2) # Call plot() method on the appropriate object ax[0].plot(x, np.sin(x)) ax[1].plot(x, np.cos(x)); Scatter Plots Scatter Plot g\u00f6sterimi i\u00e7in farkl\u0131 y\u00f6ntemler ve \u00f6zelle\u015ftirmeler vard\u0131r. Bunlara bakal\u0131m. plot x = np.linspace(0, 10, 30) y = np.sin(x) plt.plot(x, y, 'o', color='black'); plt.show() rng = np.random.RandomState(0) for marker in ['o', '.', ',', 'x', '+', 'v', '^', '<', '>', 's', 'd']: plt.plot(rng.rand(5), rng.rand(5), marker, label=\"marker='{0}'\".format(marker)) plt.legend(numpoints=1) plt.xlim(0, 1.8); plt.show() plt.plot(x, y, '-ok'); plt.show() plt.plot(x, y, '-p', color='gray', markersize=15, linewidth=4, markerfacecolor='white', markeredgecolor='gray', markeredgewidth=2) plt.ylim(-1.2, 1.2); scatter Plt.scatter \u00f6\u011fesinin plt.plot \u00f6\u011fesinden temel fark\u0131, her bir noktan\u0131n \u00f6zelliklerinin (boyut, y\u00fcz rengi, kenar rengi vb.) Ayr\u0131 ayr\u0131 kontrol edilebilece\u011fi veya verilere e\u015flenebilece\u011fi scatter plot olu\u015fturmak i\u00e7in kullan\u0131labilmesidir. plt.scatter(x, y, marker='o'); plt.show() Renkli scatter plot rng = np.random.RandomState(0) x = rng.randn(100) y = rng.randn(100) colors = rng.rand(100) sizes = 1000 * rng.rand(100) plt.scatter(x, y, c=colors, s=sizes, alpha=0.3, cmap='viridis') plt.colorbar(); # show color scale Basit Hata \u00c7ubuklar\u0131 plt.style.use('seaborn-whitegrid') x = np.linspace(0, 10, 50) dy = 0.8 y = np.sin(x) + dy * np.random.randn(50) plt.errorbar(x, y, yerr=dy, fmt='.k'); plt.errorbar(x, y, yerr=dy, fmt='o', color='black',ecolor='lightgray', elinewidth=3, capsize=0); Histograms, Binnings, ve Density plt.style.use('seaborn-white') data = np.random.randn(1000) plt.hist(data); plt.hist(data, bins=30, normed=True, alpha=0.5, histtype='stepfilled', color='steelblue', edgecolor='none'); plt.show() Renkli histogram x1 = np.random.normal(0, 0.8, 1000) x2 = np.random.normal(-2, 1, 1000) x3 = np.random.normal(3, 2, 1000) kwargs = dict(histtype='stepfilled', alpha=0.3, normed=True, bins=40) plt.hist(x1, **kwargs) plt.hist(x2, **kwargs) plt.hist(x3, **kwargs); \u0130ki Boyutlu Histograms and Binnings mean = [0, 0] cov = [[1, 1], [1, 2]] x, y = np.random.multivariate_normal(mean, cov, 10000).T plt.hist2d(x, y, bins=30, cmap='Blues') cb = plt.colorbar() cb.set_label('counts in bin') plt.hexbin(x, y, gridsize=30, cmap='Blues') cb = plt.colorbar(label='count in bin') Plot Legend Nesnesini \u00d6zelle\u015ftirme x = np.linspace(0, 10, 1000) fig, ax = plt.subplots() ax.plot(x, np.sin(x), '-b', label='Sine') ax.plot(x, np.cos(x), '--r', label='Cosine') ax.axis('equal') leg = ax.legend(); ax.legend(loc='upper left', frameon=False) fig ax.legend(frameon=False, loc='lower center', ncol=2) fig ax.legend(fancybox=True, framealpha=1, shadow=True, borderpad=1) fig Legend \u0130\u00e7in Eleman Se\u00e7imi y = np.sin(x[:, np.newaxis] + np.pi * np.arange(0, 2, 0.5)) lines = plt.plot(x, y) # lines is a list of plt.Line2D instances plt.legend(lines[:2], ['first', 'second']); plt.plot(x, y[:, 0], label='first') plt.plot(x, y[:, 1], label='second') plt.plot(x, y[:, 2:]) plt.legend(framealpha=1, frameon=True); Birden Fazla Legend fig, ax = plt.subplots() lines = [] styles = ['-', '--', '-.', ':'] x = np.linspace(0, 10, 1000) for i in range(4): lines += ax.plot(x, np.sin(x - i * np.pi / 2), styles[i], color='black') ax.axis('equal') # specify the lines and labels of the first legend ax.legend(lines[:2], ['line A', 'line B'], loc='upper right', frameon=False) # Create the second legend and add the artist manually. from matplotlib.legend import Legend leg = Legend(ax, lines[2:], ['line C', 'line D'], loc='lower right', frameon=False) ax.add_artist(leg); Renk \u00c7ubu\u011funu \u00d6zelle\u015ftirme x = np.linspace(0, 10, 1000) I = np.sin(x) * np.cos(x[:, np.newaxis]) plt.imshow(I) plt.colorbar(); plt.imshow(I, cmap='gray'); speckles = (np.random.random(I.shape) < 0.01) I[speckles] = np.random.normal(0, 3, np.count_nonzero(speckles)) plt.figure(figsize=(10, 3.5)) plt.subplot(1, 2, 1) plt.imshow(I, cmap='RdBu') plt.colorbar() plt.subplot(1, 2, 2) plt.imshow(I, cmap='RdBu') plt.colorbar(extend='both') plt.clim(-1, 1); plt.imshow(I, cmap=plt.cm.get_cmap('Blues', 6)) plt.colorbar() plt.clim(-1, 1); Birden Fazla Subplot ax1 = plt.axes() # standard axes ax2 = plt.axes([0.65, 0.65, 0.2, 0.2]) fig = plt.figure() ax1 = fig.add_axes([0.1, 0.5, 0.8, 0.4], xticklabels=[], ylim=(-1.2, 1.2)) ax2 = fig.add_axes([0.1, 0.1, 0.8, 0.4], ylim=(-1.2, 1.2)) x = np.linspace(0, 10) ax1.plot(np.sin(x)) ax2.plot(np.cos(x)); Basit Subplot Izgaralar\u0131 for i in range(1, 7): plt.subplot(2, 3, i) plt.text(0.5, 0.5, str((2, 3, i)), fontsize=18, ha='center') fig = plt.figure() fig.subplots_adjust(hspace=0.4, wspace=0.4) for i in range(1, 7): ax = fig.add_subplot(2, 3, i) ax.text(0.5, 0.5, str((2, 3, i)), fontsize=18, ha='center') fig, ax = plt.subplots(2, 3, sharex='col', sharey='row') # axes are in a two-dimensional array, indexed by [row, col] for i in range(2): for j in range(3): ax[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha='center') fig Daha Karma\u015f\u0131k D\u00fczenlemeler grid = plt.GridSpec(2, 3, wspace=0.4, hspace=0.3) plt.subplot(grid[0, 0]) plt.subplot(grid[0, 1:]) plt.subplot(grid[1, :2]) plt.subplot(grid[1, 2]); # Create some normally distributed data mean = [0, 0] cov = [[1, 1], [1, 2]] x, y = np.random.multivariate_normal(mean, cov, 3000).T # Set up the axes with gridspec fig = plt.figure(figsize=(6, 6)) grid = plt.GridSpec(4, 4, hspace=0.2, wspace=0.2) main_ax = fig.add_subplot(grid[:-1, 1:]) y_hist = fig.add_subplot(grid[:-1, 0], xticklabels=[], sharey=main_ax) x_hist = fig.add_subplot(grid[-1, 1:], yticklabels=[], sharex=main_ax) # scatter points on the main axes main_ax.plot(x, y, 'ok', markersize=3, alpha=0.2) # histogram on the attached axes x_hist.hist(x, 40, histtype='stepfilled', orientation='vertical', color='gray') x_hist.invert_yaxis() y_hist.hist(y, 40, histtype='stepfilled', orientation='horizontal', color='gray') y_hist.invert_xaxis() Text ve Annotation ax.transData: Veri koordinatlar\u0131yla ili\u015fkili d\u00f6n\u00fc\u015f\u00fcm ax.transAxes: Eksenlerle ili\u015fkili d\u00f6n\u00fc\u015f\u00fcm (eksen \u00f6l\u00e7\u00fc birimleri cinsinden) fig.transFigure: \u015eekille ili\u015fkili d\u00f6n\u00fc\u015f\u00fcm (\u015fekil boyutlar\u0131n\u0131n birimlerinde) fig, ax = plt.subplots(facecolor='lightgray') ax.axis([0, 10, 0, 10]) # transform=ax.transData is the default, but we'll specify it anyway ax.text(1, 5, \". Data: (1, 5)\", transform=ax.transData) ax.text(0.5, 0.1, \". Axes: (0.5, 0.1)\", transform=ax.transAxes) ax.text(0.2, 0.2, \". Figure: (0.2, 0.2)\", transform=fig.transFigure); ax.set_xlim(0, 2) ax.set_ylim(-6, 6) fig Arrows ve Annotation fig, ax = plt.subplots() x = np.linspace(0, 20, 1000) ax.plot(x, np.cos(x)) ax.axis('equal') ax.annotate('local maximum', xy=(6.28, 1), xytext=(10, 4), arrowprops=dict(facecolor='black', shrink=0.05)) ax.annotate('local minimum', xy=(5 * np.pi, -1), xytext=(2, -6), arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"angle3,angleA=0,angleB=-90\")); Ticks \u00d6zelle\u015ftirme ax = plt.axes(xscale='log', yscale='log') ax.grid(); Matplotlib'i \u00d6zelle\u015ftirme: Konfig\u00fcrasyonlar ve Stiller x = np.random.randn(1000) plt.hist(x); from matplotlib import cycler colors = cycler('color', ['#EE6666', '#3388BB', '#9988DD', '#EECC55', '#88BB44', '#FFBBBB']) plt.rc('axes', facecolor='#E6E6E6', edgecolor='none', axisbelow=True, grid=True, prop_cycle=colors) plt.rc('grid', color='w', linestyle='solid') plt.rc('xtick', direction='out', color='gray') plt.rc('ytick', direction='out', color='gray') plt.rc('patch', edgecolor='#E6E6E6') plt.rc('lines', linewidth=2) plt.hist(x); Matplotlib'de \u00dc\u00e7 Boyutlu G\u00f6rsel \u00c7izme from mpl_toolkits import mplot3d fig = plt.figure() ax = plt.axes(projection='3d') ax = plt.axes(projection='3d') # Data for a three-dimensional line zline = np.linspace(0, 15, 1000) xline = np.sin(zline) yline = np.cos(zline) ax.plot3D(xline, yline, zline, 'gray') # Data for three-dimensional scattered points zdata = 15 * np.random.random(100) xdata = np.sin(zdata) + 0.1 * np.random.randn(100) ydata = np.cos(zdata) + 0.1 * np.random.randn(100) ax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='Greens'); Matplotlib Nesneleri Line-styles References color = 'cornflowerblue' points = np.ones(5) # Draw 5 points for each line text_style = dict(horizontalalignment='right', verticalalignment='center', fontsize=12, fontdict={'family': 'monospace'}) def format_axes(ax): ax.margins(0.2) ax.set_axis_off() # Plot all line styles. fig, ax = plt.subplots() linestyles = ['-', '--', '-.', ':'] for y, linestyle in enumerate(linestyles): ax.text(-0.1, y, repr(linestyle), **text_style) ax.plot(y * points, linestyle=linestyle, color=color, linewidth=3) format_axes(ax) ax.set_title('Line-styles Reference') plt.show() Line styles from collections import OrderedDict from matplotlib.transforms import blended_transform_factory linestyles = OrderedDict( [('solid', (0, ())), ('loosely dotted', (0, (1, 10))), ('dotted', (0, (1, 5))), ('densely dotted', (0, (1, 1))), ('loosely dashed', (0, (5, 10))), ('dashed', (0, (5, 5))), ('densely dashed', (0, (5, 1))), ('loosely dashdotted', (0, (3, 10, 1, 10))), ('dashdotted', (0, (3, 5, 1, 5))), ('densely dashdotted', (0, (3, 1, 1, 1))), ('loosely dashdotdotted', (0, (3, 10, 1, 10, 1, 10))), ('dashdotdotted', (0, (3, 5, 1, 5, 1, 5))), ('densely dashdotdotted', (0, (3, 1, 1, 1, 1, 1)))]) plt.figure(figsize=(10, 6)) ax = plt.subplot(1, 1, 1) X, Y = np.linspace(0, 100, 10), np.zeros(10) for i, (name, linestyle) in enumerate(linestyles.items()): ax.plot(X, Y+i, linestyle=linestyle, linewidth=1.5, color='black') ax.set_ylim(-0.5, len(linestyles)-0.5) plt.yticks(np.arange(len(linestyles)), linestyles.keys()) plt.xticks([]) # For each line style, add a text annotation with a small offset from # the reference point (0 in Axes coords, y tick value in Data coords). reference_transform = blended_transform_factory(ax.transAxes, ax.transData) for i, (name, linestyle) in enumerate(linestyles.items()): ax.annotate(str(linestyle), xy=(0.0, i), xycoords=reference_transform, xytext=(-6, -12), textcoords='offset points', color=\"blue\", fontsize=8, ha=\"right\", family=\"monospace\") ax.set_title('Line styles') plt.tight_layout() plt.show() Fill style from matplotlib.lines import Line2D points = np.ones(5) # Draw 3 points for each line text_style = dict(horizontalalignment='right', verticalalignment='center', fontsize=12, fontdict={'family': 'monospace'}) marker_style = dict(color='cornflowerblue', linestyle=':', marker='o', markersize=15, markerfacecoloralt='gray') def format_axes(ax): ax.margins(0.2) ax.set_axis_off() fig, ax = plt.subplots() # Plot all fill styles. for y, fill_style in enumerate(Line2D.fillStyles): ax.text(-0.5, y, repr(fill_style), **text_style) ax.plot(y * points, fillstyle=fill_style, **marker_style) format_axes(ax) ax.set_title('fill style') plt.show() Un-filled markers points = np.ones(3) # Draw 3 points for each line text_style = dict(horizontalalignment='right', verticalalignment='center', fontsize=12, fontdict={'family': 'monospace'}) marker_style = dict(linestyle=':', color='0.8', markersize=10, mfc=\"C0\", mec=\"C0\") def format_axes(ax): ax.margins(0.2) ax.set_axis_off() ax.invert_yaxis() def nice_repr(text): return repr(text).lstrip('u') def math_repr(text): tx = repr(text).lstrip('u').strip(\"'\").strip(\"$\") return r\"'\\${}\\$'\".format(tx) def split_list(a_list): i_half = len(a_list) // 2 return (a_list[:i_half], a_list[i_half:]) fig, axes = plt.subplots(ncols=2) fig.suptitle('un-filled markers', fontsize=14) # Filter out filled markers and marker settings that do nothing. unfilled_markers = [m for m, func in Line2D.markers.items() if func != 'nothing' and m not in Line2D.filled_markers] for ax, markers in zip(axes, split_list(unfilled_markers)): for y, marker in enumerate(markers): ax.text(-0.5, y, nice_repr(marker), **text_style) ax.plot(y * points, marker=marker, **marker_style) format_axes(ax) plt.show() Filled markers fig, axes = plt.subplots(ncols=2) for ax, markers in zip(axes, split_list(Line2D.filled_markers)): for y, marker in enumerate(markers): ax.text(-0.5, y, nice_repr(marker), **text_style) ax.plot(y * points, marker=marker, **marker_style) format_axes(ax) fig.suptitle('filled markers', fontsize=14) plt.show() Special Marker fig, ax = plt.subplots() fig.subplots_adjust(left=0.4) marker_style.update(mec=\"None\", markersize=15) markers = [\"$1$\", r\"$\\frac{1}{2}$\", \"$f$\", \"$\\u266B$\", r\"$\\mathcircled{m}$\"] for y, marker in enumerate(markers): ax.text(-0.5, y, math_repr(marker), **text_style) ax.plot(y * points, marker=marker, **marker_style) format_axes(ax) plt.show() Renkler import matplotlib.colors as mcolors def plot_colortable(colors, title, sort_colors=True, emptycols=0): cell_width = 212 cell_height = 22 swatch_width = 48 margin = 12 topmargin = 40 # Sort colors by hue, saturation, value and name. by_hsv = ((tuple(mcolors.rgb_to_hsv(mcolors.to_rgba(color)[:3])), name) for name, color in colors.items()) if sort_colors is True: by_hsv = sorted(by_hsv) names = [name for hsv, name in by_hsv] n = len(names) ncols = 4 - emptycols nrows = n // ncols + int(n % ncols > 0) width = cell_width * 4 + 2 * margin height = cell_height * nrows + margin + topmargin dpi = 72 fig, ax = plt.subplots(figsize=(width / dpi, height / dpi), dpi=dpi) fig.subplots_adjust(margin/width, margin/height, (width-margin)/width, (height-topmargin)/height) ax.set_xlim(0, cell_width * 4) ax.set_ylim(cell_height * (nrows-0.5), -cell_height/2.) ax.yaxis.set_visible(False) ax.xaxis.set_visible(False) ax.set_axis_off() ax.set_title(title, fontsize=24, loc=\"left\", pad=10) for i, name in enumerate(names): row = i % nrows col = i // nrows y = row * cell_height swatch_start_x = cell_width * col swatch_end_x = cell_width * col + swatch_width text_pos_x = cell_width * col + swatch_width + 7 ax.text(text_pos_x, y, name, fontsize=14, horizontalalignment='left', verticalalignment='center') ax.hlines(y, swatch_start_x, swatch_end_x, color=colors[name], linewidth=18) return fig plot_colortable(mcolors.BASE_COLORS, \"Base Colors\", sort_colors=False, emptycols=1) plot_colortable(mcolors.TABLEAU_COLORS, \"Tableau Palette\", sort_colors=False, emptycols=2) #sphinx_gallery_thumbnail_number = 3 plot_colortable(mcolors.CSS4_COLORS, \"CSS Colors\") # Optionally plot the XKCD colors (Caution: will produce large figure) #xkcd_fig = plot_colortable(mcolors.XKCD_COLORS, \"XKCD Colors\") #xkcd_fig.savefig(\"XKCD_Colors.png\") plt.show() Pokemon Veri Seti i\u00e7in Matplotlib Bar Chart # Bar Chart type1Names = df['Type 1'].value_counts().index type1Values = df['Type 1'].value_counts().values plt.figure(figsize=(10,10)) plt.ylabel('Values', fontsize='medium') plt.xlabel('Type 1', fontsize='medium') plt.title('Top 20 Pokemon Type 1') plt.bar(type1Names[:10],type1Values[:10], width = 0.7, color=\"blue\",linewidth=0.4) plt.show() Horizontal Bar Chart fig, ax = plt.subplots(figsize=(10,10)) plt.ylabel('Type 1', fontsize='medium') plt.xlabel('Values', fontsize='medium') plt.title('Top 20 Pokemon Type 1') plt.style.use('fivethirtyeight') ax.barh(type1Names[:5], type1Values[:5],color=\"blue\") plt.show() Stacked Bar Chart # Stacked Bar Chart pokemon = df['Name'][:5] hp = df['HP'][:5] attack = df['Attack'][:5] defense = df['Defense'][:5] ind = [x for x, _ in enumerate(pokemon)] plt.figure(figsize=(10,10)) plt.bar(ind, defense, width=0.8, label='Defense', color='blue', bottom=attack+hp) plt.bar(ind, attack, width=0.8, label='Attack', color='gold', bottom=hp) plt.bar(ind, hp, width=0.8, label='Hp', color='red') plt.xticks(ind, pokemon) plt.ylabel(\"Value\") plt.xlabel(\"Pokemon\") plt.legend(loc=\"upper right\") plt.title(\"5 Pokemon Defense & Attack & Hp\") plt.show() Group Bar Chart N = 5 pokemon_hp = df['HP'][:5] pokemon_attack = df['Attack'][:5] ind = np.arange(N) width = 0.35 plt.bar(ind, pokemon_hp, width, label='HP') plt.bar(ind + width, pokemon_attack, width,label='Attack') plt.ylabel('Values') plt.title('Pokemon Hp & Attack') plt.xticks(ind + width / 2, (df['Name'][:5]),rotation=45) plt.legend(loc='best') plt.show() Pie Chart # Pie Chart plt.figure(1, figsize=(8,8)) df['Type 1'].value_counts().head(5).plot.pie(autopct=\"%1.1f%%\") plt.legend() plt.show() Pie Chart - 2 # Pie chart fig1, ax1 = plt.subplots() ax1.pie(type1Values[:5], labels=type1Names[:5], autopct='%1.1f%%',shadow=True, startangle=90) ax1.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle. plt.legend() plt.show() Pie Chart with Label colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral','brown'] patches, texts = plt.pie(type1Values[:5], colors=colors, shadow=True, startangle=90) plt.legend(patches, type1Names[:5], loc=\"best\") plt.axis('equal') plt.tight_layout() plt.show() Nested Pie Chart # nested pie chart fig, ax = plt.subplots() size = 0.3 vals = np.array([[60., 32.], [37., 40.], [29., 10.]]) cmap = plt.get_cmap(\"tab20c\") outer_colors = cmap(np.arange(3)*4) inner_colors = cmap(np.array([1, 2, 5, 6, 9, 10])) ax.pie(vals.sum(axis=1), radius=1, colors=outer_colors, wedgeprops=dict(width=size, edgecolor='w')) ax.pie(vals.flatten(), radius=1-size, colors=inner_colors, wedgeprops=dict(width=size, edgecolor='w')) ax.set(aspect=\"equal\", title='Pie plot with `ax.pie`') plt.show() Legend Example Legend Underside y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='y1 = Pokemon Hp') ax.plot(x, y2, label='y2 = Pokemon Attack') plt.title('Legend Underside') plt.xticks(rotation=90) ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), shadow=True, ncol=2) plt.show() Legend Inside y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='Pokemon HP') ax.plot(x, y2, label='Pokemon Attack') plt.title('Legend inside') plt.xticks(rotation=90) ax.legend() plt.show() Legend Inside - 2 y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='y1 = Pokemon HP') ax.plot(x, y2, label='y2 = Pokemon Attack') plt.title('Legend inside') plt.xticks(rotation=90) ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.00), shadow=True, ncol=2) plt.show() Legend Outside y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='y1 = Pokemon HP') ax.plot(x, y2, label='y2 = Pokemon Attack') plt.title('Legend outside') chartBox = ax.get_position() plt.xticks(rotation=90) ax.set_position([chartBox.x0, chartBox.y0, chartBox.width*0.6, chartBox.height]) ax.legend(loc='upper center', bbox_to_anchor=(1.45, 0.8), shadow=True, ncol=1) plt.show() Scatter Plot # Create data x = df['HP'][:35] y = df['Attack'][:35] colors = (0,0,0) area = np.pi*9 # Plot plt.scatter(x, y, s=area, c=colors, alpha=0.5) plt.title('Scatter plot') plt.xlabel('HP') plt.ylabel('Attack') plt.show() Histogram #Histogram x = df['Attack'][:35] num_bins = 5 n, bins, patches = plt.hist(x, num_bins, facecolor='blue', alpha=0.5) plt.title('Histogram') plt.xlabel('Attack') plt.ylabel('Value') plt.show() Stackplot # Stackplot x = df['Name'][:4] y1 = df['HP'][:4] y2 = df['Attack'][:4] y3 = df['Defense'][:4] labels = [\"HP \", \"Attack\", \"Defense\"] fig, ax = plt.subplots() ax.stackplot(x, y1, y2, y3) ax.legend(loc='upper left', labels=labels) plt.xticks(rotation=90) plt.show() 2 Subplot # Basic Subplot # Data for plotting x1 = df['Name'][:4] x2 = df['Name'][:4] y1 = df['HP'][:4] y2 = df['Attack'][:4] # Create two subplots sharing y axis fig, (ax1, ax2) = plt.subplots(2, sharey=True) ax1.plot(x1, y1, 'ko-') ax1.set(title='2 subplots', ylabel='HP') ax2.plot(x2, y2, 'r.-') ax2.set(xlabel='Pokemon', ylabel='Attack') plt.show() 3 Subplot # Basic Subplot # Data for plotting x1 = df['Name'][:4] x2 = df['Name'][:4] x3 = df['Name'][:4] y1 = df['HP'][:4] y2 = df['Attack'][:4] y3 = df['Defense'][:4] # Create two subplots sharing y axis fig, (ax1, ax2,ax3) = plt.subplots(3, sharey=True) ax1.plot(x1, y1, 'ko-') ax1.set(title='3 subplots', ylabel='HP') ax2.plot(x2, y2, 'r.-') ax2.set(xlabel='Pokemon', ylabel='Attack') ax3.plot(x3, y3, ':') ax3.set(xlabel='Pokemon', ylabel='Defense') plt.show() Color plot bar ax = df['Type 1'].value_counts().sort_index().plot.bar(figsize = (12,6),fontsize = 14) ax.set_title(\"Pokemon Type 1 Count\", fontsize = 20) ax.set_xlabel(\"Pokemon Type 1\", fontsize = 20) ax.set_ylabel(\"Value\", fontsize = 20) plt.show() Linear Graph plt.plot(df['HP'][:15], '-r') plt.plot(df['Attack'][:15], ':g') plt.legend() plt.show() Multiple figures data = df['HP'][:15] plt.title('Pokemon HP') plt.xlabel('Pokemon') plt.ylabel('HP') plt.plot(data) data2 = df['Attack'][:15] plt.title('Pokemon Attack') plt.xlabel('Pokemon') plt.ylabel('Attack') plt.figure() plt.plot(data2) plt.show() Son G\u00fcncelleme: 28 Aral\u0131k 2019 - Cumartesi","title":"Matplotlib"},{"location":"matplotlib/matplotlib/#matplotlib","text":"Matplolib k\u00fct\u00fcphanesi: Matplotlib, platformlarda \u00e7e\u015fitli bas\u0131l\u0131 fig\u00fcrler ve etkile\u015fimli ortamlarda kullan\u0131labilen bir Python 2D \u00e7izim k\u00fct\u00fcphanesidir. Matplotlib, Python scriptlerinde, IPython dosyalar\u0131nda, Jupyter notebook ve web uygulama sunucular\u0131nda kullan\u0131labilir. Not: Burada bulunan anahtar kelimeler T\u00fcrk\u00e7ele\u015ftirilmeden kullan\u0131lm\u0131\u015ft\u0131r. internette arama yaparken daha kolay bulabilmeniz i\u00e7indir. import numpy as np import pandas as pd import warnings warnings.filterwarnings('ignore') df = pd.read_csv('../datas/Pokemon.csv')","title":"Matplotlib"},{"location":"matplotlib/matplotlib/#matplotlib-kutuphanesini-tanmlama","text":"import matplotlib.pyplot as plt","title":"Matplotlib K\u00fct\u00fcphanesini Tan\u0131mlama"},{"location":"matplotlib/matplotlib/#matplotlib-nesne-yaps","text":"Matplotlib'den en iyi \u015fekilde yararlanmak i\u00e7in, nesne yap\u0131s\u0131n\u0131 \u00e7ok iyi bilmeniz gerekir. from matplotlib.ticker import AutoMinorLocator, MultipleLocator, FuncFormatter np.random.seed(19680801) X = np.linspace(0.5, 3.5, 100) Y1 = 3+np.cos(X) Y2 = 1+np.cos(1+X/0.75)/2 Y3 = np.random.uniform(Y1, Y2, len(X)) fig = plt.figure(figsize=(15, 15)) ax = fig.add_subplot(1, 1, 1, aspect=1) def minor_tick(x, pos): if not x % 1.0: return \"\" return \"%.2f\" % x ax.xaxis.set_major_locator(MultipleLocator(1.000)) ax.xaxis.set_minor_locator(AutoMinorLocator(4)) ax.yaxis.set_major_locator(MultipleLocator(1.000)) ax.yaxis.set_minor_locator(AutoMinorLocator(4)) ax.xaxis.set_minor_formatter(FuncFormatter(minor_tick)) ax.set_xlim(0, 4) ax.set_ylim(0, 4) ax.tick_params(which='major', width=1.0) ax.tick_params(which='major', length=10) ax.tick_params(which='minor', width=1.0, labelsize=10) ax.tick_params(which='minor', length=5, labelsize=10, labelcolor='0.25') ax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10) ax.plot(X, Y1, c=(0.25, 0.25, 1.00), lw=2, label=\"Blue signal\", zorder=10) ax.plot(X, Y2, c=(1.00, 0.25, 0.25), lw=2, label=\"Red signal\") ax.plot(X, Y3, linewidth=0, marker='o', markerfacecolor='w', markeredgecolor='k') ax.set_title(\"Anatomy of a figure\", fontsize=20, verticalalignment='bottom') ax.set_xlabel(\"X axis label\") ax.set_ylabel(\"Y axis label\") ax.legend() def circle(x, y, radius=0.15): from matplotlib.patches import Circle from matplotlib.patheffects import withStroke circle = Circle((x, y), radius, clip_on=False, zorder=10, linewidth=1, edgecolor='black', facecolor=(0, 0, 0, .0125), path_effects=[withStroke(linewidth=5, foreground='w')]) ax.add_artist(circle) def text(x, y, text): ax.text(x, y, text, backgroundcolor=\"white\", ha='center', va='top', weight='bold', color='blue') # Minor tick circle(0.50, -0.10) text(0.50, -0.32, \"Minor tick label\") # Major tick circle(-0.03, 4.00) text(0.03, 3.80, \"Major tick\") # Minor tick circle(0.00, 3.50) text(0.00, 3.30, \"Minor tick\") # Major tick label circle(-0.15, 3.00) text(-0.15, 2.80, \"Major tick label\") # X Label circle(1.80, -0.27) text(1.80, -0.45, \"X axis label\") # Y Label circle(-0.27, 1.80) text(-0.27, 1.6, \"Y axis label\") # Title circle(1.60, 4.13) text(1.60, 3.93, \"Title\") # Blue plot circle(1.75, 2.80) text(1.75, 2.60, \"Line\\n(line plot)\") # Red plot circle(1.20, 0.60) text(1.20, 0.40, \"Line\\n(line plot)\") # Scatter plot circle(3.20, 1.75) text(3.20, 1.55, \"Markers\\n(scatter plot)\") # Grid circle(3.00, 3.00) text(3.00, 2.80, \"Grid\") # Legend circle(3.70, 3.80) text(3.70, 3.60, \"Legend\") # Axes circle(0.5, 0.5) text(0.5, 0.3, \"Axes\") # Figure circle(-0.3, 0.65) text(-0.3, 0.45, \"Figure\") color = 'blue' ax.annotate('Spines', xy=(4.0, 0.35), xycoords='data', xytext=(3.3, 0.5), textcoords='data', weight='bold', color=color, arrowprops=dict(arrowstyle='->', connectionstyle=\"arc3\", color=color)) ax.annotate('', xy=(3.15, 0.0), xycoords='data', xytext=(3.45, 0.45), textcoords='data', weight='bold', color=color, arrowprops=dict(arrowstyle='->', connectionstyle=\"arc3\", color=color)) ax.text(4.0, -0.4, \"Made with http://matplotlib.org\", fontsize=10, ha=\"right\", color='.5') plt.show()","title":"Matplotlib Nesne Yap\u0131s\u0131"},{"location":"matplotlib/matplotlib/#cktlar-dosya-olarak-kaydetme","text":"Bazen \u00fcretti\u011fimiz fig\u00fcr\u00fc kaydetmek isteyebiliriz. Bunun i\u00e7in matplotlib'in dosya kaydederken hangi dosya t\u00fcrlerini destekledi\u011finiz bilmemiz gerekir. fig = plt.figure() # fig.savefig('my_figure.png') -> This code save the your figure. fig.canvas.get_supported_filetypes() {'ps': 'Postscript', 'eps': 'Encapsulated Postscript', 'pdf': 'Portable Document Format', 'pgf': 'PGF code for LaTeX', 'png': 'Portable Network Graphics', 'raw': 'Raw RGBA bitmap', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'svgz': 'Scalable Vector Graphics', 'jpg': 'Joint Photographic Experts Group', 'jpeg': 'Joint Photographic Experts Group', 'tif': 'Tagged Image File Format', 'tiff': 'Tagged Image File Format'} <Figure size 432x288 with 0 Axes>","title":"\u00c7\u0131kt\u0131lar\u0131 Dosya Olarak Kaydetme"},{"location":"matplotlib/matplotlib/#stillerstylesheets","text":"Matplotlib'de bir\u00e7ok stil var. Bu stillerin t\u00fcm\u00fc a\u015fa\u011f\u0131da listelenmi\u015ftir. plt.style.available # plt.style.use('stylename') ['seaborn-muted', 'seaborn', 'seaborn-talk', 'seaborn-colorblind', 'seaborn-poster', 'seaborn-ticks', 'seaborn-dark', 'seaborn-whitegrid', 'ggplot', 'seaborn-pastel', 'classic', 'seaborn-white', 'seaborn-bright', 'Solarize_Light2', 'seaborn-paper', 'fivethirtyeight', 'fast', 'seaborn-dark-palette', 'dark_background', 'bmh', 'seaborn-notebook', 'seaborn-deep', '_classic_test', 'grayscale', 'seaborn-darkgrid', 'tableau-colorblind10'] def plot_scatter(ax, prng, nb_samples=100): \"\"\"Scatter plot. \"\"\" for mu, sigma, marker in [(-.5, 0.75, 'o'), (0.75, 1., 's')]: x, y = prng.normal(loc=mu, scale=sigma, size=(2, nb_samples)) ax.plot(x, y, ls='none', marker=marker) ax.set_xlabel('X-label') return ax def plot_colored_sinusoidal_lines(ax): \"\"\"Plot sinusoidal lines with colors following the style color cycle. \"\"\" L = 2 * np.pi x = np.linspace(0, L) nb_colors = len(plt.rcParams['axes.prop_cycle']) shift = np.linspace(0, L, nb_colors, endpoint=False) for s in shift: ax.plot(x, np.sin(x + s), '-') ax.set_xlim([x[0], x[-1]]) return ax def plot_bar_graphs(ax, prng, min_value=5, max_value=25, nb_samples=5): \"\"\"Plot two bar graphs side by side, with letters as x-tick labels. \"\"\" x = np.arange(nb_samples) ya, yb = prng.randint(min_value, max_value, size=(2, nb_samples)) width = 0.25 ax.bar(x, ya, width) ax.bar(x + width, yb, width, color='C2') ax.set_xticks(x + width) ax.set_xticklabels(['a', 'b', 'c', 'd', 'e']) return ax def plot_colored_circles(ax, prng, nb_samples=15): \"\"\"Plot circle patches. NB: draws a fixed amount of samples, rather than using the length of the color cycle, because different styles may have different numbers of colors. \"\"\" for sty_dict, j in zip(plt.rcParams['axes.prop_cycle'], range(nb_samples)): ax.add_patch(plt.Circle(prng.normal(scale=3, size=2), radius=1.0, color=sty_dict['color'])) # Force the limits to be the same across the styles (because different # styles may have different numbers of available colors). ax.set_xlim([-4, 8]) ax.set_ylim([-5, 6]) ax.set_aspect('equal', adjustable='box') # to plot circles as circles return ax def plot_image_and_patch(ax, prng, size=(20, 20)): \"\"\"Plot an image with random values and superimpose a circular patch. \"\"\" values = prng.random_sample(size=size) ax.imshow(values, interpolation='none') c = plt.Circle((5, 5), radius=5, label='patch') ax.add_patch(c) # Remove ticks ax.set_xticks([]) ax.set_yticks([]) def plot_histograms(ax, prng, nb_samples=10000): \"\"\"Plot 4 histograms and a text annotation. \"\"\" params = ((10, 10), (4, 12), (50, 12), (6, 55)) for a, b in params: values = prng.beta(a, b, size=nb_samples) ax.hist(values, histtype=\"stepfilled\", bins=30, alpha=0.8, normed=True) # Add a small annotation. ax.annotate('Annotation', xy=(0.25, 4.25), xycoords='data', xytext=(0.9, 0.9), textcoords='axes fraction', va=\"top\", ha=\"right\", bbox=dict(boxstyle=\"round\", alpha=0.2), arrowprops=dict( arrowstyle=\"->\", connectionstyle=\"angle,angleA=-95,angleB=35,rad=10\"), ) return ax def plot_figure(style_label=\"\"): \"\"\"Setup and plot the demonstration figure with a given style. \"\"\" # Use a dedicated RandomState instance to draw the same \"random\" values # across the different figures. prng = np.random.RandomState(96917002) # Tweak the figure size to be better suited for a row of numerous plots: # double the width and halve the height. NB: use relative changes because # some styles may have a figure size different from the default one. (fig_width, fig_height) = plt.rcParams['figure.figsize'] fig_size = [fig_width * 2, fig_height / 2] fig, axes = plt.subplots(ncols=6, nrows=1, num=style_label, figsize=fig_size, squeeze=True) axes[0].set_ylabel(style_label) plot_scatter(axes[0], prng) plot_image_and_patch(axes[1], prng) plot_bar_graphs(axes[2], prng) plot_colored_circles(axes[3], prng) plot_colored_sinusoidal_lines(axes[4]) plot_histograms(axes[5], prng) fig.tight_layout() return fig if __name__ == \"__main__\": # Setup a list of all available styles, in alphabetical order but # the `default` and `classic` ones, which will be forced resp. in # first and second position. style_list = list(plt.style.available) # *new* list: avoids side effects. style_list.remove('classic') # `classic` is in the list: first remove it. style_list.sort() style_list.insert(0, u'default') style_list.insert(1, u'classic') # Plot a demonstration figure for every available style sheet. for style_label in style_list: with plt.style.context(style_label): fig = plot_figure(style_label=style_label) plt.show()","title":"Stiller(Stylesheets)"},{"location":"matplotlib/matplotlib/#iki-arayuz","text":"MatPlotlib'i kullanman\u0131n iki farkl\u0131 yolu vard\u0131r. Bunlardan ilki MATLAB stili, ikincisi ise nesne y\u00f6nelimli aray\u00fcz stilidir. \u015eimdi bunlara bakal\u0131m.","title":"\u0130ki Aray\u00fcz"},{"location":"matplotlib/matplotlib/#matlab-stil-arayuzu","text":"plt.figure() # create a plot figure x = np.linspace(0, 10, 100) # create the first of two panels and set current axis plt.subplot(2, 1, 1) # (rows, columns, panel number) plt.plot(x, np.sin(x)) # create the second panel and set current axis plt.subplot(2, 1, 2) plt.plot(x, np.cos(x)); plt.show()","title":"MATLAB Stil Aray\u00fcz\u00fc"},{"location":"matplotlib/matplotlib/#nesne-yonelimli-arayuz","text":"# First create a grid of plots # ax will be an array of two Axes objects fig, ax = plt.subplots(2) # Call plot() method on the appropriate object ax[0].plot(x, np.sin(x)) ax[1].plot(x, np.cos(x));","title":"Nesne Y\u00f6nelimli Aray\u00fcz"},{"location":"matplotlib/matplotlib/#scatter-plots","text":"Scatter Plot g\u00f6sterimi i\u00e7in farkl\u0131 y\u00f6ntemler ve \u00f6zelle\u015ftirmeler vard\u0131r. Bunlara bakal\u0131m.","title":"Scatter Plots"},{"location":"matplotlib/matplotlib/#plot","text":"x = np.linspace(0, 10, 30) y = np.sin(x) plt.plot(x, y, 'o', color='black'); plt.show() rng = np.random.RandomState(0) for marker in ['o', '.', ',', 'x', '+', 'v', '^', '<', '>', 's', 'd']: plt.plot(rng.rand(5), rng.rand(5), marker, label=\"marker='{0}'\".format(marker)) plt.legend(numpoints=1) plt.xlim(0, 1.8); plt.show() plt.plot(x, y, '-ok'); plt.show() plt.plot(x, y, '-p', color='gray', markersize=15, linewidth=4, markerfacecolor='white', markeredgecolor='gray', markeredgewidth=2) plt.ylim(-1.2, 1.2);","title":"plot"},{"location":"matplotlib/matplotlib/#scatter","text":"Plt.scatter \u00f6\u011fesinin plt.plot \u00f6\u011fesinden temel fark\u0131, her bir noktan\u0131n \u00f6zelliklerinin (boyut, y\u00fcz rengi, kenar rengi vb.) Ayr\u0131 ayr\u0131 kontrol edilebilece\u011fi veya verilere e\u015flenebilece\u011fi scatter plot olu\u015fturmak i\u00e7in kullan\u0131labilmesidir. plt.scatter(x, y, marker='o'); plt.show() Renkli scatter plot rng = np.random.RandomState(0) x = rng.randn(100) y = rng.randn(100) colors = rng.rand(100) sizes = 1000 * rng.rand(100) plt.scatter(x, y, c=colors, s=sizes, alpha=0.3, cmap='viridis') plt.colorbar(); # show color scale","title":"scatter"},{"location":"matplotlib/matplotlib/#basit-hata-cubuklar","text":"plt.style.use('seaborn-whitegrid') x = np.linspace(0, 10, 50) dy = 0.8 y = np.sin(x) + dy * np.random.randn(50) plt.errorbar(x, y, yerr=dy, fmt='.k'); plt.errorbar(x, y, yerr=dy, fmt='o', color='black',ecolor='lightgray', elinewidth=3, capsize=0);","title":"Basit Hata \u00c7ubuklar\u0131"},{"location":"matplotlib/matplotlib/#histograms-binnings-ve-density","text":"plt.style.use('seaborn-white') data = np.random.randn(1000) plt.hist(data); plt.hist(data, bins=30, normed=True, alpha=0.5, histtype='stepfilled', color='steelblue', edgecolor='none'); plt.show() Renkli histogram x1 = np.random.normal(0, 0.8, 1000) x2 = np.random.normal(-2, 1, 1000) x3 = np.random.normal(3, 2, 1000) kwargs = dict(histtype='stepfilled', alpha=0.3, normed=True, bins=40) plt.hist(x1, **kwargs) plt.hist(x2, **kwargs) plt.hist(x3, **kwargs);","title":"Histograms, Binnings, ve Density"},{"location":"matplotlib/matplotlib/#iki-boyutlu-histograms-and-binnings","text":"mean = [0, 0] cov = [[1, 1], [1, 2]] x, y = np.random.multivariate_normal(mean, cov, 10000).T plt.hist2d(x, y, bins=30, cmap='Blues') cb = plt.colorbar() cb.set_label('counts in bin') plt.hexbin(x, y, gridsize=30, cmap='Blues') cb = plt.colorbar(label='count in bin')","title":"\u0130ki Boyutlu Histograms and Binnings"},{"location":"matplotlib/matplotlib/#plot-legend-nesnesini-ozellestirme","text":"x = np.linspace(0, 10, 1000) fig, ax = plt.subplots() ax.plot(x, np.sin(x), '-b', label='Sine') ax.plot(x, np.cos(x), '--r', label='Cosine') ax.axis('equal') leg = ax.legend(); ax.legend(loc='upper left', frameon=False) fig ax.legend(frameon=False, loc='lower center', ncol=2) fig ax.legend(fancybox=True, framealpha=1, shadow=True, borderpad=1) fig","title":"Plot Legend Nesnesini \u00d6zelle\u015ftirme"},{"location":"matplotlib/matplotlib/#legend-icin-eleman-secimi","text":"y = np.sin(x[:, np.newaxis] + np.pi * np.arange(0, 2, 0.5)) lines = plt.plot(x, y) # lines is a list of plt.Line2D instances plt.legend(lines[:2], ['first', 'second']); plt.plot(x, y[:, 0], label='first') plt.plot(x, y[:, 1], label='second') plt.plot(x, y[:, 2:]) plt.legend(framealpha=1, frameon=True);","title":"Legend \u0130\u00e7in Eleman Se\u00e7imi"},{"location":"matplotlib/matplotlib/#birden-fazla-legend","text":"fig, ax = plt.subplots() lines = [] styles = ['-', '--', '-.', ':'] x = np.linspace(0, 10, 1000) for i in range(4): lines += ax.plot(x, np.sin(x - i * np.pi / 2), styles[i], color='black') ax.axis('equal') # specify the lines and labels of the first legend ax.legend(lines[:2], ['line A', 'line B'], loc='upper right', frameon=False) # Create the second legend and add the artist manually. from matplotlib.legend import Legend leg = Legend(ax, lines[2:], ['line C', 'line D'], loc='lower right', frameon=False) ax.add_artist(leg);","title":"Birden Fazla Legend"},{"location":"matplotlib/matplotlib/#renk-cubugunu-ozellestirme","text":"x = np.linspace(0, 10, 1000) I = np.sin(x) * np.cos(x[:, np.newaxis]) plt.imshow(I) plt.colorbar(); plt.imshow(I, cmap='gray'); speckles = (np.random.random(I.shape) < 0.01) I[speckles] = np.random.normal(0, 3, np.count_nonzero(speckles)) plt.figure(figsize=(10, 3.5)) plt.subplot(1, 2, 1) plt.imshow(I, cmap='RdBu') plt.colorbar() plt.subplot(1, 2, 2) plt.imshow(I, cmap='RdBu') plt.colorbar(extend='both') plt.clim(-1, 1); plt.imshow(I, cmap=plt.cm.get_cmap('Blues', 6)) plt.colorbar() plt.clim(-1, 1);","title":"Renk \u00c7ubu\u011funu \u00d6zelle\u015ftirme"},{"location":"matplotlib/matplotlib/#birden-fazla-subplot","text":"ax1 = plt.axes() # standard axes ax2 = plt.axes([0.65, 0.65, 0.2, 0.2]) fig = plt.figure() ax1 = fig.add_axes([0.1, 0.5, 0.8, 0.4], xticklabels=[], ylim=(-1.2, 1.2)) ax2 = fig.add_axes([0.1, 0.1, 0.8, 0.4], ylim=(-1.2, 1.2)) x = np.linspace(0, 10) ax1.plot(np.sin(x)) ax2.plot(np.cos(x));","title":"Birden Fazla Subplot"},{"location":"matplotlib/matplotlib/#basit-subplot-izgaralar","text":"for i in range(1, 7): plt.subplot(2, 3, i) plt.text(0.5, 0.5, str((2, 3, i)), fontsize=18, ha='center') fig = plt.figure() fig.subplots_adjust(hspace=0.4, wspace=0.4) for i in range(1, 7): ax = fig.add_subplot(2, 3, i) ax.text(0.5, 0.5, str((2, 3, i)), fontsize=18, ha='center') fig, ax = plt.subplots(2, 3, sharex='col', sharey='row') # axes are in a two-dimensional array, indexed by [row, col] for i in range(2): for j in range(3): ax[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha='center') fig","title":"Basit Subplot Izgaralar\u0131"},{"location":"matplotlib/matplotlib/#daha-karmask-duzenlemeler","text":"grid = plt.GridSpec(2, 3, wspace=0.4, hspace=0.3) plt.subplot(grid[0, 0]) plt.subplot(grid[0, 1:]) plt.subplot(grid[1, :2]) plt.subplot(grid[1, 2]); # Create some normally distributed data mean = [0, 0] cov = [[1, 1], [1, 2]] x, y = np.random.multivariate_normal(mean, cov, 3000).T # Set up the axes with gridspec fig = plt.figure(figsize=(6, 6)) grid = plt.GridSpec(4, 4, hspace=0.2, wspace=0.2) main_ax = fig.add_subplot(grid[:-1, 1:]) y_hist = fig.add_subplot(grid[:-1, 0], xticklabels=[], sharey=main_ax) x_hist = fig.add_subplot(grid[-1, 1:], yticklabels=[], sharex=main_ax) # scatter points on the main axes main_ax.plot(x, y, 'ok', markersize=3, alpha=0.2) # histogram on the attached axes x_hist.hist(x, 40, histtype='stepfilled', orientation='vertical', color='gray') x_hist.invert_yaxis() y_hist.hist(y, 40, histtype='stepfilled', orientation='horizontal', color='gray') y_hist.invert_xaxis()","title":"Daha Karma\u015f\u0131k D\u00fczenlemeler"},{"location":"matplotlib/matplotlib/#text-ve-annotation","text":"ax.transData: Veri koordinatlar\u0131yla ili\u015fkili d\u00f6n\u00fc\u015f\u00fcm ax.transAxes: Eksenlerle ili\u015fkili d\u00f6n\u00fc\u015f\u00fcm (eksen \u00f6l\u00e7\u00fc birimleri cinsinden) fig.transFigure: \u015eekille ili\u015fkili d\u00f6n\u00fc\u015f\u00fcm (\u015fekil boyutlar\u0131n\u0131n birimlerinde) fig, ax = plt.subplots(facecolor='lightgray') ax.axis([0, 10, 0, 10]) # transform=ax.transData is the default, but we'll specify it anyway ax.text(1, 5, \". Data: (1, 5)\", transform=ax.transData) ax.text(0.5, 0.1, \". Axes: (0.5, 0.1)\", transform=ax.transAxes) ax.text(0.2, 0.2, \". Figure: (0.2, 0.2)\", transform=fig.transFigure); ax.set_xlim(0, 2) ax.set_ylim(-6, 6) fig","title":"Text ve Annotation"},{"location":"matplotlib/matplotlib/#arrows-ve-annotation","text":"fig, ax = plt.subplots() x = np.linspace(0, 20, 1000) ax.plot(x, np.cos(x)) ax.axis('equal') ax.annotate('local maximum', xy=(6.28, 1), xytext=(10, 4), arrowprops=dict(facecolor='black', shrink=0.05)) ax.annotate('local minimum', xy=(5 * np.pi, -1), xytext=(2, -6), arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"angle3,angleA=0,angleB=-90\"));","title":"Arrows ve Annotation"},{"location":"matplotlib/matplotlib/#ticks-ozellestirme","text":"ax = plt.axes(xscale='log', yscale='log') ax.grid();","title":"Ticks \u00d6zelle\u015ftirme"},{"location":"matplotlib/matplotlib/#matplotlibi-ozellestirme-konfigurasyonlar-ve-stiller","text":"x = np.random.randn(1000) plt.hist(x); from matplotlib import cycler colors = cycler('color', ['#EE6666', '#3388BB', '#9988DD', '#EECC55', '#88BB44', '#FFBBBB']) plt.rc('axes', facecolor='#E6E6E6', edgecolor='none', axisbelow=True, grid=True, prop_cycle=colors) plt.rc('grid', color='w', linestyle='solid') plt.rc('xtick', direction='out', color='gray') plt.rc('ytick', direction='out', color='gray') plt.rc('patch', edgecolor='#E6E6E6') plt.rc('lines', linewidth=2) plt.hist(x);","title":"Matplotlib'i \u00d6zelle\u015ftirme: Konfig\u00fcrasyonlar ve Stiller"},{"location":"matplotlib/matplotlib/#matplotlibde-uc-boyutlu-gorsel-cizme","text":"from mpl_toolkits import mplot3d fig = plt.figure() ax = plt.axes(projection='3d') ax = plt.axes(projection='3d') # Data for a three-dimensional line zline = np.linspace(0, 15, 1000) xline = np.sin(zline) yline = np.cos(zline) ax.plot3D(xline, yline, zline, 'gray') # Data for three-dimensional scattered points zdata = 15 * np.random.random(100) xdata = np.sin(zdata) + 0.1 * np.random.randn(100) ydata = np.cos(zdata) + 0.1 * np.random.randn(100) ax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='Greens');","title":"Matplotlib'de \u00dc\u00e7 Boyutlu G\u00f6rsel \u00c7izme"},{"location":"matplotlib/matplotlib/#matplotlib-nesneleri","text":"","title":"Matplotlib Nesneleri"},{"location":"matplotlib/matplotlib/#line-styles-references","text":"color = 'cornflowerblue' points = np.ones(5) # Draw 5 points for each line text_style = dict(horizontalalignment='right', verticalalignment='center', fontsize=12, fontdict={'family': 'monospace'}) def format_axes(ax): ax.margins(0.2) ax.set_axis_off() # Plot all line styles. fig, ax = plt.subplots() linestyles = ['-', '--', '-.', ':'] for y, linestyle in enumerate(linestyles): ax.text(-0.1, y, repr(linestyle), **text_style) ax.plot(y * points, linestyle=linestyle, color=color, linewidth=3) format_axes(ax) ax.set_title('Line-styles Reference') plt.show()","title":"Line-styles References"},{"location":"matplotlib/matplotlib/#line-styles","text":"from collections import OrderedDict from matplotlib.transforms import blended_transform_factory linestyles = OrderedDict( [('solid', (0, ())), ('loosely dotted', (0, (1, 10))), ('dotted', (0, (1, 5))), ('densely dotted', (0, (1, 1))), ('loosely dashed', (0, (5, 10))), ('dashed', (0, (5, 5))), ('densely dashed', (0, (5, 1))), ('loosely dashdotted', (0, (3, 10, 1, 10))), ('dashdotted', (0, (3, 5, 1, 5))), ('densely dashdotted', (0, (3, 1, 1, 1))), ('loosely dashdotdotted', (0, (3, 10, 1, 10, 1, 10))), ('dashdotdotted', (0, (3, 5, 1, 5, 1, 5))), ('densely dashdotdotted', (0, (3, 1, 1, 1, 1, 1)))]) plt.figure(figsize=(10, 6)) ax = plt.subplot(1, 1, 1) X, Y = np.linspace(0, 100, 10), np.zeros(10) for i, (name, linestyle) in enumerate(linestyles.items()): ax.plot(X, Y+i, linestyle=linestyle, linewidth=1.5, color='black') ax.set_ylim(-0.5, len(linestyles)-0.5) plt.yticks(np.arange(len(linestyles)), linestyles.keys()) plt.xticks([]) # For each line style, add a text annotation with a small offset from # the reference point (0 in Axes coords, y tick value in Data coords). reference_transform = blended_transform_factory(ax.transAxes, ax.transData) for i, (name, linestyle) in enumerate(linestyles.items()): ax.annotate(str(linestyle), xy=(0.0, i), xycoords=reference_transform, xytext=(-6, -12), textcoords='offset points', color=\"blue\", fontsize=8, ha=\"right\", family=\"monospace\") ax.set_title('Line styles') plt.tight_layout() plt.show()","title":"Line styles"},{"location":"matplotlib/matplotlib/#fill-style","text":"from matplotlib.lines import Line2D points = np.ones(5) # Draw 3 points for each line text_style = dict(horizontalalignment='right', verticalalignment='center', fontsize=12, fontdict={'family': 'monospace'}) marker_style = dict(color='cornflowerblue', linestyle=':', marker='o', markersize=15, markerfacecoloralt='gray') def format_axes(ax): ax.margins(0.2) ax.set_axis_off() fig, ax = plt.subplots() # Plot all fill styles. for y, fill_style in enumerate(Line2D.fillStyles): ax.text(-0.5, y, repr(fill_style), **text_style) ax.plot(y * points, fillstyle=fill_style, **marker_style) format_axes(ax) ax.set_title('fill style') plt.show()","title":"Fill style"},{"location":"matplotlib/matplotlib/#un-filled-markers","text":"points = np.ones(3) # Draw 3 points for each line text_style = dict(horizontalalignment='right', verticalalignment='center', fontsize=12, fontdict={'family': 'monospace'}) marker_style = dict(linestyle=':', color='0.8', markersize=10, mfc=\"C0\", mec=\"C0\") def format_axes(ax): ax.margins(0.2) ax.set_axis_off() ax.invert_yaxis() def nice_repr(text): return repr(text).lstrip('u') def math_repr(text): tx = repr(text).lstrip('u').strip(\"'\").strip(\"$\") return r\"'\\${}\\$'\".format(tx) def split_list(a_list): i_half = len(a_list) // 2 return (a_list[:i_half], a_list[i_half:]) fig, axes = plt.subplots(ncols=2) fig.suptitle('un-filled markers', fontsize=14) # Filter out filled markers and marker settings that do nothing. unfilled_markers = [m for m, func in Line2D.markers.items() if func != 'nothing' and m not in Line2D.filled_markers] for ax, markers in zip(axes, split_list(unfilled_markers)): for y, marker in enumerate(markers): ax.text(-0.5, y, nice_repr(marker), **text_style) ax.plot(y * points, marker=marker, **marker_style) format_axes(ax) plt.show()","title":"Un-filled markers"},{"location":"matplotlib/matplotlib/#filled-markers","text":"fig, axes = plt.subplots(ncols=2) for ax, markers in zip(axes, split_list(Line2D.filled_markers)): for y, marker in enumerate(markers): ax.text(-0.5, y, nice_repr(marker), **text_style) ax.plot(y * points, marker=marker, **marker_style) format_axes(ax) fig.suptitle('filled markers', fontsize=14) plt.show()","title":"Filled markers"},{"location":"matplotlib/matplotlib/#special-marker","text":"fig, ax = plt.subplots() fig.subplots_adjust(left=0.4) marker_style.update(mec=\"None\", markersize=15) markers = [\"$1$\", r\"$\\frac{1}{2}$\", \"$f$\", \"$\\u266B$\", r\"$\\mathcircled{m}$\"] for y, marker in enumerate(markers): ax.text(-0.5, y, math_repr(marker), **text_style) ax.plot(y * points, marker=marker, **marker_style) format_axes(ax) plt.show()","title":"Special Marker"},{"location":"matplotlib/matplotlib/#renkler","text":"import matplotlib.colors as mcolors def plot_colortable(colors, title, sort_colors=True, emptycols=0): cell_width = 212 cell_height = 22 swatch_width = 48 margin = 12 topmargin = 40 # Sort colors by hue, saturation, value and name. by_hsv = ((tuple(mcolors.rgb_to_hsv(mcolors.to_rgba(color)[:3])), name) for name, color in colors.items()) if sort_colors is True: by_hsv = sorted(by_hsv) names = [name for hsv, name in by_hsv] n = len(names) ncols = 4 - emptycols nrows = n // ncols + int(n % ncols > 0) width = cell_width * 4 + 2 * margin height = cell_height * nrows + margin + topmargin dpi = 72 fig, ax = plt.subplots(figsize=(width / dpi, height / dpi), dpi=dpi) fig.subplots_adjust(margin/width, margin/height, (width-margin)/width, (height-topmargin)/height) ax.set_xlim(0, cell_width * 4) ax.set_ylim(cell_height * (nrows-0.5), -cell_height/2.) ax.yaxis.set_visible(False) ax.xaxis.set_visible(False) ax.set_axis_off() ax.set_title(title, fontsize=24, loc=\"left\", pad=10) for i, name in enumerate(names): row = i % nrows col = i // nrows y = row * cell_height swatch_start_x = cell_width * col swatch_end_x = cell_width * col + swatch_width text_pos_x = cell_width * col + swatch_width + 7 ax.text(text_pos_x, y, name, fontsize=14, horizontalalignment='left', verticalalignment='center') ax.hlines(y, swatch_start_x, swatch_end_x, color=colors[name], linewidth=18) return fig plot_colortable(mcolors.BASE_COLORS, \"Base Colors\", sort_colors=False, emptycols=1) plot_colortable(mcolors.TABLEAU_COLORS, \"Tableau Palette\", sort_colors=False, emptycols=2) #sphinx_gallery_thumbnail_number = 3 plot_colortable(mcolors.CSS4_COLORS, \"CSS Colors\") # Optionally plot the XKCD colors (Caution: will produce large figure) #xkcd_fig = plot_colortable(mcolors.XKCD_COLORS, \"XKCD Colors\") #xkcd_fig.savefig(\"XKCD_Colors.png\") plt.show()","title":"Renkler"},{"location":"matplotlib/matplotlib/#pokemon-veri-seti-icin-matplotlib","text":"","title":"Pokemon Veri Seti i\u00e7in Matplotlib"},{"location":"matplotlib/matplotlib/#bar-chart","text":"# Bar Chart type1Names = df['Type 1'].value_counts().index type1Values = df['Type 1'].value_counts().values plt.figure(figsize=(10,10)) plt.ylabel('Values', fontsize='medium') plt.xlabel('Type 1', fontsize='medium') plt.title('Top 20 Pokemon Type 1') plt.bar(type1Names[:10],type1Values[:10], width = 0.7, color=\"blue\",linewidth=0.4) plt.show()","title":"Bar Chart"},{"location":"matplotlib/matplotlib/#horizontal-bar-chart","text":"fig, ax = plt.subplots(figsize=(10,10)) plt.ylabel('Type 1', fontsize='medium') plt.xlabel('Values', fontsize='medium') plt.title('Top 20 Pokemon Type 1') plt.style.use('fivethirtyeight') ax.barh(type1Names[:5], type1Values[:5],color=\"blue\") plt.show()","title":"Horizontal Bar Chart"},{"location":"matplotlib/matplotlib/#stacked-bar-chart","text":"# Stacked Bar Chart pokemon = df['Name'][:5] hp = df['HP'][:5] attack = df['Attack'][:5] defense = df['Defense'][:5] ind = [x for x, _ in enumerate(pokemon)] plt.figure(figsize=(10,10)) plt.bar(ind, defense, width=0.8, label='Defense', color='blue', bottom=attack+hp) plt.bar(ind, attack, width=0.8, label='Attack', color='gold', bottom=hp) plt.bar(ind, hp, width=0.8, label='Hp', color='red') plt.xticks(ind, pokemon) plt.ylabel(\"Value\") plt.xlabel(\"Pokemon\") plt.legend(loc=\"upper right\") plt.title(\"5 Pokemon Defense & Attack & Hp\") plt.show()","title":"Stacked Bar Chart"},{"location":"matplotlib/matplotlib/#group-bar-chart","text":"N = 5 pokemon_hp = df['HP'][:5] pokemon_attack = df['Attack'][:5] ind = np.arange(N) width = 0.35 plt.bar(ind, pokemon_hp, width, label='HP') plt.bar(ind + width, pokemon_attack, width,label='Attack') plt.ylabel('Values') plt.title('Pokemon Hp & Attack') plt.xticks(ind + width / 2, (df['Name'][:5]),rotation=45) plt.legend(loc='best') plt.show()","title":"Group Bar Chart"},{"location":"matplotlib/matplotlib/#pie-chart","text":"# Pie Chart plt.figure(1, figsize=(8,8)) df['Type 1'].value_counts().head(5).plot.pie(autopct=\"%1.1f%%\") plt.legend() plt.show()","title":"Pie Chart"},{"location":"matplotlib/matplotlib/#pie-chart-2","text":"# Pie chart fig1, ax1 = plt.subplots() ax1.pie(type1Values[:5], labels=type1Names[:5], autopct='%1.1f%%',shadow=True, startangle=90) ax1.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle. plt.legend() plt.show()","title":"Pie Chart - 2"},{"location":"matplotlib/matplotlib/#pie-chart-with-label","text":"colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral','brown'] patches, texts = plt.pie(type1Values[:5], colors=colors, shadow=True, startangle=90) plt.legend(patches, type1Names[:5], loc=\"best\") plt.axis('equal') plt.tight_layout() plt.show()","title":"Pie Chart with Label"},{"location":"matplotlib/matplotlib/#nested-pie-chart","text":"# nested pie chart fig, ax = plt.subplots() size = 0.3 vals = np.array([[60., 32.], [37., 40.], [29., 10.]]) cmap = plt.get_cmap(\"tab20c\") outer_colors = cmap(np.arange(3)*4) inner_colors = cmap(np.array([1, 2, 5, 6, 9, 10])) ax.pie(vals.sum(axis=1), radius=1, colors=outer_colors, wedgeprops=dict(width=size, edgecolor='w')) ax.pie(vals.flatten(), radius=1-size, colors=inner_colors, wedgeprops=dict(width=size, edgecolor='w')) ax.set(aspect=\"equal\", title='Pie plot with `ax.pie`') plt.show()","title":"Nested Pie Chart"},{"location":"matplotlib/matplotlib/#legend-example","text":"","title":"Legend Example"},{"location":"matplotlib/matplotlib/#legend-underside","text":"y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='y1 = Pokemon Hp') ax.plot(x, y2, label='y2 = Pokemon Attack') plt.title('Legend Underside') plt.xticks(rotation=90) ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), shadow=True, ncol=2) plt.show()","title":"Legend Underside"},{"location":"matplotlib/matplotlib/#legend-inside","text":"y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='Pokemon HP') ax.plot(x, y2, label='Pokemon Attack') plt.title('Legend inside') plt.xticks(rotation=90) ax.legend() plt.show()","title":"Legend Inside"},{"location":"matplotlib/matplotlib/#legend-inside-2","text":"y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='y1 = Pokemon HP') ax.plot(x, y2, label='y2 = Pokemon Attack') plt.title('Legend inside') plt.xticks(rotation=90) ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.00), shadow=True, ncol=2) plt.show()","title":"Legend Inside - 2"},{"location":"matplotlib/matplotlib/#legend-outside","text":"y1 = df['HP'][:10] y2 = df['Attack'][:10] x = df['Name'][:10] fig = plt.figure() ax = plt.subplot(111) ax.plot(x, y1, label='y1 = Pokemon HP') ax.plot(x, y2, label='y2 = Pokemon Attack') plt.title('Legend outside') chartBox = ax.get_position() plt.xticks(rotation=90) ax.set_position([chartBox.x0, chartBox.y0, chartBox.width*0.6, chartBox.height]) ax.legend(loc='upper center', bbox_to_anchor=(1.45, 0.8), shadow=True, ncol=1) plt.show()","title":"Legend Outside"},{"location":"matplotlib/matplotlib/#scatter-plot","text":"# Create data x = df['HP'][:35] y = df['Attack'][:35] colors = (0,0,0) area = np.pi*9 # Plot plt.scatter(x, y, s=area, c=colors, alpha=0.5) plt.title('Scatter plot') plt.xlabel('HP') plt.ylabel('Attack') plt.show()","title":"Scatter Plot"},{"location":"matplotlib/matplotlib/#histogram","text":"#Histogram x = df['Attack'][:35] num_bins = 5 n, bins, patches = plt.hist(x, num_bins, facecolor='blue', alpha=0.5) plt.title('Histogram') plt.xlabel('Attack') plt.ylabel('Value') plt.show()","title":"Histogram"},{"location":"matplotlib/matplotlib/#stackplot","text":"# Stackplot x = df['Name'][:4] y1 = df['HP'][:4] y2 = df['Attack'][:4] y3 = df['Defense'][:4] labels = [\"HP \", \"Attack\", \"Defense\"] fig, ax = plt.subplots() ax.stackplot(x, y1, y2, y3) ax.legend(loc='upper left', labels=labels) plt.xticks(rotation=90) plt.show()","title":"Stackplot"},{"location":"matplotlib/matplotlib/#2-subplot","text":"# Basic Subplot # Data for plotting x1 = df['Name'][:4] x2 = df['Name'][:4] y1 = df['HP'][:4] y2 = df['Attack'][:4] # Create two subplots sharing y axis fig, (ax1, ax2) = plt.subplots(2, sharey=True) ax1.plot(x1, y1, 'ko-') ax1.set(title='2 subplots', ylabel='HP') ax2.plot(x2, y2, 'r.-') ax2.set(xlabel='Pokemon', ylabel='Attack') plt.show()","title":"2 Subplot"},{"location":"matplotlib/matplotlib/#3-subplot","text":"# Basic Subplot # Data for plotting x1 = df['Name'][:4] x2 = df['Name'][:4] x3 = df['Name'][:4] y1 = df['HP'][:4] y2 = df['Attack'][:4] y3 = df['Defense'][:4] # Create two subplots sharing y axis fig, (ax1, ax2,ax3) = plt.subplots(3, sharey=True) ax1.plot(x1, y1, 'ko-') ax1.set(title='3 subplots', ylabel='HP') ax2.plot(x2, y2, 'r.-') ax2.set(xlabel='Pokemon', ylabel='Attack') ax3.plot(x3, y3, ':') ax3.set(xlabel='Pokemon', ylabel='Defense') plt.show()","title":"3 Subplot"},{"location":"matplotlib/matplotlib/#color-plot-bar","text":"ax = df['Type 1'].value_counts().sort_index().plot.bar(figsize = (12,6),fontsize = 14) ax.set_title(\"Pokemon Type 1 Count\", fontsize = 20) ax.set_xlabel(\"Pokemon Type 1\", fontsize = 20) ax.set_ylabel(\"Value\", fontsize = 20) plt.show()","title":"Color plot bar"},{"location":"matplotlib/matplotlib/#linear-graph","text":"plt.plot(df['HP'][:15], '-r') plt.plot(df['Attack'][:15], ':g') plt.legend() plt.show()","title":"Linear Graph"},{"location":"matplotlib/matplotlib/#multiple-figures","text":"data = df['HP'][:15] plt.title('Pokemon HP') plt.xlabel('Pokemon') plt.ylabel('HP') plt.plot(data) data2 = df['Attack'][:15] plt.title('Pokemon Attack') plt.xlabel('Pokemon') plt.ylabel('Attack') plt.figure() plt.plot(data2) plt.show() Son G\u00fcncelleme: 28 Aral\u0131k 2019 - Cumartesi","title":"Multiple figures"},{"location":"numpy/numpy/","text":"NumPy NumPy , bilimsel hesaplama i\u00e7in temel bir pakettir. A\u015fa\u011f\u0131dakileri i\u00e7eren bir Python dil uygulamas\u0131d\u0131r: G\u00fc\u00e7l\u00fc N boyutlu dizi yap\u0131s\u0131 Geli\u015fmi\u015f fonksiyonlar C/C++ ve Fortran koduna entegre edilebilen ara\u00e7lar Lineer cebir, Fourier d\u00f6n\u00fc\u015f\u00fcm\u00fc ve rastgele say\u0131 \u00f6zellikleri Bilimsel hesaplama i\u00e7in kullan\u0131lmaya ek olarak, NumPy'da genel veriler i\u00e7in verimli \u00e7ok boyutlu bir ara\u00e7 olarak kullan\u0131labilir. Her t\u00fcr veriyle \u00e7al\u0131\u015fabilece\u011fi i\u00e7in, NumPy sorunsuz ve verimli bir \u015fekilde birden fazla veri taban\u0131 t\u00fcr\u00fcne entegre edilebilir. K\u00fct\u00fcphaneyi Tan\u0131mlama import numpy as np # lineer cebir import pandas as pd # veri i\u015fleme Temel \u00d6zellikler ve Dizi Olu\u015fturma Burada 1 boyutlu bir dizi ve uzunlu\u011fu ise 3 olan bir dizi mevcuttur. [1,2,3] [1, 2, 3] A\u015fa\u011f\u0131da ise 2 boyutlu bir dizi ve uzunlu\u011fu ise 3 olan bir dizi mevcuttur. [[ 1, 2, 3],[ 4, 5, 6]] [[1, 2, 3], [4, 5, 6]] NumPy dizi fonksiyonu ile iki adet farkl\u0131 boyutlarda diziler olu\u015ftural\u0131m. a = np.array([1, 2, 3]) b = np.array([(1,2,3), (4,5,6)]) print(\"a: \",a) print(\"b: \",b) a: [1 2 3] b: [[1 2 3] [4 5 6]] K\u00f6\u015feli parantezlerin burada gerekli oldu\u011funu unutmay\u0131n. Ve a\u015fa\u011f\u0131daki yaz\u0131 bi\u00e7imi yanl\u0131\u015ft\u0131r: # a = np.array(1,2,3,4) # YANLI\u015e!!! NumPy'nin dizi s\u0131n\u0131f\u0131n\u0131n takma ad\u0131 numpy.array olan ndarray , Python standart kitapl\u0131\u011f\u0131ndaki array.array \u00f6\u011fesinden farkl\u0131d\u0131r. ndarray '\u0131n \u00f6zellikleri a\u015fa\u011f\u0131daki gibidir: ndarray.ndim: dizinin ka\u00e7 boyutlu oldu\u011funu g\u00f6sterir. ndarray.shape: Uzunlu\u011fu, dizinin \uff08ndim\uff09 boyutuna g\u00f6re belirlenen bir say\u0131 dizisidir. \u00d6rne\u011fin, uzunlu\u011fu n olan tek boyutlu bir dizinin \u015fekli n'dir ve n sat\u0131rl\u0131 ve m s\u00fctunlu bir dizinin \u015fekli n, m'dir. ndarray.size: dizideki t\u00fcm \u00f6\u011felerin say\u0131s\u0131. ndarray.dtype: dizideki eleman\u0131n veri tipi, \u00f6rne\u011fin numpy.int32, numpy.int16 veya numpy.float64. ndarray.itemsize: dizideki her \u00f6\u011fenin bayt cinsinden boyutu. A\u015fa\u011f\u0131da bulunan kod \u00f6rne\u011finiz inceleyelim. a = np.array([1, 2, 3]) b = np.array([(1,2,3), (4,5,6)]) print('a=') print(a) print(\"a's ndim {}\".format(a.ndim)) print(\"a's shape {}\".format(a.shape)) print(\"a's size {}\".format(a.size)) print(\"a's dtype {}\".format(a.dtype)) print(\"a's itemsize {}\".format(a.itemsize)) print('') print('b=') print(b) print(\"b's ndim {}\".format(b.ndim)) print(\"b's shape {}\".format(b.shape)) print(\"b's size {}\".format(b.size)) print(\"b's dtype {}\".format(b.dtype)) print(\"b's itemsize {}\".format(b.itemsize)) a= [1 2 3] a's ndim 1 a's shape (3,) a's size 3 a's dtype int64 a's itemsize 8 b= [[1 2 3] [4 5 6]] b's ndim 2 b's shape (2, 3) b's size 6 b's dtype int64 b's itemsize 8 Diziyi olu\u015ftururken eleman\u0131n veri tipini de belirtebiliriz, \u00f6rne\u011fin: c = np.array( [ [1,2], [3,4] ], dtype=complex ) c array([[1.+0.j, 2.+0.j], [3.+0.j, 4.+0.j]]) Belirli Bir Dizi Olu\u015fturma M\u00fchendislikte, genellikle belirli veri t\u00fcrlerine ihtiya\u00e7 duyar\u0131z ve NumPy bize bunlar\u0131 sa\u011flar: zeros: elemanlar\u0131 0 olan bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r ones: elemanlar\u0131 1 olan bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r empty: bo\u015f bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. arange: kapsam ve rakam aral\u0131\u011f\u0131 belirleyerek bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. linespace: aral\u0131\u011f\u0131 ve \u00f6\u011fe say\u0131s\u0131n\u0131 belirterek bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. random: rastgele say\u0131lar \u00fcretmek i\u00e7in kullan\u0131l\u0131r a = np.zeros((2,3)) print('np.zeros((2,3)= \\n{}\\n'.format(a)) b = np.ones((2,3)) print('np.ones((2,3))= \\n{}\\n'.format(b)) c = np.empty((2,3)) print('np.empty((2,3))= \\n{}\\n'.format(c)) d = np.arange(1, 2, 0.3) print('np.arange(1, 2, 0.3)= \\n{}\\n'.format(d)) e = np.linspace(1, 2, 7) print('np.linspace(1, 2, 7)= \\n{}\\n'.format(e)) f = np.random.random((2,3)) print('np.random.random((2,3))= \\n{}\\n'.format(f)) np.zeros((2,3)= [[0. 0. 0.] [0. 0. 0.]] np.ones((2,3))= [[1. 1. 1.] [1. 1. 1.]] np.empty((2,3))= [[1. 1. 1.] [1. 1. 1.]] np.arange(1, 2, 0.3)= [1. 1.3 1.6 1.9] np.linspace(1, 2, 7)= [1. 1.16666667 1.33333333 1.5 1.66666667 1.83333333 2. ] np.random.random((2,3))= [[0.13767128 0.90433798 0.39300773] [0.89677942 0.56711353 0.52187677]] Boyut ve Fonksiyonlar Bir dizi olu\u015fturmaya ek olarak, baz\u0131 verileri tuttuktan sonra, mevcut diziyi temel alan baz\u0131 yeni veri yap\u0131lar\u0131 olu\u015fturmam\u0131z gerekebilir. Bu durumda, a\u015fa\u011f\u0131daki i\u015flevleri kullanabiliriz: reshape: varolan diziye ve belirtilen \u015fekle dayal\u0131 yeni bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. vstack: birden \u00e7ok diziyi dikey y\u00f6nde konumland\u0131rmak i\u00e7in kullan\u0131l\u0131r (dizinin boyutlar\u0131 ayn\u0131 olmal\u0131d\u0131r). hstack: Birden \u00e7ok diziyi yatay y\u00f6nde konumland\u0131rmak i\u00e7in kullan\u0131l\u0131r (dizinin boyutlar\u0131 ayn\u0131 olmal\u0131d\u0131r). hsplit: diziyi yatay olarak b\u00f6lmek i\u00e7in kullan\u0131l\u0131r. vsplit: diziyi dikey olarak b\u00f6lmek i\u00e7in kullan\u0131l\u0131r. We'll use some examples to illustrate. Test ama\u00e7l\u0131 birka\u00e7 veri olu\u015ftural\u0131m. zero_line: \u00fc\u00e7 tane s\u0131f\u0131r i\u00e7eren ve bir sat\u0131r\u0131 bulunan bir dizi one_column: \u00fc\u00e7 tane bir i\u00e7eren ve bir s\u00fctunu bulunan bir dizi a: iki sat\u0131r ve \u00fc\u00e7 s\u00fctun i\u00e7eren bir matris. b: [11,20] aral\u0131\u011f\u0131nda bir tamsay\u0131 dizisi. zero_line = np.zeros((1,3)) one_column = np.ones((3,1)) print(\"zero_line = \\n{}\\n\".format(zero_line)) print(\"one_column = \\n{}\\n\".format(one_column)) a = np.array([(1,2,3), (4,5,6)]) b = np.arange(11, 20) print(\"a = \\n{}\\n\".format(a)) print(\"b = \\n{}\\n\".format(b)) zero_line = [[0. 0. 0.]] one_column = [[1.] [1.] [1.]] a = [[1 2 3] [4 5 6]] b = [11 12 13 14 15 16 17 18 19] B dizisi ba\u015flang\u0131\u00e7ta tek boyutlu bir dizidir ve yeniden \u015fekillendirme y\u00f6ntemiyle 3 sat\u0131rl\u0131k ve 3 s\u00fctunluk bir matris haline d\u00f6n\u00fc\u015ft\u00fcrd\u00fck. b = b.reshape(3, -1) print(\"b.reshape(3, -1) = \\n{}\\n\".format(b)) b.reshape(3, -1) = [[11 12 13] [14 15 16] [17 18 19]] Buradaki ikinci parametre -1 olarak ayarlan\u0131r, bu da ger\u00e7ek ko\u015fullara g\u00f6re otomatik olarak belirlenece\u011fi anlam\u0131na gelir. Dizi aslen 9 element i\u00e7erdi\u011finden, yeniden boyutland\u0131r\u0131ld\u0131ktan sonraki matris 3X3't\u00fcr. Kod \u00e7\u0131k\u0131\u015f\u0131 a\u015fa\u011f\u0131daki gibidir: b.reshape(3, -1) array([[11, 12, 13], [14, 15, 16], [17, 18, 19]]) Ard\u0131ndan, \u00fc\u00e7 diziyi vstack i\u015flevi arac\u0131l\u0131\u011f\u0131yla dikey olarak tutaca\u011f\u0131z: c = np.vstack((a, b, zero_line)) print(\"c = np.vstack((a,b, zero_line)) = \\n{}\\n\".format(c)) c = np.vstack((a,b, zero_line)) = [[ 1. 2. 3.] [ 4. 5. 6.] [11. 12. 13.] [14. 15. 16.] [17. 18. 19.] [ 0. 0. 0.]] Benzer \u015fekilde, hstack'\u0131 yatay i\u015flemi i\u00e7in de kullanabiliriz. Bu sefer ilk \u00f6nce dizinin yap\u0131s\u0131n\u0131 ayarlamam\u0131z gerekiyor: a = a.reshape(3, 2) print(\"a.reshape(3, 2) = \\n{}\\n\".format(a)) d = np.hstack((a, b, one_column)) print(\"d = np.hstack((a,b, one_column)) = \\n{}\\n\".format(d)) a.reshape(3, 2) = [[1 2] [3 4] [5 6]] d = np.hstack((a,b, one_column)) = [[ 1. 2. 11. 12. 13. 1.] [ 3. 4. 14. 15. 16. 1.] [ 5. 6. 17. 18. 19. 1.]] Sonra, ay\u0131rma i\u015flemine bir g\u00f6z atal\u0131m. \u0130lk \u00f6nce d dizisini yatay y\u00f6nde \u00fc\u00e7 diziye b\u00f6ld\u00fck. e = np.hsplit(d, 3) print(\"e = np.hsplit(d, 3) = \\n{}\\n\".format(e)) print(\"e[1] = \\n{}\\n\".format(e[1])) e = np.hsplit(d, 3) = [array([[1., 2.], [3., 4.], [5., 6.]]), array([[11., 12.], [14., 15.], [17., 18.]]), array([[13., 1.], [16., 1.], [19., 1.]])] e[1] = [[11. 12.] [14. 15.] [17. 18.]] Diziyi e\u015fit olarak b\u00f6lmek i\u00e7in say\u0131 belirlemeye ek olarak, b\u00f6l\u00fcnecek s\u00fctun say\u0131s\u0131n\u0131 da belirtebiliriz. A\u015fa\u011f\u0131daki, d dizisini ilk s\u00fctundan ve \u00fc\u00e7\u00fcnc\u00fc s\u00fctundan b\u00f6lme i\u015flemini ger\u00e7ekle\u015ftiriyoruz. f = np.hsplit(d, (1, 3)) print(\"f = np.hsplit(d, (1, 3)) = \\n{}\\n\".format(f)) f = np.hsplit(d, (1, 3)) = [array([[1.], [3.], [5.]]), array([[ 2., 11.], [ 4., 14.], [ 6., 17.]]), array([[12., 13., 1.], [15., 16., 1.], [18., 19., 1.]])] Son olarak, d dizisini dikey y\u00f6nde b\u00f6ld\u00fck. Benzer \u015fekilde, belirtilen say\u0131 dizisinin e\u015fit \u015fekilde b\u00f6l\u00fcnmesini sa\u011flayamay\u0131z \u00e7\u00fcnk\u00fc boyutlar\u0131 e\u015fit de\u011fil. g = np.vsplit(d, 3) print(\"np.hsplit(d, 2) = \\n{}\\n\".format(g)) # np.vsplit(d, 2) # ValueError: array split does not result in an equal division np.hsplit(d, 2) = [array([[ 1., 2., 11., 12., 13., 1.]]), array([[ 3., 4., 14., 15., 16., 1.]]), array([[ 5., 6., 17., 18., 19., 1.]])] \u0130ndeks NumPy dizisindeki verilere nas\u0131l eri\u015fildi\u011fine bakal\u0131m. Yine, test i\u00e7in bir boyutlu bir dizi olu\u015ftural\u0131m. \u0130\u00e7eri\u011fi [100,200) aral\u0131\u011f\u0131nda bir tamsay\u0131d\u0131r. Basit bir \u015fekilde verilere eri\u015febilmemiz i\u00e7in array_adi[indis numaras\u0131] yap\u0131s\u0131n\u0131 kullanaca\u011f\u0131z. base_data = np.arange(100, 200) print(\"base_data\\n={}\\n\".format(base_data)) print(\"base_data[10] = {}\\n\".format(base_data[10])) base_data =[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199] base_data[10] = 110 NumPy'da daha \u00f6nceden olu\u015fturdu\u011fumuz bir dizi i\u00e7in filtreleme i\u015flemini ger\u00e7ekle\u015ftirebiliriz. Burada be\u015f ve be\u015fin kat\u0131 olan say\u0131lar getirildi. every_five = np.arange(0, 100, 5) print(\"base_data[every_five] = \\n{}\\n\".format( base_data[every_five])) base_data[every_five] = [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195] a = np.array([(1,2), (10,20)]) print(\"a = \\n{}\\n\".format(a)) print(\"base_data[a] = \\n{}\\n\".format(base_data[a])) a = [[ 1 2] [10 20]] base_data[a] = [[101 102] [110 120]] Yukar\u0131da 2X2 boyutunda olan \u00e7\u0131kt\u0131y\u0131 10X10 boyutunda a\u015fa\u011f\u0131daki gibi elde ediyoruz. base_data2 = base_data.reshape(10, -1) print(\"base_data2 = np.reshape(base_data, (10, -1)) = \\n{}\\n\".format(base_data2)) base_data2 = np.reshape(base_data, (10, -1)) = [[100 101 102 103 104 105 106 107 108 109] [110 111 112 113 114 115 116 117 118 119] [120 121 122 123 124 125 126 127 128 129] [130 131 132 133 134 135 136 137 138 139] [140 141 142 143 144 145 146 147 148 149] [150 151 152 153 154 155 156 157 158 159] [160 161 162 163 164 165 166 167 168 169] [170 171 172 173 174 175 176 177 178 179] [180 181 182 183 184 185 186 187 188 189] [190 191 192 193 194 195 196 197 198 199]] \u0130ki boyutlu bir dizi i\u00e7in, E\u011fer sadece sat\u0131r belirtirsek sadece o sat\u0131rda bulunan elemanlar gelir. E\u011fer hem sat\u0131r hem de s\u00fctun belirtirsek sadece belirtilen eleman gelir. Son \u00f6\u011feye \"-1\" ile eri\u015febiliriz. print(\"base_data2[2] = \\n{}\\n\".format(base_data2[2])) print(\"base_data2[2, 3] = \\n{}\\n\".format(base_data2[2, 3])) print(\"base_data2[-1, -1] = \\n{}\\n\".format(base_data2[-1, -1])) base_data2[2] = [120 121 122 123 124 125 126 127 128 129] base_data2[2, 3] = 123 base_data2[-1, -1] = 199 Ek olarak, kapsam\u0131 \":\" ile belirtebiliriz, \u00f6rne\u011fin: 2:5. Yaln\u0131zca \":\" yazmak tam kapsam\u0131 belirtir. L\u00fctfen a\u015fa\u011f\u0131daki kodu inceleyin: ikinci sat\u0131r\u0131n t\u00fcm elemanlar\u0131n\u0131 getir. \u00fc\u00e7\u00fcnc\u00fc s\u00fctunun b\u00fct\u00fcn elemanlar\u0131n\u0131 getir. sat\u0131r numaras\u0131 iki olan ve s\u00fctun numaras\u0131 be\u015f olan ve ayn\u0131 zamanda sat\u0131r numaras\u0131 iki olan ve s\u00fctun numaras\u0131 be\u015f olan elemanlar\u0131 getir. print(\"base_data2[2, :]] = \\n{}\\n\".format(base_data2[2, :])) print(\"base_data2[:, 3]] = \\n{}\\n\".format(base_data2[:, 3])) print(\"base_data2[2:5, 2:4]] = \\n{}\\n\".format(base_data2[2:5, 2:4])) base_data2[2, :]] = [120 121 122 123 124 125 126 127 128 129] base_data2[:, 3]] = [103 113 123 133 143 153 163 173 183 193] base_data2[2:5, 2:4]] = [[122 123] [132 133] [142 143]] Matematiksel \u0130\u015flevler NumPy'de ayr\u0131ca bir\u00e7ok matematiksel i\u015flev mevcuttur. \u0130\u015fte baz\u0131 \u00f6rnekler; base_data = (np.random.random((5, 5)) - 0.5) * 100 print(\"base_data = \\n{}\\n\".format(base_data)) print(\"np.amin(base_data) = {}\".format(np.amin(base_data))) print(\"np.amax(base_data) = {}\".format(np.amax(base_data))) print(\"np.average(base_data) = {}\".format(np.average(base_data))) print(\"np.sum(base_data) = {}\".format(np.sum(base_data))) print(\"np.sin(base_data) = \\n{}\".format(np.sin(base_data))) base_data = [[-24.02118448 38.70903889 -34.35956793 31.15984863 -16.3851276 ] [ 18.00896965 40.12647579 -18.77313246 -19.6817189 49.0027422 ] [ 36.18306188 -44.80584945 -37.19340083 -34.07989665 -4.8155779 ] [ 8.98118218 0.67046207 -2.53116377 -29.06968423 7.50321075] [ -9.03445665 -19.03624479 -48.60902452 -14.77772175 -7.25167879]] np.amin(base_data) = -48.60902452032344 np.amax(base_data) = 49.00274219960913 np.average(base_data) = -5.363217545890414 np.sum(base_data) = -134.08043864726037 np.sin(base_data) = [[ 0.89638983 0.84679304 -0.19666101 -0.25328831 0.62658556] [-0.7450343 0.65503482 0.07634909 -0.73938939 -0.95292478] [-0.99850179 -0.73356466 0.48442958 -0.45966907 0.99468075] [ 0.42918999 0.6213481 -0.57321894 0.71410891 0.9391081 ] [-0.38048558 -0.18560632 0.99633329 -0.80176431 -0.82403314]] arr = np.arange(1,20) arr = arr * arr #Her eleman kendisi ile \u00e7arp\u0131lacak print(\"Multpiles: \",arr) arr = arr - arr #Her eleman kendisinden \u00e7\u0131kar\u0131lacak print(\"Substracts: \",arr) arr = np.arange(1,20) arr = arr + arr #Her eleman kendisi ile toplanacak print(\"Add: \",arr) arr = arr / arr #Her eleman kendisine b\u00f6l\u00fcnecek print(\"Divide: \",arr) arr = np.arange(1,20) arr = arr + 50 print(\"Add +50: \",arr) Multpiles: [ 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361] Substracts: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] Add: [ 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38] Divide: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] Add +50: [51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69] print(\"Sqrt: \",np.sqrt(arr)) #Her eleman\u0131n karek\u00f6k\u00fc al\u0131nacak print(\"Exp: \",np.exp(arr)) #Her eleman\u0131n \u00fcsteli al\u0131nacak print(\"Sin: \",np.sin(arr)) #Her eleman\u0131n sin de\u011feri al\u0131nacak print(\"Cos: \",np.cos(arr)) #Her eleman\u0131n kosin\u00fcs de\u011feri al\u0131nacak print(\"Log: \",np.log(arr)) #Her eleman\u0131n logaritmas\u0131 al\u0131nacak print(\"Sum: \",np.sum(arr)) #Dizideki b\u00fct\u00fcn elemanlar\u0131n toplam\u0131 print(\"Std: \",np.std(arr)) #Dizinin standart sapma de\u011feri Sqrt: [7.14142843 7.21110255 7.28010989 7.34846923 7.41619849 7.48331477 7.54983444 7.61577311 7.68114575 7.74596669 7.81024968 7.87400787 7.93725393 8. 8.06225775 8.1240384 8.18535277 8.24621125 8.30662386] Exp: [1.40934908e+22 3.83100800e+22 1.04137594e+23 2.83075330e+23 7.69478527e+23 2.09165950e+24 5.68572000e+24 1.54553894e+25 4.20121040e+25 1.14200739e+26 3.10429794e+26 8.43835667e+26 2.29378316e+27 6.23514908e+27 1.69488924e+28 4.60718663e+28 1.25236317e+29 3.40427605e+29 9.25378173e+29] Sin: [ 0.67022918 0.98662759 0.39592515 -0.55878905 -0.99975517 -0.521551 0.43616476 0.99287265 0.63673801 -0.30481062 -0.96611777 -0.7391807 0.1673557 0.92002604 0.82682868 -0.02655115 -0.85551998 -0.89792768 -0.11478481] Cos: [ 0.7421542 -0.16299078 -0.91828279 -0.82930983 0.02212676 0.85322011 0.89986683 0.11918014 -0.77108022 -0.95241298 -0.25810164 0.67350716 0.98589658 0.39185723 -0.56245385 -0.99964746 -0.5177698 0.44014302 0.99339038] Log: [3.93182563 3.95124372 3.97029191 3.98898405 4.00733319 4.02535169 4.04305127 4.06044301 4.07753744 4.09434456 4.11087386 4.12713439 4.14313473 4.15888308 4.17438727 4.18965474 4.20469262 4.21950771 4.2341065 ] Sum: 1140 Std: 5.477225575051661 Matris \u015eimdi, NumPy'nin matris \u015feklinde nas\u0131l kullan\u0131laca\u011f\u0131na bakal\u0131m. \u0130lk \u00f6nce 5X5 boyutunda rastgele bir tamsay\u0131 matrisi olu\u015ftural\u0131m. Bir matrisin transpoze elde edilmesinin iki yolu vard\u0131r: .T veya transpose fonksiyonu. Ek olarak, matris nokta i\u015flevi ile \u00e7arp\u0131labilir. \u00d6rnek kod a\u015fa\u011f\u0131daki gibidir: base_data = np.floor((np.random.random((5, 5)) - 0.5) * 100) print(\"base_data = \\n{}\\n\".format(base_data)) print(\"base_data.T = \\n{}\\n\".format(base_data.T)) print(\"base_data.transpose() = \\n{}\\n\".format(base_data.transpose())) matrix_one = np.ones((5, 5)) print(\"matrix_one = \\n{}\\n\".format(matrix_one)) minus_one = np.dot(matrix_one, -1) print(\"minus_one = \\n{}\\n\".format(minus_one)) print(\"np.dot(base_data, minus_one) = \\n{}\\n\".format( np.dot(base_data, minus_one))) base_data = [[ -6. 33. -15. 22. 36.] [-35. -22. -45. -5. -48.] [-35. 9. 42. 43. -26.] [ 46. 30. 41. -22. -18.] [ 20. 17. -15. 18. -34.]] base_data.T = [[ -6. -35. -35. 46. 20.] [ 33. -22. 9. 30. 17.] [-15. -45. 42. 41. -15.] [ 22. -5. 43. -22. 18.] [ 36. -48. -26. -18. -34.]] base_data.transpose() = [[ -6. -35. -35. 46. 20.] [ 33. -22. 9. 30. 17.] [-15. -45. 42. 41. -15.] [ 22. -5. 43. -22. 18.] [ 36. -48. -26. -18. -34.]] matrix_one = [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] minus_one = [[-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.]] np.dot(base_data, minus_one) = [[-70. -70. -70. -70. -70.] [155. 155. 155. 155. 155.] [-33. -33. -33. -33. -33.] [-77. -77. -77. -77. -77.] [ -6. -6. -6. -6. -6.]] Rastgele Say\u0131 \u00dcretmek Numpy.random paketi rastgele say\u0131lar i\u00e7in bir tak\u0131m algoritmalar i\u00e7erir. Burada en yayg\u0131n d\u00f6rt kullan\u0131m listelenmi\u015ftir: Bu d\u00f6rt kullan\u0131m \u015fu \u015fekildedir; Her biri [0.0, 1.0) aras\u0131nda olan 20 rasgele say\u0131 \u00fcretmek i\u00e7in. Belirtilen \u015fekle ba\u011fl\u0131 olarak rasgele bir say\u0131 olu\u015fturmak i\u00e7in. Belirtilen aral\u0131ktaki belirli bir say\u0131y\u0131 adedi kadar say\u0131 \u00fcretebilmek i\u00e7in. Var olan verilerin s\u0131ras\u0131n\u0131 bozmak i\u00e7in. print(\"random: {}\\n\".format(np.random.random(20))); print(\"rand: {}\\n\".format(np.random.rand(3, 4))); print(\"randint: {}\\n\".format(np.random.randint(0, 100, 20))); print(\"permutation: {}\\n\".format(np.random.permutation(np.arange(20)))); random: [0.97591459 0.70963244 0.71274272 0.9052036 0.8276741 0.90969397 0.81121699 0.41986093 0.94351019 0.98516341 0.50522794 0.30265514 0.87921027 0.41402905 0.27851685 0.07824987 0.20212265 0.71857348 0.85119351 0.51447833] rand: [[0.56123578 0.45788863 0.51853179 0.91962668] [0.60568674 0.8469316 0.94220325 0.80376898] [0.80604184 0.40306272 0.72154831 0.53511804]] randint: [39 68 74 55 48 9 46 71 48 56 7 6 78 63 41 15 67 85 16 51] permutation: [ 8 0 3 14 15 17 1 9 12 13 11 16 10 7 19 2 4 18 6 5] Son G\u00fcncelleme: 28 Aral\u0131k 2019 - Cumartesi","title":"NumPy"},{"location":"numpy/numpy/#numpy","text":"NumPy , bilimsel hesaplama i\u00e7in temel bir pakettir. A\u015fa\u011f\u0131dakileri i\u00e7eren bir Python dil uygulamas\u0131d\u0131r: G\u00fc\u00e7l\u00fc N boyutlu dizi yap\u0131s\u0131 Geli\u015fmi\u015f fonksiyonlar C/C++ ve Fortran koduna entegre edilebilen ara\u00e7lar Lineer cebir, Fourier d\u00f6n\u00fc\u015f\u00fcm\u00fc ve rastgele say\u0131 \u00f6zellikleri Bilimsel hesaplama i\u00e7in kullan\u0131lmaya ek olarak, NumPy'da genel veriler i\u00e7in verimli \u00e7ok boyutlu bir ara\u00e7 olarak kullan\u0131labilir. Her t\u00fcr veriyle \u00e7al\u0131\u015fabilece\u011fi i\u00e7in, NumPy sorunsuz ve verimli bir \u015fekilde birden fazla veri taban\u0131 t\u00fcr\u00fcne entegre edilebilir.","title":"NumPy"},{"location":"numpy/numpy/#kutuphaneyi-tanmlama","text":"import numpy as np # lineer cebir import pandas as pd # veri i\u015fleme","title":"K\u00fct\u00fcphaneyi Tan\u0131mlama"},{"location":"numpy/numpy/#temel-ozellikler-ve-dizi-olusturma","text":"Burada 1 boyutlu bir dizi ve uzunlu\u011fu ise 3 olan bir dizi mevcuttur. [1,2,3] [1, 2, 3] A\u015fa\u011f\u0131da ise 2 boyutlu bir dizi ve uzunlu\u011fu ise 3 olan bir dizi mevcuttur. [[ 1, 2, 3],[ 4, 5, 6]] [[1, 2, 3], [4, 5, 6]] NumPy dizi fonksiyonu ile iki adet farkl\u0131 boyutlarda diziler olu\u015ftural\u0131m. a = np.array([1, 2, 3]) b = np.array([(1,2,3), (4,5,6)]) print(\"a: \",a) print(\"b: \",b) a: [1 2 3] b: [[1 2 3] [4 5 6]] K\u00f6\u015feli parantezlerin burada gerekli oldu\u011funu unutmay\u0131n. Ve a\u015fa\u011f\u0131daki yaz\u0131 bi\u00e7imi yanl\u0131\u015ft\u0131r: # a = np.array(1,2,3,4) # YANLI\u015e!!! NumPy'nin dizi s\u0131n\u0131f\u0131n\u0131n takma ad\u0131 numpy.array olan ndarray , Python standart kitapl\u0131\u011f\u0131ndaki array.array \u00f6\u011fesinden farkl\u0131d\u0131r. ndarray '\u0131n \u00f6zellikleri a\u015fa\u011f\u0131daki gibidir: ndarray.ndim: dizinin ka\u00e7 boyutlu oldu\u011funu g\u00f6sterir. ndarray.shape: Uzunlu\u011fu, dizinin \uff08ndim\uff09 boyutuna g\u00f6re belirlenen bir say\u0131 dizisidir. \u00d6rne\u011fin, uzunlu\u011fu n olan tek boyutlu bir dizinin \u015fekli n'dir ve n sat\u0131rl\u0131 ve m s\u00fctunlu bir dizinin \u015fekli n, m'dir. ndarray.size: dizideki t\u00fcm \u00f6\u011felerin say\u0131s\u0131. ndarray.dtype: dizideki eleman\u0131n veri tipi, \u00f6rne\u011fin numpy.int32, numpy.int16 veya numpy.float64. ndarray.itemsize: dizideki her \u00f6\u011fenin bayt cinsinden boyutu. A\u015fa\u011f\u0131da bulunan kod \u00f6rne\u011finiz inceleyelim. a = np.array([1, 2, 3]) b = np.array([(1,2,3), (4,5,6)]) print('a=') print(a) print(\"a's ndim {}\".format(a.ndim)) print(\"a's shape {}\".format(a.shape)) print(\"a's size {}\".format(a.size)) print(\"a's dtype {}\".format(a.dtype)) print(\"a's itemsize {}\".format(a.itemsize)) print('') print('b=') print(b) print(\"b's ndim {}\".format(b.ndim)) print(\"b's shape {}\".format(b.shape)) print(\"b's size {}\".format(b.size)) print(\"b's dtype {}\".format(b.dtype)) print(\"b's itemsize {}\".format(b.itemsize)) a= [1 2 3] a's ndim 1 a's shape (3,) a's size 3 a's dtype int64 a's itemsize 8 b= [[1 2 3] [4 5 6]] b's ndim 2 b's shape (2, 3) b's size 6 b's dtype int64 b's itemsize 8 Diziyi olu\u015ftururken eleman\u0131n veri tipini de belirtebiliriz, \u00f6rne\u011fin: c = np.array( [ [1,2], [3,4] ], dtype=complex ) c array([[1.+0.j, 2.+0.j], [3.+0.j, 4.+0.j]])","title":"Temel \u00d6zellikler ve Dizi Olu\u015fturma"},{"location":"numpy/numpy/#belirli-bir-dizi-olusturma","text":"M\u00fchendislikte, genellikle belirli veri t\u00fcrlerine ihtiya\u00e7 duyar\u0131z ve NumPy bize bunlar\u0131 sa\u011flar: zeros: elemanlar\u0131 0 olan bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r ones: elemanlar\u0131 1 olan bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r empty: bo\u015f bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. arange: kapsam ve rakam aral\u0131\u011f\u0131 belirleyerek bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. linespace: aral\u0131\u011f\u0131 ve \u00f6\u011fe say\u0131s\u0131n\u0131 belirterek bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. random: rastgele say\u0131lar \u00fcretmek i\u00e7in kullan\u0131l\u0131r a = np.zeros((2,3)) print('np.zeros((2,3)= \\n{}\\n'.format(a)) b = np.ones((2,3)) print('np.ones((2,3))= \\n{}\\n'.format(b)) c = np.empty((2,3)) print('np.empty((2,3))= \\n{}\\n'.format(c)) d = np.arange(1, 2, 0.3) print('np.arange(1, 2, 0.3)= \\n{}\\n'.format(d)) e = np.linspace(1, 2, 7) print('np.linspace(1, 2, 7)= \\n{}\\n'.format(e)) f = np.random.random((2,3)) print('np.random.random((2,3))= \\n{}\\n'.format(f)) np.zeros((2,3)= [[0. 0. 0.] [0. 0. 0.]] np.ones((2,3))= [[1. 1. 1.] [1. 1. 1.]] np.empty((2,3))= [[1. 1. 1.] [1. 1. 1.]] np.arange(1, 2, 0.3)= [1. 1.3 1.6 1.9] np.linspace(1, 2, 7)= [1. 1.16666667 1.33333333 1.5 1.66666667 1.83333333 2. ] np.random.random((2,3))= [[0.13767128 0.90433798 0.39300773] [0.89677942 0.56711353 0.52187677]]","title":"Belirli Bir Dizi Olu\u015fturma"},{"location":"numpy/numpy/#boyut-ve-fonksiyonlar","text":"Bir dizi olu\u015fturmaya ek olarak, baz\u0131 verileri tuttuktan sonra, mevcut diziyi temel alan baz\u0131 yeni veri yap\u0131lar\u0131 olu\u015fturmam\u0131z gerekebilir. Bu durumda, a\u015fa\u011f\u0131daki i\u015flevleri kullanabiliriz: reshape: varolan diziye ve belirtilen \u015fekle dayal\u0131 yeni bir dizi olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. vstack: birden \u00e7ok diziyi dikey y\u00f6nde konumland\u0131rmak i\u00e7in kullan\u0131l\u0131r (dizinin boyutlar\u0131 ayn\u0131 olmal\u0131d\u0131r). hstack: Birden \u00e7ok diziyi yatay y\u00f6nde konumland\u0131rmak i\u00e7in kullan\u0131l\u0131r (dizinin boyutlar\u0131 ayn\u0131 olmal\u0131d\u0131r). hsplit: diziyi yatay olarak b\u00f6lmek i\u00e7in kullan\u0131l\u0131r. vsplit: diziyi dikey olarak b\u00f6lmek i\u00e7in kullan\u0131l\u0131r. We'll use some examples to illustrate. Test ama\u00e7l\u0131 birka\u00e7 veri olu\u015ftural\u0131m. zero_line: \u00fc\u00e7 tane s\u0131f\u0131r i\u00e7eren ve bir sat\u0131r\u0131 bulunan bir dizi one_column: \u00fc\u00e7 tane bir i\u00e7eren ve bir s\u00fctunu bulunan bir dizi a: iki sat\u0131r ve \u00fc\u00e7 s\u00fctun i\u00e7eren bir matris. b: [11,20] aral\u0131\u011f\u0131nda bir tamsay\u0131 dizisi. zero_line = np.zeros((1,3)) one_column = np.ones((3,1)) print(\"zero_line = \\n{}\\n\".format(zero_line)) print(\"one_column = \\n{}\\n\".format(one_column)) a = np.array([(1,2,3), (4,5,6)]) b = np.arange(11, 20) print(\"a = \\n{}\\n\".format(a)) print(\"b = \\n{}\\n\".format(b)) zero_line = [[0. 0. 0.]] one_column = [[1.] [1.] [1.]] a = [[1 2 3] [4 5 6]] b = [11 12 13 14 15 16 17 18 19] B dizisi ba\u015flang\u0131\u00e7ta tek boyutlu bir dizidir ve yeniden \u015fekillendirme y\u00f6ntemiyle 3 sat\u0131rl\u0131k ve 3 s\u00fctunluk bir matris haline d\u00f6n\u00fc\u015ft\u00fcrd\u00fck. b = b.reshape(3, -1) print(\"b.reshape(3, -1) = \\n{}\\n\".format(b)) b.reshape(3, -1) = [[11 12 13] [14 15 16] [17 18 19]] Buradaki ikinci parametre -1 olarak ayarlan\u0131r, bu da ger\u00e7ek ko\u015fullara g\u00f6re otomatik olarak belirlenece\u011fi anlam\u0131na gelir. Dizi aslen 9 element i\u00e7erdi\u011finden, yeniden boyutland\u0131r\u0131ld\u0131ktan sonraki matris 3X3't\u00fcr. Kod \u00e7\u0131k\u0131\u015f\u0131 a\u015fa\u011f\u0131daki gibidir: b.reshape(3, -1) array([[11, 12, 13], [14, 15, 16], [17, 18, 19]]) Ard\u0131ndan, \u00fc\u00e7 diziyi vstack i\u015flevi arac\u0131l\u0131\u011f\u0131yla dikey olarak tutaca\u011f\u0131z: c = np.vstack((a, b, zero_line)) print(\"c = np.vstack((a,b, zero_line)) = \\n{}\\n\".format(c)) c = np.vstack((a,b, zero_line)) = [[ 1. 2. 3.] [ 4. 5. 6.] [11. 12. 13.] [14. 15. 16.] [17. 18. 19.] [ 0. 0. 0.]] Benzer \u015fekilde, hstack'\u0131 yatay i\u015flemi i\u00e7in de kullanabiliriz. Bu sefer ilk \u00f6nce dizinin yap\u0131s\u0131n\u0131 ayarlamam\u0131z gerekiyor: a = a.reshape(3, 2) print(\"a.reshape(3, 2) = \\n{}\\n\".format(a)) d = np.hstack((a, b, one_column)) print(\"d = np.hstack((a,b, one_column)) = \\n{}\\n\".format(d)) a.reshape(3, 2) = [[1 2] [3 4] [5 6]] d = np.hstack((a,b, one_column)) = [[ 1. 2. 11. 12. 13. 1.] [ 3. 4. 14. 15. 16. 1.] [ 5. 6. 17. 18. 19. 1.]] Sonra, ay\u0131rma i\u015flemine bir g\u00f6z atal\u0131m. \u0130lk \u00f6nce d dizisini yatay y\u00f6nde \u00fc\u00e7 diziye b\u00f6ld\u00fck. e = np.hsplit(d, 3) print(\"e = np.hsplit(d, 3) = \\n{}\\n\".format(e)) print(\"e[1] = \\n{}\\n\".format(e[1])) e = np.hsplit(d, 3) = [array([[1., 2.], [3., 4.], [5., 6.]]), array([[11., 12.], [14., 15.], [17., 18.]]), array([[13., 1.], [16., 1.], [19., 1.]])] e[1] = [[11. 12.] [14. 15.] [17. 18.]] Diziyi e\u015fit olarak b\u00f6lmek i\u00e7in say\u0131 belirlemeye ek olarak, b\u00f6l\u00fcnecek s\u00fctun say\u0131s\u0131n\u0131 da belirtebiliriz. A\u015fa\u011f\u0131daki, d dizisini ilk s\u00fctundan ve \u00fc\u00e7\u00fcnc\u00fc s\u00fctundan b\u00f6lme i\u015flemini ger\u00e7ekle\u015ftiriyoruz. f = np.hsplit(d, (1, 3)) print(\"f = np.hsplit(d, (1, 3)) = \\n{}\\n\".format(f)) f = np.hsplit(d, (1, 3)) = [array([[1.], [3.], [5.]]), array([[ 2., 11.], [ 4., 14.], [ 6., 17.]]), array([[12., 13., 1.], [15., 16., 1.], [18., 19., 1.]])] Son olarak, d dizisini dikey y\u00f6nde b\u00f6ld\u00fck. Benzer \u015fekilde, belirtilen say\u0131 dizisinin e\u015fit \u015fekilde b\u00f6l\u00fcnmesini sa\u011flayamay\u0131z \u00e7\u00fcnk\u00fc boyutlar\u0131 e\u015fit de\u011fil. g = np.vsplit(d, 3) print(\"np.hsplit(d, 2) = \\n{}\\n\".format(g)) # np.vsplit(d, 2) # ValueError: array split does not result in an equal division np.hsplit(d, 2) = [array([[ 1., 2., 11., 12., 13., 1.]]), array([[ 3., 4., 14., 15., 16., 1.]]), array([[ 5., 6., 17., 18., 19., 1.]])]","title":"Boyut ve Fonksiyonlar"},{"location":"numpy/numpy/#indeks","text":"NumPy dizisindeki verilere nas\u0131l eri\u015fildi\u011fine bakal\u0131m. Yine, test i\u00e7in bir boyutlu bir dizi olu\u015ftural\u0131m. \u0130\u00e7eri\u011fi [100,200) aral\u0131\u011f\u0131nda bir tamsay\u0131d\u0131r. Basit bir \u015fekilde verilere eri\u015febilmemiz i\u00e7in array_adi[indis numaras\u0131] yap\u0131s\u0131n\u0131 kullanaca\u011f\u0131z. base_data = np.arange(100, 200) print(\"base_data\\n={}\\n\".format(base_data)) print(\"base_data[10] = {}\\n\".format(base_data[10])) base_data =[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199] base_data[10] = 110 NumPy'da daha \u00f6nceden olu\u015fturdu\u011fumuz bir dizi i\u00e7in filtreleme i\u015flemini ger\u00e7ekle\u015ftirebiliriz. Burada be\u015f ve be\u015fin kat\u0131 olan say\u0131lar getirildi. every_five = np.arange(0, 100, 5) print(\"base_data[every_five] = \\n{}\\n\".format( base_data[every_five])) base_data[every_five] = [100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195] a = np.array([(1,2), (10,20)]) print(\"a = \\n{}\\n\".format(a)) print(\"base_data[a] = \\n{}\\n\".format(base_data[a])) a = [[ 1 2] [10 20]] base_data[a] = [[101 102] [110 120]] Yukar\u0131da 2X2 boyutunda olan \u00e7\u0131kt\u0131y\u0131 10X10 boyutunda a\u015fa\u011f\u0131daki gibi elde ediyoruz. base_data2 = base_data.reshape(10, -1) print(\"base_data2 = np.reshape(base_data, (10, -1)) = \\n{}\\n\".format(base_data2)) base_data2 = np.reshape(base_data, (10, -1)) = [[100 101 102 103 104 105 106 107 108 109] [110 111 112 113 114 115 116 117 118 119] [120 121 122 123 124 125 126 127 128 129] [130 131 132 133 134 135 136 137 138 139] [140 141 142 143 144 145 146 147 148 149] [150 151 152 153 154 155 156 157 158 159] [160 161 162 163 164 165 166 167 168 169] [170 171 172 173 174 175 176 177 178 179] [180 181 182 183 184 185 186 187 188 189] [190 191 192 193 194 195 196 197 198 199]] \u0130ki boyutlu bir dizi i\u00e7in, E\u011fer sadece sat\u0131r belirtirsek sadece o sat\u0131rda bulunan elemanlar gelir. E\u011fer hem sat\u0131r hem de s\u00fctun belirtirsek sadece belirtilen eleman gelir. Son \u00f6\u011feye \"-1\" ile eri\u015febiliriz. print(\"base_data2[2] = \\n{}\\n\".format(base_data2[2])) print(\"base_data2[2, 3] = \\n{}\\n\".format(base_data2[2, 3])) print(\"base_data2[-1, -1] = \\n{}\\n\".format(base_data2[-1, -1])) base_data2[2] = [120 121 122 123 124 125 126 127 128 129] base_data2[2, 3] = 123 base_data2[-1, -1] = 199 Ek olarak, kapsam\u0131 \":\" ile belirtebiliriz, \u00f6rne\u011fin: 2:5. Yaln\u0131zca \":\" yazmak tam kapsam\u0131 belirtir. L\u00fctfen a\u015fa\u011f\u0131daki kodu inceleyin: ikinci sat\u0131r\u0131n t\u00fcm elemanlar\u0131n\u0131 getir. \u00fc\u00e7\u00fcnc\u00fc s\u00fctunun b\u00fct\u00fcn elemanlar\u0131n\u0131 getir. sat\u0131r numaras\u0131 iki olan ve s\u00fctun numaras\u0131 be\u015f olan ve ayn\u0131 zamanda sat\u0131r numaras\u0131 iki olan ve s\u00fctun numaras\u0131 be\u015f olan elemanlar\u0131 getir. print(\"base_data2[2, :]] = \\n{}\\n\".format(base_data2[2, :])) print(\"base_data2[:, 3]] = \\n{}\\n\".format(base_data2[:, 3])) print(\"base_data2[2:5, 2:4]] = \\n{}\\n\".format(base_data2[2:5, 2:4])) base_data2[2, :]] = [120 121 122 123 124 125 126 127 128 129] base_data2[:, 3]] = [103 113 123 133 143 153 163 173 183 193] base_data2[2:5, 2:4]] = [[122 123] [132 133] [142 143]]","title":"\u0130ndeks"},{"location":"numpy/numpy/#matematiksel-islevler","text":"NumPy'de ayr\u0131ca bir\u00e7ok matematiksel i\u015flev mevcuttur. \u0130\u015fte baz\u0131 \u00f6rnekler; base_data = (np.random.random((5, 5)) - 0.5) * 100 print(\"base_data = \\n{}\\n\".format(base_data)) print(\"np.amin(base_data) = {}\".format(np.amin(base_data))) print(\"np.amax(base_data) = {}\".format(np.amax(base_data))) print(\"np.average(base_data) = {}\".format(np.average(base_data))) print(\"np.sum(base_data) = {}\".format(np.sum(base_data))) print(\"np.sin(base_data) = \\n{}\".format(np.sin(base_data))) base_data = [[-24.02118448 38.70903889 -34.35956793 31.15984863 -16.3851276 ] [ 18.00896965 40.12647579 -18.77313246 -19.6817189 49.0027422 ] [ 36.18306188 -44.80584945 -37.19340083 -34.07989665 -4.8155779 ] [ 8.98118218 0.67046207 -2.53116377 -29.06968423 7.50321075] [ -9.03445665 -19.03624479 -48.60902452 -14.77772175 -7.25167879]] np.amin(base_data) = -48.60902452032344 np.amax(base_data) = 49.00274219960913 np.average(base_data) = -5.363217545890414 np.sum(base_data) = -134.08043864726037 np.sin(base_data) = [[ 0.89638983 0.84679304 -0.19666101 -0.25328831 0.62658556] [-0.7450343 0.65503482 0.07634909 -0.73938939 -0.95292478] [-0.99850179 -0.73356466 0.48442958 -0.45966907 0.99468075] [ 0.42918999 0.6213481 -0.57321894 0.71410891 0.9391081 ] [-0.38048558 -0.18560632 0.99633329 -0.80176431 -0.82403314]] arr = np.arange(1,20) arr = arr * arr #Her eleman kendisi ile \u00e7arp\u0131lacak print(\"Multpiles: \",arr) arr = arr - arr #Her eleman kendisinden \u00e7\u0131kar\u0131lacak print(\"Substracts: \",arr) arr = np.arange(1,20) arr = arr + arr #Her eleman kendisi ile toplanacak print(\"Add: \",arr) arr = arr / arr #Her eleman kendisine b\u00f6l\u00fcnecek print(\"Divide: \",arr) arr = np.arange(1,20) arr = arr + 50 print(\"Add +50: \",arr) Multpiles: [ 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361] Substracts: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] Add: [ 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38] Divide: [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.] Add +50: [51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69] print(\"Sqrt: \",np.sqrt(arr)) #Her eleman\u0131n karek\u00f6k\u00fc al\u0131nacak print(\"Exp: \",np.exp(arr)) #Her eleman\u0131n \u00fcsteli al\u0131nacak print(\"Sin: \",np.sin(arr)) #Her eleman\u0131n sin de\u011feri al\u0131nacak print(\"Cos: \",np.cos(arr)) #Her eleman\u0131n kosin\u00fcs de\u011feri al\u0131nacak print(\"Log: \",np.log(arr)) #Her eleman\u0131n logaritmas\u0131 al\u0131nacak print(\"Sum: \",np.sum(arr)) #Dizideki b\u00fct\u00fcn elemanlar\u0131n toplam\u0131 print(\"Std: \",np.std(arr)) #Dizinin standart sapma de\u011feri Sqrt: [7.14142843 7.21110255 7.28010989 7.34846923 7.41619849 7.48331477 7.54983444 7.61577311 7.68114575 7.74596669 7.81024968 7.87400787 7.93725393 8. 8.06225775 8.1240384 8.18535277 8.24621125 8.30662386] Exp: [1.40934908e+22 3.83100800e+22 1.04137594e+23 2.83075330e+23 7.69478527e+23 2.09165950e+24 5.68572000e+24 1.54553894e+25 4.20121040e+25 1.14200739e+26 3.10429794e+26 8.43835667e+26 2.29378316e+27 6.23514908e+27 1.69488924e+28 4.60718663e+28 1.25236317e+29 3.40427605e+29 9.25378173e+29] Sin: [ 0.67022918 0.98662759 0.39592515 -0.55878905 -0.99975517 -0.521551 0.43616476 0.99287265 0.63673801 -0.30481062 -0.96611777 -0.7391807 0.1673557 0.92002604 0.82682868 -0.02655115 -0.85551998 -0.89792768 -0.11478481] Cos: [ 0.7421542 -0.16299078 -0.91828279 -0.82930983 0.02212676 0.85322011 0.89986683 0.11918014 -0.77108022 -0.95241298 -0.25810164 0.67350716 0.98589658 0.39185723 -0.56245385 -0.99964746 -0.5177698 0.44014302 0.99339038] Log: [3.93182563 3.95124372 3.97029191 3.98898405 4.00733319 4.02535169 4.04305127 4.06044301 4.07753744 4.09434456 4.11087386 4.12713439 4.14313473 4.15888308 4.17438727 4.18965474 4.20469262 4.21950771 4.2341065 ] Sum: 1140 Std: 5.477225575051661","title":"Matematiksel \u0130\u015flevler"},{"location":"numpy/numpy/#matris","text":"\u015eimdi, NumPy'nin matris \u015feklinde nas\u0131l kullan\u0131laca\u011f\u0131na bakal\u0131m. \u0130lk \u00f6nce 5X5 boyutunda rastgele bir tamsay\u0131 matrisi olu\u015ftural\u0131m. Bir matrisin transpoze elde edilmesinin iki yolu vard\u0131r: .T veya transpose fonksiyonu. Ek olarak, matris nokta i\u015flevi ile \u00e7arp\u0131labilir. \u00d6rnek kod a\u015fa\u011f\u0131daki gibidir: base_data = np.floor((np.random.random((5, 5)) - 0.5) * 100) print(\"base_data = \\n{}\\n\".format(base_data)) print(\"base_data.T = \\n{}\\n\".format(base_data.T)) print(\"base_data.transpose() = \\n{}\\n\".format(base_data.transpose())) matrix_one = np.ones((5, 5)) print(\"matrix_one = \\n{}\\n\".format(matrix_one)) minus_one = np.dot(matrix_one, -1) print(\"minus_one = \\n{}\\n\".format(minus_one)) print(\"np.dot(base_data, minus_one) = \\n{}\\n\".format( np.dot(base_data, minus_one))) base_data = [[ -6. 33. -15. 22. 36.] [-35. -22. -45. -5. -48.] [-35. 9. 42. 43. -26.] [ 46. 30. 41. -22. -18.] [ 20. 17. -15. 18. -34.]] base_data.T = [[ -6. -35. -35. 46. 20.] [ 33. -22. 9. 30. 17.] [-15. -45. 42. 41. -15.] [ 22. -5. 43. -22. 18.] [ 36. -48. -26. -18. -34.]] base_data.transpose() = [[ -6. -35. -35. 46. 20.] [ 33. -22. 9. 30. 17.] [-15. -45. 42. 41. -15.] [ 22. -5. 43. -22. 18.] [ 36. -48. -26. -18. -34.]] matrix_one = [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] minus_one = [[-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.] [-1. -1. -1. -1. -1.]] np.dot(base_data, minus_one) = [[-70. -70. -70. -70. -70.] [155. 155. 155. 155. 155.] [-33. -33. -33. -33. -33.] [-77. -77. -77. -77. -77.] [ -6. -6. -6. -6. -6.]]","title":"Matris"},{"location":"numpy/numpy/#rastgele-say-uretmek","text":"Numpy.random paketi rastgele say\u0131lar i\u00e7in bir tak\u0131m algoritmalar i\u00e7erir. Burada en yayg\u0131n d\u00f6rt kullan\u0131m listelenmi\u015ftir: Bu d\u00f6rt kullan\u0131m \u015fu \u015fekildedir; Her biri [0.0, 1.0) aras\u0131nda olan 20 rasgele say\u0131 \u00fcretmek i\u00e7in. Belirtilen \u015fekle ba\u011fl\u0131 olarak rasgele bir say\u0131 olu\u015fturmak i\u00e7in. Belirtilen aral\u0131ktaki belirli bir say\u0131y\u0131 adedi kadar say\u0131 \u00fcretebilmek i\u00e7in. Var olan verilerin s\u0131ras\u0131n\u0131 bozmak i\u00e7in. print(\"random: {}\\n\".format(np.random.random(20))); print(\"rand: {}\\n\".format(np.random.rand(3, 4))); print(\"randint: {}\\n\".format(np.random.randint(0, 100, 20))); print(\"permutation: {}\\n\".format(np.random.permutation(np.arange(20)))); random: [0.97591459 0.70963244 0.71274272 0.9052036 0.8276741 0.90969397 0.81121699 0.41986093 0.94351019 0.98516341 0.50522794 0.30265514 0.87921027 0.41402905 0.27851685 0.07824987 0.20212265 0.71857348 0.85119351 0.51447833] rand: [[0.56123578 0.45788863 0.51853179 0.91962668] [0.60568674 0.8469316 0.94220325 0.80376898] [0.80604184 0.40306272 0.72154831 0.53511804]] randint: [39 68 74 55 48 9 46 71 48 56 7 6 78 63 41 15 67 85 16 51] permutation: [ 8 0 3 14 15 17 1 9 12 13 11 16 10 7 19 2 4 18 6 5] Son G\u00fcncelleme: 28 Aral\u0131k 2019 - Cumartesi","title":"Rastgele Say\u0131 \u00dcretmek"},{"location":"pandas/pandas/","text":"Pandas Pandas, Python programlama dili i\u00e7in y\u00fcksek performansl\u0131, kullan\u0131m\u0131 kolay veri yap\u0131lar\u0131 ve veri analizi ara\u00e7lar\u0131 sa\u011flayan a\u00e7\u0131k kaynakl\u0131, BSD lisansl\u0131 bir k\u00fct\u00fcphanedir. Pandas, NumFOCUS taraf\u0131ndan destelenmektedir. K\u00fct\u00fcphaneyi Tan\u0131mlama import numpy as np # lineer cebir import pandas as pd # pandas k\u00fct\u00fcphanesi tan\u0131mlan\u0131yor Pandas Veri T\u00fcrleri Pandas'ta iki t\u00fcr veri yap\u0131s\u0131 vard\u0131r. Bunlar seri(series) ve veri \u00e7er\u00e7evesidir(dataframe). Seriler(Series) Seri, tek boyutlu etiketli bir dizidir. \u0130\u00e7inde her t\u00fcrl\u00fc veriyi bar\u0131nd\u0131rabilir. mySeries = pd.Series([3,-5,7,4], index=['a','b','c','d']) type(mySeries) pandas.core.series.Series Veri \u00c7er\u00e7evesi(DataFrame) Veri \u00e7er\u00e7evesi(dataframe) iki boyutlu bir veri yap\u0131s\u0131d\u0131r. S\u00fctunlar\u0131 i\u00e7erir. Bu eserde veri \u00e7ev\u00e7evesi olarak adland\u0131rmak yerine dataframe olarak kullanaca\u011f\u0131z bilginiz olsun. data = {'Country' : ['Belgium', 'India', 'Brazil' ], 'Capital': ['Brussels', 'New Delhi', 'Brassilia'], 'Population': [1234,1234,1234]} datas = pd.DataFrame(data, columns=['Country','Capital','Population']) print(type(data)) print(type(datas)) <class 'dict'> <class 'pandas.core.frame.DataFrame'> Verileri \u0130\u00e7eri Aktarma Pandas ile CSV, Excel ve SQL veritabanlar\u0131n\u0131 a\u00e7abiliriz. CSV(Comma Separated Values / Virg\u00fclle Ayr\u0131lm\u0131\u015f De\u011ferler) CSV dosyalar\u0131n\u0131 a\u00e7\u0131p okumak ve CSV dosyas\u0131n\u0131n \u00fczerine yazmak \u00e7ok kolayd\u0131r. df = pd.read_csv('../datas/DJIA_table.csv') type(df) # Python dosyan\u0131z CSV dosyan\u0131zla ayn\u0131 klas\u00f6rde de\u011filse, bunu a\u015fa\u011f\u0131daki gibi yapmal\u0131s\u0131n\u0131z. # df = pd.read_csv('/home/desktop/Iris.csv') pandas.core.frame.DataFrame Excel Excel dosyalar\u0131yla \u00e7al\u0131\u015fmak istedi\u011fimizde, a\u015fa\u011f\u0131daki kodu yazmam\u0131z gerekir. # pd.read_excel('dosyaadi') # pd.to_excel('dir/dataFrame.xlsx', sheet_name='Sheet1') Di\u011fer dosya t\u00fcrleri (json, SQL, table, html) # pd.read_sql(query,connection_object) -> Bir SQL tablosundan/veritaban\u0131ndan verileri okur. # pd.read_table(filename) -> S\u0131n\u0131rland\u0131r\u0131lm\u0131\u015f bir metin dosyas\u0131ndan (TSV gibi) okur. # pd.read_json(json_string) -> Bir json formatl\u0131 dize, URL veya dosyadan okur. # pd.read_html(url) -> Bir html URL'sini, dizgiyi veya dosyay\u0131 ayr\u0131\u015ft\u0131r\u0131r ve tablolar\u0131 dataframe listesine \u00e7\u0131kar\u0131r. # pd.read_clipboard() -> Panonuzun i\u00e7eri\u011fini al\u0131r ve onu read_table () \u00f6\u011fesine iletir. # pd.DataFrame(dict) -> Bir s\u00f6zl\u00fckten, s\u00fctun adlar\u0131na ili\u015fkin verileri, listeler halinde okur. Veriyi D\u0131\u015far\u0131 Aktarma # df.to_csv(filename) -> CSV dosyas\u0131 halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_excel(filename) -> Excel dosyas\u0131 halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_sql(table_name, connection_object) -> SQL tablosu halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_json(filename) -> JSON halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_html(filename) -> HTML tablosu halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_clipboard() -> Clipboard halinde d\u0131\u015far\u0131 aktar\u0131r. Test Verilerini Olu\u015fturmak pd.DataFrame(np.random.rand(20,5)) # 5 s\u00fctun ve 20 sat\u0131r\u0131 bulunan rastgele kayan noktal\u0131(float) say\u0131lardan olu\u015fan bir dataframe olu\u015fturur. .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 0 0.881674 0.656281 0.530675 0.701284 0.745154 1 0.967789 0.361502 0.516868 0.363684 0.692905 2 0.020186 0.246136 0.276501 0.156050 0.610562 3 0.978084 0.771438 0.357285 0.216900 0.605728 4 0.470992 0.136826 0.025263 0.513115 0.355362 5 0.037611 0.968741 0.148456 0.219907 0.811352 6 0.405742 0.105569 0.316834 0.546320 0.783297 7 0.388317 0.875504 0.483557 0.115927 0.220484 8 0.181219 0.213682 0.188712 0.017624 0.993905 9 0.454112 0.676238 0.465122 0.823352 0.728502 10 0.614288 0.148511 0.097686 0.474665 0.277006 11 0.603164 0.677704 0.480384 0.990380 0.094366 12 0.226657 0.818445 0.226504 0.872379 0.142988 13 0.200353 0.040381 0.791361 0.142564 0.729426 14 0.347076 0.187979 0.129819 0.004997 0.918674 15 0.905068 0.607013 0.319787 0.798406 0.493602 16 0.373228 0.960043 0.783589 0.084993 0.740864 17 0.407283 0.617893 0.734941 0.895326 0.096390 18 0.797779 0.611200 0.668267 0.349107 0.754915 19 0.029135 0.871738 0.030545 0.048413 0.582861 Veriyi \u00d6zetleme Pandas ile veriler hakk\u0131nda bilgi almak kolayd\u0131r. Pandas i\u00e7erisinde bulunan fonksiyonlar\u0131 tek tek inceleyelim. df.info() Bu Kod verilerimiz hakk\u0131nda detayl\u0131 bilgi sunar. RangeIndex: Ka\u00e7 tane veri oldu\u011funu belirtir. Data Columns: Ka\u00e7 tane s\u00fctun bulundu\u011funu belirtir. Columns: S\u00fctunlar hakk\u0131nda bilgi verir. dtypes: Ne t\u00fcr verilerimizin oldu\u011funu ve bu verilerden ka\u00e7 tane bulundu\u011funu belirtir. Memory Usage: Haf\u0131za kullan\u0131m\u0131n\u0131n ne kadar oldu\u011funu g\u00f6sterir. df.info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 1989 entries, 0 to 1988 Data columns (total 7 columns): Date 1989 non-null object Open 1989 non-null float64 High 1989 non-null float64 Low 1989 non-null float64 Close 1989 non-null float64 Volume 1989 non-null int64 Adj Close 1989 non-null float64 dtypes: float64(5), int64(1), object(1) memory usage: 108.9+ KB df.shape() Bu kod bize sat\u0131r ve s\u00fctun say\u0131s\u0131n\u0131 g\u00f6sterir. df.shape (1989, 7) df.index Bu kod bulunan toplam indeks say\u0131s\u0131n\u0131 g\u00f6sterir. df.index RangeIndex(start=0, stop=1989, step=1) df.columns Bu kod, inceledi\u011fimiz verilerdeki t\u00fcm s\u00fctunlar\u0131 g\u00f6sterir. df.columns Index(['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close'], dtype='object') df.count() Bu kod bize her s\u00fctunda ka\u00e7 tane veri oldu\u011funu g\u00f6sterir. df.count() Date 1989 Open 1989 High 1989 Low 1989 Close 1989 Volume 1989 Adj Close 1989 dtype: int64 df.sum() Bu kod bize her s\u00fctundaki verinin toplam\u0131n\u0131 g\u00f6sterir. df.sum() Date 2016-07-012016-06-302016-06-292016-06-282016-0... Open 2.67702e+07 High 2.69337e+07 Low 2.65988e+07 Close 2.6778e+07 Volume 323831020000 Adj Close 2.6778e+07 dtype: object df.cumsum() Bu kod bize verilerin k\u00fcm\u00fclatif toplam\u0131n\u0131 verir. df.cumsum().head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.2 18002.4 17916.9 17949.4 82160000 17949.4 1 2016-07-012016-06-30 35637 35933 35628.7 35879.4 215190000 35879.4 2 2016-07-012016-06-302016-06-29 53093 53637.5 53084.7 53574 321570000 53574 3 2016-07-012016-06-302016-06-292016-06-28 70283.5 71047.2 70275.2 70983.8 433760000 70983.8 4 2016-07-012016-06-302016-06-292016-06-282016-0... 87638.7 88402.4 87338.3 88124 572500000 88124 df.min() Bu kod verilerimiz i\u00e7inde bulunan en k\u00fc\u00e7\u00fc\u011f\u00fcn\u00fc de\u011feri getirir. df.min() Date 2008-08-08 Open 6547.01 High 6709.61 Low 6469.95 Close 6547.05 Volume 8410000 Adj Close 6547.05 dtype: object df.max() Bu kod verilerimiz i\u00e7inde bulunan en b\u00fcy\u00fck de\u011feri getirir. df.max() Date 2016-07-01 Open 18315.1 High 18351.4 Low 18272.6 Close 18312.4 Volume 674920000 Adj Close 18312.4 dtype: object idxmin() Bu kod verideki en k\u00fc\u00e7\u00fck de\u011feri getirir. Seri ve dataframe \u00fczerindeki kullan\u0131m farkl\u0131d\u0131r. print(\"df: \",df['Open'].idxmin()) print(\"series\", mySeries.idxmin()) df: 1842 series b idxmax() Bu kod verilerdeki en b\u00fcy\u00fck de\u011feri d\u00f6nd\u00fcr\u00fcr. print(\"df: \",df['Open'].idxmax()) print(\"series: \",mySeries.idxmax()) df: 282 series: c df.describe() Bu kod verilerle ilgili temel istatistiksel bilgileri sa\u011flar. Say\u0131sal de\u011ferlere sahip s\u00fctunlar i\u00e7in ge\u00e7erlidir. count: verilerin say\u0131s\u0131n\u0131 verir. mean: verilerin ortalamas\u0131n\u0131 verir. std: verilerin standart sapmas\u0131n\u0131 verir. min: en k\u00fc\u00e7\u00fck veriyi verir. 25%: birinci d\u00f6rttebirlik 50%: ortanca veya ikinci d\u00f6rttebirlik 75%: \u00fc\u00e7\u00fcnc\u00fc d\u00f6rttebirlik max: en b\u00fcy\u00fck veriyi verir. df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close count 1989.000000 1989.000000 1989.000000 1989.000000 1.989000e+03 1989.000000 mean 13459.116048 13541.303173 13372.931728 13463.032255 1.628110e+08 13463.032255 std 3143.281634 3136.271725 3150.420934 3144.006996 9.392343e+07 3144.006996 min 6547.009766 6709.609863 6469.950195 6547.049805 8.410000e+06 6547.049805 25% 10907.339844 11000.980469 10824.759766 10913.379883 1.000000e+08 10913.379883 50% 13022.049805 13088.110352 12953.129883 13025.580078 1.351700e+08 13025.580078 75% 16477.699219 16550.070312 16392.769531 16478.410156 1.926000e+08 16478.410156 max 18315.060547 18351.359375 18272.560547 18312.390625 6.749200e+08 18312.390625 df.mean() Bu kod, say\u0131sal s\u00fctunlar i\u00e7in ortalama de\u011ferini g\u00f6sterir. df.mean() Open 1.345912e+04 High 1.354130e+04 Low 1.337293e+04 Close 1.346303e+04 Volume 1.628110e+08 Adj Close 1.346303e+04 dtype: float64 df.median() Bu kod, say\u0131sal de\u011ferlere sahip s\u00fctunlar i\u00e7in medyan de\u011ferini g\u00f6sterir. df.median() Open 1.302205e+04 High 1.308811e+04 Low 1.295313e+04 Close 1.302558e+04 Volume 1.351700e+08 Adj Close 1.302558e+04 dtype: float64 df.quantile([0.25,0.75]) Bu kod, her s\u00fctun i\u00e7in s\u00fctunlar\u0131n 0.25 ve 0.75 de\u011ferlerini hesaplar. df.quantile([0.25,0.75]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close 0.25 10907.339844 11000.980469 10824.759766 10913.379883 100000000.0 10913.379883 0.75 16477.699219 16550.070312 16392.769531 16478.410156 192600000.0 16478.410156 df.var() Bu kod, her s\u00fctun i\u00e7in varyans de\u011ferini hesaplar. df.var() Open 9.880219e+06 High 9.836200e+06 Low 9.925152e+06 Close 9.884780e+06 Volume 8.821610e+15 Adj Close 9.884780e+06 dtype: float64 df.std() Bu kod, say\u0131sal olan her s\u00fctun i\u00e7in standart sapma de\u011ferini hesaplar. df.std() Open 3.143282e+03 High 3.136272e+03 Low 3.150421e+03 Close 3.144007e+03 Volume 9.392343e+07 Adj Close 3.144007e+03 dtype: float64 df.cummax() Bu kod, veriler aras\u0131ndaki toplam maksimum de\u011feri hesaplar. df.cummax() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.2 18002.4 17916.9 17949.4 82160000 17949.4 1 2016-07-01 17924.2 18002.4 17916.9 17949.4 133030000 17949.4 2 2016-07-01 17924.2 18002.4 17916.9 17949.4 133030000 17949.4 3 2016-07-01 17924.2 18002.4 17916.9 17949.4 133030000 17949.4 4 2016-07-01 17924.2 18002.4 17916.9 17949.4 138740000 17949.4 ... ... ... ... ... ... ... ... 1984 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1985 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1986 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1987 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1988 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1989 rows \u00d7 7 columns df.cummin() Bu kod verinin toplam minimum de\u011ferini verir. df.cummin() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.2 18002.4 17916.9 17949.4 82160000 17949.4 1 2016-06-30 17712.8 17930.6 17711.8 17930 82160000 17930 2 2016-06-29 17456 17704.5 17456 17694.7 82160000 17694.7 3 2016-06-28 17190.5 17409.7 17190.5 17409.7 82160000 17409.7 4 2016-06-27 17190.5 17355.2 17063.1 17140.2 82160000 17140.2 ... ... ... ... ... ... ... ... 1984 2008-08-14 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1985 2008-08-13 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1986 2008-08-12 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1987 2008-08-11 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1988 2008-08-08 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1989 rows \u00d7 7 columns df['columnName'].cumproad() Bu kod, verilerin toplu \u00fcretimini d\u00f6nd\u00fcr\u00fcr. df['Open'].cumprod().head() 0 1.792424e+04 1 3.174878e+08 2 5.542073e+12 3 9.527105e+16 4 1.653449e+21 Name: Open, dtype: float64 len(df) Bu kod toplam ka\u00e7 adet veri oldu\u011funu g\u00f6sterir. len(df) 1989 df.isnull() Bo\u015f de\u011ferleri denetler, boolean bir de\u011fer d\u00f6nd\u00fcr\u00fcr. df.isnull().head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 False False False False False False False 1 False False False False False False False 2 False False False False False False False 3 False False False False False False False 4 False False False False False False False df.corr() Veriler aras\u0131ndaki ili\u015fki(korelasyon) hakk\u0131nda bilgi verir. df.corr() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close Open 1.000000 0.999592 0.999436 0.998991 -0.691621 0.998991 High 0.999592 1.000000 0.999373 0.999546 -0.686997 0.999546 Low 0.999436 0.999373 1.000000 0.999595 -0.699572 0.999595 Close 0.998991 0.999546 0.999595 1.000000 -0.694281 1.000000 Volume -0.691621 -0.686997 -0.699572 -0.694281 1.000000 -0.694281 Adj Close 0.998991 0.999546 0.999595 1.000000 -0.694281 1.000000 Se\u00e7me & Filtreleme Pandas ile istedi\u011fimiz verileri nas\u0131l se\u00e7ebilece\u011fimizi ve nas\u0131l getirebilece\u011fimizi \u00f6\u011frenece\u011fiz. mySeries['b'] Bu kod seri i\u00e7inde B de\u011feri olan verileri d\u00f6nd\u00fcr\u00fcr. mySeries['b'] -5 df[n:n] Bu kod n'den ne'ye kadar olan verileri getir. df[1982:] #Or #df[5:7] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1982 2008-08-18 11659.650391 11690.429688 11434.120117 11479.389648 156290000 11479.389648 1983 2008-08-15 11611.209961 11709.889648 11599.730469 11659.900391 215040000 11659.900391 1984 2008-08-14 11532.070312 11718.280273 11450.889648 11615.929688 159790000 11615.929688 1985 2008-08-13 11632.809570 11633.780273 11453.339844 11532.959961 182550000 11532.959961 1986 2008-08-12 11781.700195 11782.349609 11601.519531 11642.469727 173590000 11642.469727 1987 2008-08-11 11729.669922 11867.110352 11675.530273 11782.349609 183190000 11782.349609 1988 2008-08-08 11432.089844 11759.959961 11388.040039 11734.320312 212830000 11734.320312 df.iloc[[n],[n]] Bu kod, n sat\u0131r\u0131ndan ve n s\u00fctununa kadar olan verileri getirir. df.iloc[[0],[3]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Low 0 17916.910156 df.loc[n:n] Bu kod belirledi\u011fimiz aral\u0131ktaki verileri getirir. #df.loc[n:] # OR df.loc[5:7] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 5 2016-06-24 17946.630859 17946.630859 17356.339844 17400.750000 239000000 17400.750000 6 2016-06-23 17844.109375 18011.070312 17844.109375 18011.070312 98070000 18011.070312 7 2016-06-22 17832.669922 17920.160156 17770.359375 17780.830078 89440000 17780.830078 df['columnName'] Bu kod ile belirtti\u011fimiz s\u00fctunu se\u00e7ip getirebiliriz. df['Open'].head() # OR # df.Open 0 17924.240234 1 17712.759766 2 17456.019531 3 17190.509766 4 17355.210938 Name: Open, dtype: float64 df['columnName'][n] Bu kodla istedi\u011fimiz s\u00fctunun herhangi bir de\u011ferini se\u00e7ebiliriz. df['Open'][0] # OR # df.Open[0] # df[\"Open\"][1] # df.loc[1,[\"Open\"]] 17924.240234 df['columnName'].nunique() Bu kod, se\u00e7ilen s\u00fctunda bulunan verilerin ka\u00e7 tanesinin tekrarlamad\u0131\u011f\u0131n\u0131 g\u00f6sterir. df['Open'].nunique() 1980 df['columnName'].unique() Bu kod, se\u00e7ilen s\u00fctundaki verilerden hangilerinin tekrar etti\u011fini g\u00f6sterir. df['Open'].unique() # We can write the above code as follows:: df.Open.unique() array([17924.240234, 17712.759766, 17456.019531, ..., 11781.700195, 11729.669922, 11432.089844]) df.columnName Bu kod, istedi\u011fimiz s\u00fctunu se\u00e7menin ba\u015fka bir yoludur. Burada dikkat edilmesi gereken baz\u0131 husular mevcuttur. Bunlar; E\u011fer s\u00fctun ad\u0131 \" sutun adi \" \u015feklinde ise, arada bo\u015fluk bulundu\u011fu i\u00e7in bu y\u00f6ntemde kullanamay\u0131z. E\u011fer s\u00fctun ad\u0131nda T\u00fcrk\u00e7e karakter mevcut ise sorun \u00e7\u0131kartabilir. df.Open.head() 0 17924.240234 1 17712.759766 2 17456.019531 3 17190.509766 4 17355.210938 Name: Open, dtype: float64 df['columnName'].value_counts(dropna =False) Bu kod, belirledi\u011fimiz s\u00fctundaki t\u00fcm verileri sayar, ancak null/none olan de\u011ferleri saymaz. print(df.Open.value_counts(dropna =True).head()) # OR # print(df['Item'].value_counts(dropna =False)) 17374.779297 2 18033.330078 2 10309.389648 2 17711.119141 2 17812.250000 2 Name: Open, dtype: int64 df.head(n) Bu kod iste\u011fe ba\u011fl\u0131 olarak ba\u015ftan sadece ilk 5 veriyi getirir. n yerine hangi rakam\u0131 yazarsak o kadar veri getirir. df.head() # OR # df.head(15) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 df.tail(n) Bu kod iste\u011fe ba\u011fl\u0131 olarak sondan sadece son 5 veriyi getirir. n yerine hangi rakam\u0131 yazarsak o kadar veri getirir. df.tail() # OR # df.tail(20) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1984 2008-08-14 11532.070312 11718.280273 11450.889648 11615.929688 159790000 11615.929688 1985 2008-08-13 11632.809570 11633.780273 11453.339844 11532.959961 182550000 11532.959961 1986 2008-08-12 11781.700195 11782.349609 11601.519531 11642.469727 173590000 11642.469727 1987 2008-08-11 11729.669922 11867.110352 11675.530273 11782.349609 183190000 11782.349609 1988 2008-08-08 11432.089844 11759.959961 11388.040039 11734.320312 212830000 11734.320312 df.sample(n) Bu kod verimiz aras\u0131ndan rastgele n adet veri getir. df.sample(5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 515 2014-06-17 16779.210938 16823.550781 16732.910156 16808.490234 63530000 16808.490234 1425 2010-11-02 11125.219727 11219.519531 11125.219727 11188.719727 150390000 11188.719727 50 2016-04-21 18092.839844 18107.289062 17963.890625 17982.519531 102720000 17982.519531 759 2013-06-27 14921.280273 15075.009766 14921.280273 15024.490234 113650000 15024.490234 1322 2011-03-31 12350.759766 12381.679688 12319.009766 12319.730469 186140000 12319.730469 df.sample(frac=0.5) Bu kod rastgele sat\u0131rlar\u0131n kesirlerini se\u00e7er ve verileri bu dereceye kadar getirir. df.sample(frac=0.5).head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 151 2015-11-24 17770.900391 17862.599609 17683.509766 17812.189453 127170000 17812.189453 1421 2010-11-08 11439.540039 11439.610352 11362.530273 11406.839844 143990000 11406.839844 268 2015-06-10 17765.380859 18045.140625 17765.380859 18000.400391 96980000 18000.400391 477 2014-08-11 16557.269531 16627.990234 16557.269531 16569.980469 65560000 16569.980469 669 2013-11-04 15621.200195 15658.900391 15588.480469 15639.120117 71200000 15639.120117 df.nlargest(n,'columnName') Bu kod, n adet en b\u00fcy\u00fck de\u011feri belirtti\u011fimiz s\u00fctundan getirir. df.nlargest(5,'Open') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 282 2015-05-20 18315.060547 18350.130859 18272.560547 18285.400391 80190000 18285.400391 283 2015-05-19 18300.480469 18351.359375 18261.349609 18312.390625 87200000 18312.390625 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234 337 2015-03-03 18281.949219 18281.949219 18136.880859 18203.369141 83830000 18203.369141 df.nsmallest(n,'columnName') Bu kod, n adet en k\u00fc\u00e7\u00fck de\u011feri belirtti\u011fimiz s\u00fctundan getirir. df.nsmallest(3,'Open') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1842 2009-03-10 6547.009766 6926.490234 6546.609863 6926.490234 640020000 6926.490234 1844 2009-03-06 6595.160156 6755.169922 6469.950195 6626.939941 425170000 6626.939941 1843 2009-03-09 6625.740234 6709.609863 6516.859863 6547.049805 365990000 6547.049805 df[df.columnName < 5] Bu kod, belirledi\u011fimiz s\u00fctun ismindeki de\u011ferler i\u00e7erisinde 5'ten k\u00fc\u00e7\u00fck olanlar\u0131 getirir. df[df.Open > 18281.949219] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234 282 2015-05-20 18315.060547 18350.130859 18272.560547 18285.400391 80190000 18285.400391 283 2015-05-19 18300.480469 18351.359375 18261.349609 18312.390625 87200000 18312.390625 df[['columnName','columnName']] Bu kod, istedi\u011fimiz s\u00fctunlar\u0131 se\u00e7memize ve listelemimize yarar. df[['High','Low']].head() # df.loc[:,[\"High\",\"Low\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } High Low 0 18002.380859 17916.910156 1 17930.609375 17711.800781 2 17704.509766 17456.019531 3 17409.720703 17190.509766 4 17355.210938 17063.080078 df.loc[:,\"columnName1\":\"columnName2\"] Bu kod, columnName1'den columnName2'ye kadar olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr. df.loc[:,\"Date\":\"Close\"].head() # OR # data.loc[:3,\"Date\":\"Close\"] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 Filtre Olu\u015ftur filters = df.Date > '2016-06-27' df[filters] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 df.filter(regex = 'code') Bu kod, regex yap\u0131s\u0131n\u0131 kullanarak istedi\u011fimiz \u015fekilde filtreleme i\u015flemi yapmam\u0131za yarar. df.filter(regex='^L').head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Low 0 17916.910156 1 17711.800781 2 17456.019531 3 17190.509766 4 17063.080078 np.logical_and Mant\u0131ksal ve ile filtreleme i\u015flemi yapmam\u0131za yarar. df[np.logical_and(df['Open']>18281.949219, df['Date']>'2015-05-20' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234 & ile filtreleme df[(df['Open']>18281.949219) & (df['Date']>'2015-05-20')] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234 Verileri S\u0131ralama df.sort_values('columnName') Bu kod, belirtti\u011fimiz s\u00fctunu, k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe do\u011fru s\u0131ralar. df.sort_values('Open').head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1842 2009-03-10 6547.009766 6926.490234 6546.609863 6926.490234 640020000 6926.490234 1844 2009-03-06 6595.160156 6755.169922 6469.950195 6626.939941 425170000 6626.939941 1843 2009-03-09 6625.740234 6709.609863 6516.859863 6547.049805 365990000 6547.049805 1846 2009-03-04 6726.500000 6979.220215 6726.419922 6875.839844 464830000 6875.839844 1847 2009-03-03 6764.810059 6855.290039 6705.629883 6726.020020 445280000 6726.020020 df.sort_values('columnName', ascending=False) Bu kod, b\u00fcy\u00fckten k\u00fc\u00e7\u00fc\u011fe do\u011fru s\u00fctunu s\u0131ralamam\u0131za yarar. df.sort_values('Date', ascending=False).head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 df.sort_index() Bu kod DataFrame indeksine g\u00f6re k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe do\u011fru s\u0131ralam yapar. df.sort_index().head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 Yeniden Adland\u0131rma & Yeniden Tan\u0131mla & S\u00fctun Ad\u0131n\u0131 De\u011fi\u015ftirme df.rename(columns= {'columnName' : 'newColumnName'}) Bu kod s\u00fctun ad\u0131n\u0131 de\u011fi\u015ftirmemize yard\u0131mc\u0131 olur. A\u015fa\u011f\u0131da yazd\u0131\u011f\u0131m kod ID de\u011ferini de\u011fi\u015ftiriyor, ancak de\u011fi\u015fikli\u011fi DF de\u011fi\u015fkenine atamad\u0131\u011f\u0131m\u0131z i\u00e7in, a\u015fa\u011f\u0131da g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi de\u011fi\u015fmemi\u015f olarak g\u00f6r\u00fcn\u00fcyor. df.rename(columns= {'Adj Close' : 'Adjclose'}).head() # df = df.rename(columns= {'Id' : 'Identif'}, inplace=True) -> Do\u011fru Kod # inplace= True or False; Bu durum veri setinin \u00fczerine yaz\u0131p yazmama durumu belirtir. # Other Way # df.columns = ['date', 'open', 'high', 'low', 'close', 'volume', 'adjclose'] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adjclose 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 Yeni S\u00fctun Tan\u0131mlama Yeni s\u00fctun olu\u015fturma df[\"Difference\"] = df.High - df.Low df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close Difference 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 85.470703 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 218.808594 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 248.490235 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 219.210937 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 292.130860 \u0130ndeks Ad\u0131n\u0131 De\u011fi\u015ftir \u0130ndeks ad\u0131n\u0131 belirtti\u011fimiz \u015fekilde de\u011fi\u015ftirir. print(df.index.name) df.index.name = \"index_name\" df.head() None .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close Difference index_name 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 85.470703 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 218.808594 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 248.490235 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 219.210937 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 292.130860 B\u00fct\u00fcn s\u00fctunlar\u0131n ad\u0131n\u0131 k\u00fc\u00e7\u00fck yapma #df.columns = map(str.lower(), df.columns) B\u00fct\u00fcn s\u00fctunlar\u0131n ad\u0131n\u0131 b\u00fcy\u00fck yapma #df.columns = map(str.upper(), df.columns) Veri \u00c7\u0131karma df.drop(columns=['columnName']) Bu kod belirledi\u011fimiz s\u00fctunu siler.Ancak burada da inplace de\u011ferini belirtmemiz gerekiyor. df.drop(columns=['Adj Close']).head() # df = df.drop(columns=['Id']) -> True way # OR # df = df.drop('col', axis=1) # axis = 1 is meaning delete columns # axis = 0 is meaning delete rows .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Difference index_name 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 85.470703 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 218.808594 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 248.490235 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 219.210937 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 292.130860 mySeries.drop(['a']) Bu kod, dizide belirtilen de\u011feri silmemize yarar. mySeries.drop(['a']) b -5 c 7 d 4 dtype: int64 Sat\u0131r Silme # df.drop(['2016-07-01', '2016-06-27']) Veri Silme Not: axis = 1, bir sat\u0131ra de\u011fil bir s\u00fctuna i\u015faret etti\u011fimizi g\u00f6sterir. # df.drop('Volume', axis=1) Veri Tiplerini \u00c7evirme df.dtypes Bu kod hangi s\u00fctunlar\u0131n hangi veri tipini oldu\u011funu g\u00f6sterir. Boolean, int, float, object (String), tarih ve kategorik. df.dtypes Date object Open float64 High float64 Low float64 Close float64 Volume int64 Adj Close float64 Difference float64 dtype: object df['columnName'] = df['columnName'].astype('dataType') Bu kod, belirledi\u011fimiz s\u00fctunu, belirledi\u011fimiz veri t\u00fcr\u00fcne d\u00f6n\u00fc\u015ft\u00fcr\u00fcr. df.Date.astype('category').dtypes # OR Convert Datetime # df.Date= pd.to_datetime(df.Date) CategoricalDtype(categories=['2008-08-08', '2008-08-11', '2008-08-12', '2008-08-13', '2008-08-14', '2008-08-15', '2008-08-18', '2008-08-19', '2008-08-20', '2008-08-21', ... '2016-06-20', '2016-06-21', '2016-06-22', '2016-06-23', '2016-06-24', '2016-06-27', '2016-06-28', '2016-06-29', '2016-06-30', '2016-07-01'], ordered=False) pd.melt(frame=dataFrameName,id_vars = 'columnName', value_vars= ['columnName']) Bu kod biraz kafa kar\u0131\u015ft\u0131r\u0131c\u0131, bu nedenle \u00f6rne\u011fe bakal\u0131m. df_new = df.head() melted = pd.melt(frame=df_new,id_vars = 'Date', value_vars= ['Low']) melted .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date variable value 0 2016-07-01 Low 17916.910156 1 2016-06-30 Low 17711.800781 2 2016-06-29 Low 17456.019531 3 2016-06-28 Low 17190.509766 4 2016-06-27 Low 17063.080078 Apply Fonksiyonu Y\u00f6ntem 1 def examples(x): #create a function return x*2 df.Open.apply(examples).head() #use the function with apply() index_name 0 35848.480468 1 35425.519532 2 34912.039062 3 34381.019532 4 34710.421876 Name: Open, dtype: float64 Y\u00f6ntem 2 df.Open.apply(lambda x: x*2).head() index_name 0 35848.480468 1 35425.519532 2 34912.039062 3 34381.019532 4 34710.421876 Name: Open, dtype: float64 Faydal\u0131 Kodlar # pd.get_option OR pd.set_option # pd.reset_option(\"^display\") # pd.reset_option(\"display.max_rows\") # pd.get_option(\"display.max_rows\") # pd.set_option(\"max_r\",102) -> G\u00f6sterilecek maksimum sat\u0131r say\u0131s\u0131n\u0131 belirtir. # pd.options.display.max_rows = 999 -> G\u00f6sterilecek maksimum sat\u0131r say\u0131s\u0131n\u0131 belirtir. # pd.get_option(\"display.max_columns\") # pd.options.display.max_columns = 999 -> G\u00f6r\u00fcnt\u00fclenecek maksimum s\u00fctun say\u0131s\u0131n\u0131 belirtir. # pd.set_option('display.width', 300) # pd.set_option('display.max_columns', 300) -> G\u00f6sterilecek maksimum sat\u0131r say\u0131s\u0131n\u0131 belirtir. # pd.set_option('display.max_colwidth', 500) -> G\u00f6r\u00fcnt\u00fclenecek maksimum s\u00fctun say\u0131s\u0131n\u0131 belirtir. # pd.get_option('max_colwidth') # pd.set_option('max_colwidth',40) # pd.reset_option('max_colwidth') # pd.get_option('max_info_columns') # pd.set_option('max_info_columns', 11) # pd.reset_option('max_info_columns') # pd.get_option('max_info_rows') # pd.set_option('max_info_rows', 11) # pd.reset_option('max_info_rows') # pd.set_option('precision',7) -> \u00c7\u0131kt\u0131 g\u00f6r\u00fcnt\u00fcleme hassasiyetini ondal\u0131k basamak cinsinden ayarlar. Bu sadece bir \u00f6neri. # OR # pd.set_option('display.precision',3) # pd.set_option('chop_threshold', 0) -> Bir DataFrame dizisi g\u00f6r\u00fcnt\u00fcledi\u011finde Pandas'\u0131n s\u0131f\u0131ra ne kadar d\u00f6nd\u00fc\u011f\u00fcn\u00fc belirler. Bu ayar, numaran\u0131n kaydedildi\u011fi hassasiyeti de\u011fi\u015ftirmez. # pd.reset_option('chop_threshold') Son G\u00fcncelleme: 28 Aral\u0131k 2019 - Cumartesi","title":"Pandas"},{"location":"pandas/pandas/#pandas","text":"Pandas, Python programlama dili i\u00e7in y\u00fcksek performansl\u0131, kullan\u0131m\u0131 kolay veri yap\u0131lar\u0131 ve veri analizi ara\u00e7lar\u0131 sa\u011flayan a\u00e7\u0131k kaynakl\u0131, BSD lisansl\u0131 bir k\u00fct\u00fcphanedir. Pandas, NumFOCUS taraf\u0131ndan destelenmektedir.","title":"Pandas"},{"location":"pandas/pandas/#kutuphaneyi-tanmlama","text":"import numpy as np # lineer cebir import pandas as pd # pandas k\u00fct\u00fcphanesi tan\u0131mlan\u0131yor","title":"K\u00fct\u00fcphaneyi Tan\u0131mlama"},{"location":"pandas/pandas/#pandas-veri-turleri","text":"Pandas'ta iki t\u00fcr veri yap\u0131s\u0131 vard\u0131r. Bunlar seri(series) ve veri \u00e7er\u00e7evesidir(dataframe).","title":"Pandas Veri T\u00fcrleri"},{"location":"pandas/pandas/#serilerseries","text":"Seri, tek boyutlu etiketli bir dizidir. \u0130\u00e7inde her t\u00fcrl\u00fc veriyi bar\u0131nd\u0131rabilir. mySeries = pd.Series([3,-5,7,4], index=['a','b','c','d']) type(mySeries) pandas.core.series.Series","title":"Seriler(Series)"},{"location":"pandas/pandas/#veri-cercevesidataframe","text":"Veri \u00e7er\u00e7evesi(dataframe) iki boyutlu bir veri yap\u0131s\u0131d\u0131r. S\u00fctunlar\u0131 i\u00e7erir. Bu eserde veri \u00e7ev\u00e7evesi olarak adland\u0131rmak yerine dataframe olarak kullanaca\u011f\u0131z bilginiz olsun. data = {'Country' : ['Belgium', 'India', 'Brazil' ], 'Capital': ['Brussels', 'New Delhi', 'Brassilia'], 'Population': [1234,1234,1234]} datas = pd.DataFrame(data, columns=['Country','Capital','Population']) print(type(data)) print(type(datas)) <class 'dict'> <class 'pandas.core.frame.DataFrame'>","title":"Veri \u00c7er\u00e7evesi(DataFrame)"},{"location":"pandas/pandas/#verileri-iceri-aktarma","text":"Pandas ile CSV, Excel ve SQL veritabanlar\u0131n\u0131 a\u00e7abiliriz.","title":"Verileri \u0130\u00e7eri Aktarma"},{"location":"pandas/pandas/#csvcomma-separated-values-virgulle-ayrlms-degerler","text":"CSV dosyalar\u0131n\u0131 a\u00e7\u0131p okumak ve CSV dosyas\u0131n\u0131n \u00fczerine yazmak \u00e7ok kolayd\u0131r. df = pd.read_csv('../datas/DJIA_table.csv') type(df) # Python dosyan\u0131z CSV dosyan\u0131zla ayn\u0131 klas\u00f6rde de\u011filse, bunu a\u015fa\u011f\u0131daki gibi yapmal\u0131s\u0131n\u0131z. # df = pd.read_csv('/home/desktop/Iris.csv') pandas.core.frame.DataFrame","title":"CSV(Comma Separated Values / Virg\u00fclle Ayr\u0131lm\u0131\u015f De\u011ferler)"},{"location":"pandas/pandas/#excel","text":"Excel dosyalar\u0131yla \u00e7al\u0131\u015fmak istedi\u011fimizde, a\u015fa\u011f\u0131daki kodu yazmam\u0131z gerekir. # pd.read_excel('dosyaadi') # pd.to_excel('dir/dataFrame.xlsx', sheet_name='Sheet1')","title":"Excel"},{"location":"pandas/pandas/#diger-dosya-turleri-json-sql-table-html","text":"# pd.read_sql(query,connection_object) -> Bir SQL tablosundan/veritaban\u0131ndan verileri okur. # pd.read_table(filename) -> S\u0131n\u0131rland\u0131r\u0131lm\u0131\u015f bir metin dosyas\u0131ndan (TSV gibi) okur. # pd.read_json(json_string) -> Bir json formatl\u0131 dize, URL veya dosyadan okur. # pd.read_html(url) -> Bir html URL'sini, dizgiyi veya dosyay\u0131 ayr\u0131\u015ft\u0131r\u0131r ve tablolar\u0131 dataframe listesine \u00e7\u0131kar\u0131r. # pd.read_clipboard() -> Panonuzun i\u00e7eri\u011fini al\u0131r ve onu read_table () \u00f6\u011fesine iletir. # pd.DataFrame(dict) -> Bir s\u00f6zl\u00fckten, s\u00fctun adlar\u0131na ili\u015fkin verileri, listeler halinde okur.","title":"Di\u011fer dosya t\u00fcrleri (json, SQL, table, html)"},{"location":"pandas/pandas/#veriyi-dsar-aktarma","text":"# df.to_csv(filename) -> CSV dosyas\u0131 halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_excel(filename) -> Excel dosyas\u0131 halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_sql(table_name, connection_object) -> SQL tablosu halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_json(filename) -> JSON halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_html(filename) -> HTML tablosu halinde d\u0131\u015far\u0131 aktar\u0131r. # df.to_clipboard() -> Clipboard halinde d\u0131\u015far\u0131 aktar\u0131r.","title":"Veriyi D\u0131\u015far\u0131 Aktarma"},{"location":"pandas/pandas/#test-verilerini-olusturmak","text":"pd.DataFrame(np.random.rand(20,5)) # 5 s\u00fctun ve 20 sat\u0131r\u0131 bulunan rastgele kayan noktal\u0131(float) say\u0131lardan olu\u015fan bir dataframe olu\u015fturur. .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 0 0.881674 0.656281 0.530675 0.701284 0.745154 1 0.967789 0.361502 0.516868 0.363684 0.692905 2 0.020186 0.246136 0.276501 0.156050 0.610562 3 0.978084 0.771438 0.357285 0.216900 0.605728 4 0.470992 0.136826 0.025263 0.513115 0.355362 5 0.037611 0.968741 0.148456 0.219907 0.811352 6 0.405742 0.105569 0.316834 0.546320 0.783297 7 0.388317 0.875504 0.483557 0.115927 0.220484 8 0.181219 0.213682 0.188712 0.017624 0.993905 9 0.454112 0.676238 0.465122 0.823352 0.728502 10 0.614288 0.148511 0.097686 0.474665 0.277006 11 0.603164 0.677704 0.480384 0.990380 0.094366 12 0.226657 0.818445 0.226504 0.872379 0.142988 13 0.200353 0.040381 0.791361 0.142564 0.729426 14 0.347076 0.187979 0.129819 0.004997 0.918674 15 0.905068 0.607013 0.319787 0.798406 0.493602 16 0.373228 0.960043 0.783589 0.084993 0.740864 17 0.407283 0.617893 0.734941 0.895326 0.096390 18 0.797779 0.611200 0.668267 0.349107 0.754915 19 0.029135 0.871738 0.030545 0.048413 0.582861","title":"Test Verilerini Olu\u015fturmak"},{"location":"pandas/pandas/#veriyi-ozetleme","text":"Pandas ile veriler hakk\u0131nda bilgi almak kolayd\u0131r. Pandas i\u00e7erisinde bulunan fonksiyonlar\u0131 tek tek inceleyelim.","title":"Veriyi \u00d6zetleme"},{"location":"pandas/pandas/#dfinfo","text":"Bu Kod verilerimiz hakk\u0131nda detayl\u0131 bilgi sunar. RangeIndex: Ka\u00e7 tane veri oldu\u011funu belirtir. Data Columns: Ka\u00e7 tane s\u00fctun bulundu\u011funu belirtir. Columns: S\u00fctunlar hakk\u0131nda bilgi verir. dtypes: Ne t\u00fcr verilerimizin oldu\u011funu ve bu verilerden ka\u00e7 tane bulundu\u011funu belirtir. Memory Usage: Haf\u0131za kullan\u0131m\u0131n\u0131n ne kadar oldu\u011funu g\u00f6sterir. df.info() <class 'pandas.core.frame.DataFrame'> RangeIndex: 1989 entries, 0 to 1988 Data columns (total 7 columns): Date 1989 non-null object Open 1989 non-null float64 High 1989 non-null float64 Low 1989 non-null float64 Close 1989 non-null float64 Volume 1989 non-null int64 Adj Close 1989 non-null float64 dtypes: float64(5), int64(1), object(1) memory usage: 108.9+ KB","title":"df.info()"},{"location":"pandas/pandas/#dfshape","text":"Bu kod bize sat\u0131r ve s\u00fctun say\u0131s\u0131n\u0131 g\u00f6sterir. df.shape (1989, 7)","title":"df.shape()"},{"location":"pandas/pandas/#dfindex","text":"Bu kod bulunan toplam indeks say\u0131s\u0131n\u0131 g\u00f6sterir. df.index RangeIndex(start=0, stop=1989, step=1)","title":"df.index"},{"location":"pandas/pandas/#dfcolumns","text":"Bu kod, inceledi\u011fimiz verilerdeki t\u00fcm s\u00fctunlar\u0131 g\u00f6sterir. df.columns Index(['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close'], dtype='object')","title":"df.columns"},{"location":"pandas/pandas/#dfcount","text":"Bu kod bize her s\u00fctunda ka\u00e7 tane veri oldu\u011funu g\u00f6sterir. df.count() Date 1989 Open 1989 High 1989 Low 1989 Close 1989 Volume 1989 Adj Close 1989 dtype: int64","title":"df.count()"},{"location":"pandas/pandas/#dfsum","text":"Bu kod bize her s\u00fctundaki verinin toplam\u0131n\u0131 g\u00f6sterir. df.sum() Date 2016-07-012016-06-302016-06-292016-06-282016-0... Open 2.67702e+07 High 2.69337e+07 Low 2.65988e+07 Close 2.6778e+07 Volume 323831020000 Adj Close 2.6778e+07 dtype: object","title":"df.sum()"},{"location":"pandas/pandas/#dfcumsum","text":"Bu kod bize verilerin k\u00fcm\u00fclatif toplam\u0131n\u0131 verir. df.cumsum().head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.2 18002.4 17916.9 17949.4 82160000 17949.4 1 2016-07-012016-06-30 35637 35933 35628.7 35879.4 215190000 35879.4 2 2016-07-012016-06-302016-06-29 53093 53637.5 53084.7 53574 321570000 53574 3 2016-07-012016-06-302016-06-292016-06-28 70283.5 71047.2 70275.2 70983.8 433760000 70983.8 4 2016-07-012016-06-302016-06-292016-06-282016-0... 87638.7 88402.4 87338.3 88124 572500000 88124","title":"df.cumsum()"},{"location":"pandas/pandas/#dfmin","text":"Bu kod verilerimiz i\u00e7inde bulunan en k\u00fc\u00e7\u00fc\u011f\u00fcn\u00fc de\u011feri getirir. df.min() Date 2008-08-08 Open 6547.01 High 6709.61 Low 6469.95 Close 6547.05 Volume 8410000 Adj Close 6547.05 dtype: object","title":"df.min()"},{"location":"pandas/pandas/#dfmax","text":"Bu kod verilerimiz i\u00e7inde bulunan en b\u00fcy\u00fck de\u011feri getirir. df.max() Date 2016-07-01 Open 18315.1 High 18351.4 Low 18272.6 Close 18312.4 Volume 674920000 Adj Close 18312.4 dtype: object","title":"df.max()"},{"location":"pandas/pandas/#idxmin","text":"Bu kod verideki en k\u00fc\u00e7\u00fck de\u011feri getirir. Seri ve dataframe \u00fczerindeki kullan\u0131m farkl\u0131d\u0131r. print(\"df: \",df['Open'].idxmin()) print(\"series\", mySeries.idxmin()) df: 1842 series b","title":"idxmin()"},{"location":"pandas/pandas/#idxmax","text":"Bu kod verilerdeki en b\u00fcy\u00fck de\u011feri d\u00f6nd\u00fcr\u00fcr. print(\"df: \",df['Open'].idxmax()) print(\"series: \",mySeries.idxmax()) df: 282 series: c","title":"idxmax()"},{"location":"pandas/pandas/#dfdescribe","text":"Bu kod verilerle ilgili temel istatistiksel bilgileri sa\u011flar. Say\u0131sal de\u011ferlere sahip s\u00fctunlar i\u00e7in ge\u00e7erlidir. count: verilerin say\u0131s\u0131n\u0131 verir. mean: verilerin ortalamas\u0131n\u0131 verir. std: verilerin standart sapmas\u0131n\u0131 verir. min: en k\u00fc\u00e7\u00fck veriyi verir. 25%: birinci d\u00f6rttebirlik 50%: ortanca veya ikinci d\u00f6rttebirlik 75%: \u00fc\u00e7\u00fcnc\u00fc d\u00f6rttebirlik max: en b\u00fcy\u00fck veriyi verir. df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close count 1989.000000 1989.000000 1989.000000 1989.000000 1.989000e+03 1989.000000 mean 13459.116048 13541.303173 13372.931728 13463.032255 1.628110e+08 13463.032255 std 3143.281634 3136.271725 3150.420934 3144.006996 9.392343e+07 3144.006996 min 6547.009766 6709.609863 6469.950195 6547.049805 8.410000e+06 6547.049805 25% 10907.339844 11000.980469 10824.759766 10913.379883 1.000000e+08 10913.379883 50% 13022.049805 13088.110352 12953.129883 13025.580078 1.351700e+08 13025.580078 75% 16477.699219 16550.070312 16392.769531 16478.410156 1.926000e+08 16478.410156 max 18315.060547 18351.359375 18272.560547 18312.390625 6.749200e+08 18312.390625","title":"df.describe()"},{"location":"pandas/pandas/#dfmean","text":"Bu kod, say\u0131sal s\u00fctunlar i\u00e7in ortalama de\u011ferini g\u00f6sterir. df.mean() Open 1.345912e+04 High 1.354130e+04 Low 1.337293e+04 Close 1.346303e+04 Volume 1.628110e+08 Adj Close 1.346303e+04 dtype: float64","title":"df.mean()"},{"location":"pandas/pandas/#dfmedian","text":"Bu kod, say\u0131sal de\u011ferlere sahip s\u00fctunlar i\u00e7in medyan de\u011ferini g\u00f6sterir. df.median() Open 1.302205e+04 High 1.308811e+04 Low 1.295313e+04 Close 1.302558e+04 Volume 1.351700e+08 Adj Close 1.302558e+04 dtype: float64","title":"df.median()"},{"location":"pandas/pandas/#dfquantile025075","text":"Bu kod, her s\u00fctun i\u00e7in s\u00fctunlar\u0131n 0.25 ve 0.75 de\u011ferlerini hesaplar. df.quantile([0.25,0.75]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close 0.25 10907.339844 11000.980469 10824.759766 10913.379883 100000000.0 10913.379883 0.75 16477.699219 16550.070312 16392.769531 16478.410156 192600000.0 16478.410156","title":"df.quantile([0.25,0.75])"},{"location":"pandas/pandas/#dfvar","text":"Bu kod, her s\u00fctun i\u00e7in varyans de\u011ferini hesaplar. df.var() Open 9.880219e+06 High 9.836200e+06 Low 9.925152e+06 Close 9.884780e+06 Volume 8.821610e+15 Adj Close 9.884780e+06 dtype: float64","title":"df.var()"},{"location":"pandas/pandas/#dfstd","text":"Bu kod, say\u0131sal olan her s\u00fctun i\u00e7in standart sapma de\u011ferini hesaplar. df.std() Open 3.143282e+03 High 3.136272e+03 Low 3.150421e+03 Close 3.144007e+03 Volume 9.392343e+07 Adj Close 3.144007e+03 dtype: float64","title":"df.std()"},{"location":"pandas/pandas/#dfcummax","text":"Bu kod, veriler aras\u0131ndaki toplam maksimum de\u011feri hesaplar. df.cummax() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.2 18002.4 17916.9 17949.4 82160000 17949.4 1 2016-07-01 17924.2 18002.4 17916.9 17949.4 133030000 17949.4 2 2016-07-01 17924.2 18002.4 17916.9 17949.4 133030000 17949.4 3 2016-07-01 17924.2 18002.4 17916.9 17949.4 133030000 17949.4 4 2016-07-01 17924.2 18002.4 17916.9 17949.4 138740000 17949.4 ... ... ... ... ... ... ... ... 1984 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1985 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1986 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1987 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1988 2016-07-01 18315.1 18351.4 18272.6 18312.4 674920000 18312.4 1989 rows \u00d7 7 columns","title":"df.cummax()"},{"location":"pandas/pandas/#dfcummin","text":"Bu kod verinin toplam minimum de\u011ferini verir. df.cummin() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.2 18002.4 17916.9 17949.4 82160000 17949.4 1 2016-06-30 17712.8 17930.6 17711.8 17930 82160000 17930 2 2016-06-29 17456 17704.5 17456 17694.7 82160000 17694.7 3 2016-06-28 17190.5 17409.7 17190.5 17409.7 82160000 17409.7 4 2016-06-27 17190.5 17355.2 17063.1 17140.2 82160000 17140.2 ... ... ... ... ... ... ... ... 1984 2008-08-14 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1985 2008-08-13 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1986 2008-08-12 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1987 2008-08-11 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1988 2008-08-08 6547.01 6709.61 6469.95 6547.05 8410000 6547.05 1989 rows \u00d7 7 columns","title":"df.cummin()"},{"location":"pandas/pandas/#dfcolumnnamecumproad","text":"Bu kod, verilerin toplu \u00fcretimini d\u00f6nd\u00fcr\u00fcr. df['Open'].cumprod().head() 0 1.792424e+04 1 3.174878e+08 2 5.542073e+12 3 9.527105e+16 4 1.653449e+21 Name: Open, dtype: float64","title":"df['columnName'].cumproad()"},{"location":"pandas/pandas/#lendf","text":"Bu kod toplam ka\u00e7 adet veri oldu\u011funu g\u00f6sterir. len(df) 1989","title":"len(df)"},{"location":"pandas/pandas/#dfisnull","text":"Bo\u015f de\u011ferleri denetler, boolean bir de\u011fer d\u00f6nd\u00fcr\u00fcr. df.isnull().head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 False False False False False False False 1 False False False False False False False 2 False False False False False False False 3 False False False False False False False 4 False False False False False False False","title":"df.isnull()"},{"location":"pandas/pandas/#dfcorr","text":"Veriler aras\u0131ndaki ili\u015fki(korelasyon) hakk\u0131nda bilgi verir. df.corr() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close Open 1.000000 0.999592 0.999436 0.998991 -0.691621 0.998991 High 0.999592 1.000000 0.999373 0.999546 -0.686997 0.999546 Low 0.999436 0.999373 1.000000 0.999595 -0.699572 0.999595 Close 0.998991 0.999546 0.999595 1.000000 -0.694281 1.000000 Volume -0.691621 -0.686997 -0.699572 -0.694281 1.000000 -0.694281 Adj Close 0.998991 0.999546 0.999595 1.000000 -0.694281 1.000000","title":"df.corr()"},{"location":"pandas/pandas/#secme-filtreleme","text":"Pandas ile istedi\u011fimiz verileri nas\u0131l se\u00e7ebilece\u011fimizi ve nas\u0131l getirebilece\u011fimizi \u00f6\u011frenece\u011fiz.","title":"Se\u00e7me &amp; Filtreleme"},{"location":"pandas/pandas/#myseriesb","text":"Bu kod seri i\u00e7inde B de\u011feri olan verileri d\u00f6nd\u00fcr\u00fcr. mySeries['b'] -5","title":"mySeries['b']"},{"location":"pandas/pandas/#dfnn","text":"Bu kod n'den ne'ye kadar olan verileri getir. df[1982:] #Or #df[5:7] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1982 2008-08-18 11659.650391 11690.429688 11434.120117 11479.389648 156290000 11479.389648 1983 2008-08-15 11611.209961 11709.889648 11599.730469 11659.900391 215040000 11659.900391 1984 2008-08-14 11532.070312 11718.280273 11450.889648 11615.929688 159790000 11615.929688 1985 2008-08-13 11632.809570 11633.780273 11453.339844 11532.959961 182550000 11532.959961 1986 2008-08-12 11781.700195 11782.349609 11601.519531 11642.469727 173590000 11642.469727 1987 2008-08-11 11729.669922 11867.110352 11675.530273 11782.349609 183190000 11782.349609 1988 2008-08-08 11432.089844 11759.959961 11388.040039 11734.320312 212830000 11734.320312","title":"df[n:n]"},{"location":"pandas/pandas/#dfilocnn","text":"Bu kod, n sat\u0131r\u0131ndan ve n s\u00fctununa kadar olan verileri getirir. df.iloc[[0],[3]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Low 0 17916.910156","title":"df.iloc[[n],[n]]"},{"location":"pandas/pandas/#dflocnn","text":"Bu kod belirledi\u011fimiz aral\u0131ktaki verileri getirir. #df.loc[n:] # OR df.loc[5:7] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 5 2016-06-24 17946.630859 17946.630859 17356.339844 17400.750000 239000000 17400.750000 6 2016-06-23 17844.109375 18011.070312 17844.109375 18011.070312 98070000 18011.070312 7 2016-06-22 17832.669922 17920.160156 17770.359375 17780.830078 89440000 17780.830078","title":"df.loc[n:n]"},{"location":"pandas/pandas/#dfcolumnname","text":"Bu kod ile belirtti\u011fimiz s\u00fctunu se\u00e7ip getirebiliriz. df['Open'].head() # OR # df.Open 0 17924.240234 1 17712.759766 2 17456.019531 3 17190.509766 4 17355.210938 Name: Open, dtype: float64","title":"df['columnName']"},{"location":"pandas/pandas/#dfcolumnnamen","text":"Bu kodla istedi\u011fimiz s\u00fctunun herhangi bir de\u011ferini se\u00e7ebiliriz. df['Open'][0] # OR # df.Open[0] # df[\"Open\"][1] # df.loc[1,[\"Open\"]] 17924.240234","title":"df['columnName'][n]"},{"location":"pandas/pandas/#dfcolumnnamenunique","text":"Bu kod, se\u00e7ilen s\u00fctunda bulunan verilerin ka\u00e7 tanesinin tekrarlamad\u0131\u011f\u0131n\u0131 g\u00f6sterir. df['Open'].nunique() 1980","title":"df['columnName'].nunique()"},{"location":"pandas/pandas/#dfcolumnnameunique","text":"Bu kod, se\u00e7ilen s\u00fctundaki verilerden hangilerinin tekrar etti\u011fini g\u00f6sterir. df['Open'].unique() # We can write the above code as follows:: df.Open.unique() array([17924.240234, 17712.759766, 17456.019531, ..., 11781.700195, 11729.669922, 11432.089844])","title":"df['columnName'].unique()"},{"location":"pandas/pandas/#dfcolumnname_1","text":"Bu kod, istedi\u011fimiz s\u00fctunu se\u00e7menin ba\u015fka bir yoludur. Burada dikkat edilmesi gereken baz\u0131 husular mevcuttur. Bunlar; E\u011fer s\u00fctun ad\u0131 \" sutun adi \" \u015feklinde ise, arada bo\u015fluk bulundu\u011fu i\u00e7in bu y\u00f6ntemde kullanamay\u0131z. E\u011fer s\u00fctun ad\u0131nda T\u00fcrk\u00e7e karakter mevcut ise sorun \u00e7\u0131kartabilir. df.Open.head() 0 17924.240234 1 17712.759766 2 17456.019531 3 17190.509766 4 17355.210938 Name: Open, dtype: float64","title":"df.columnName"},{"location":"pandas/pandas/#dfcolumnnamevalue_countsdropna-false","text":"Bu kod, belirledi\u011fimiz s\u00fctundaki t\u00fcm verileri sayar, ancak null/none olan de\u011ferleri saymaz. print(df.Open.value_counts(dropna =True).head()) # OR # print(df['Item'].value_counts(dropna =False)) 17374.779297 2 18033.330078 2 10309.389648 2 17711.119141 2 17812.250000 2 Name: Open, dtype: int64","title":"df['columnName'].value_counts(dropna =False)"},{"location":"pandas/pandas/#dfheadn","text":"Bu kod iste\u011fe ba\u011fl\u0131 olarak ba\u015ftan sadece ilk 5 veriyi getirir. n yerine hangi rakam\u0131 yazarsak o kadar veri getirir. df.head() # OR # df.head(15) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234","title":"df.head(n)"},{"location":"pandas/pandas/#dftailn","text":"Bu kod iste\u011fe ba\u011fl\u0131 olarak sondan sadece son 5 veriyi getirir. n yerine hangi rakam\u0131 yazarsak o kadar veri getirir. df.tail() # OR # df.tail(20) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1984 2008-08-14 11532.070312 11718.280273 11450.889648 11615.929688 159790000 11615.929688 1985 2008-08-13 11632.809570 11633.780273 11453.339844 11532.959961 182550000 11532.959961 1986 2008-08-12 11781.700195 11782.349609 11601.519531 11642.469727 173590000 11642.469727 1987 2008-08-11 11729.669922 11867.110352 11675.530273 11782.349609 183190000 11782.349609 1988 2008-08-08 11432.089844 11759.959961 11388.040039 11734.320312 212830000 11734.320312","title":"df.tail(n)"},{"location":"pandas/pandas/#dfsamplen","text":"Bu kod verimiz aras\u0131ndan rastgele n adet veri getir. df.sample(5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 515 2014-06-17 16779.210938 16823.550781 16732.910156 16808.490234 63530000 16808.490234 1425 2010-11-02 11125.219727 11219.519531 11125.219727 11188.719727 150390000 11188.719727 50 2016-04-21 18092.839844 18107.289062 17963.890625 17982.519531 102720000 17982.519531 759 2013-06-27 14921.280273 15075.009766 14921.280273 15024.490234 113650000 15024.490234 1322 2011-03-31 12350.759766 12381.679688 12319.009766 12319.730469 186140000 12319.730469","title":"df.sample(n)"},{"location":"pandas/pandas/#dfsamplefrac05","text":"Bu kod rastgele sat\u0131rlar\u0131n kesirlerini se\u00e7er ve verileri bu dereceye kadar getirir. df.sample(frac=0.5).head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 151 2015-11-24 17770.900391 17862.599609 17683.509766 17812.189453 127170000 17812.189453 1421 2010-11-08 11439.540039 11439.610352 11362.530273 11406.839844 143990000 11406.839844 268 2015-06-10 17765.380859 18045.140625 17765.380859 18000.400391 96980000 18000.400391 477 2014-08-11 16557.269531 16627.990234 16557.269531 16569.980469 65560000 16569.980469 669 2013-11-04 15621.200195 15658.900391 15588.480469 15639.120117 71200000 15639.120117","title":"df.sample(frac=0.5)"},{"location":"pandas/pandas/#dfnlargestncolumnname","text":"Bu kod, n adet en b\u00fcy\u00fck de\u011feri belirtti\u011fimiz s\u00fctundan getirir. df.nlargest(5,'Open') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 282 2015-05-20 18315.060547 18350.130859 18272.560547 18285.400391 80190000 18285.400391 283 2015-05-19 18300.480469 18351.359375 18261.349609 18312.390625 87200000 18312.390625 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234 337 2015-03-03 18281.949219 18281.949219 18136.880859 18203.369141 83830000 18203.369141","title":"df.nlargest(n,'columnName')"},{"location":"pandas/pandas/#dfnsmallestncolumnname","text":"Bu kod, n adet en k\u00fc\u00e7\u00fck de\u011feri belirtti\u011fimiz s\u00fctundan getirir. df.nsmallest(3,'Open') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1842 2009-03-10 6547.009766 6926.490234 6546.609863 6926.490234 640020000 6926.490234 1844 2009-03-06 6595.160156 6755.169922 6469.950195 6626.939941 425170000 6626.939941 1843 2009-03-09 6625.740234 6709.609863 6516.859863 6547.049805 365990000 6547.049805","title":"df.nsmallest(n,'columnName')"},{"location":"pandas/pandas/#dfdfcolumnname-5","text":"Bu kod, belirledi\u011fimiz s\u00fctun ismindeki de\u011ferler i\u00e7erisinde 5'ten k\u00fc\u00e7\u00fck olanlar\u0131 getirir. df[df.Open > 18281.949219] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234 282 2015-05-20 18315.060547 18350.130859 18272.560547 18285.400391 80190000 18285.400391 283 2015-05-19 18300.480469 18351.359375 18261.349609 18312.390625 87200000 18312.390625","title":"df[df.columnName &lt; 5]"},{"location":"pandas/pandas/#dfcolumnnamecolumnname","text":"Bu kod, istedi\u011fimiz s\u00fctunlar\u0131 se\u00e7memize ve listelemimize yarar. df[['High','Low']].head() # df.loc[:,[\"High\",\"Low\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } High Low 0 18002.380859 17916.910156 1 17930.609375 17711.800781 2 17704.509766 17456.019531 3 17409.720703 17190.509766 4 17355.210938 17063.080078","title":"df[['columnName','columnName']]"},{"location":"pandas/pandas/#dfloccolumnname1columnname2","text":"Bu kod, columnName1'den columnName2'ye kadar olan s\u00fctunlar\u0131 d\u00f6nd\u00fcr\u00fcr. df.loc[:,\"Date\":\"Close\"].head() # OR # data.loc[:3,\"Date\":\"Close\"] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234","title":"df.loc[:,\"columnName1\":\"columnName2\"]"},{"location":"pandas/pandas/#filtre-olustur","text":"filters = df.Date > '2016-06-27' df[filters] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703","title":"Filtre Olu\u015ftur"},{"location":"pandas/pandas/#dffilterregex-code","text":"Bu kod, regex yap\u0131s\u0131n\u0131 kullanarak istedi\u011fimiz \u015fekilde filtreleme i\u015flemi yapmam\u0131za yarar. df.filter(regex='^L').head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Low 0 17916.910156 1 17711.800781 2 17456.019531 3 17190.509766 4 17063.080078","title":"df.filter(regex = 'code')"},{"location":"pandas/pandas/#nplogical_and","text":"Mant\u0131ksal ve ile filtreleme i\u015flemi yapmam\u0131za yarar. df[np.logical_and(df['Open']>18281.949219, df['Date']>'2015-05-20' )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234","title":"np.logical_and"},{"location":"pandas/pandas/#ile-filtreleme","text":"df[(df['Open']>18281.949219) & (df['Date']>'2015-05-20')] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 280 2015-05-22 18286.869141 18286.869141 18217.140625 18232.019531 78890000 18232.019531 281 2015-05-21 18285.869141 18314.890625 18249.900391 18285.740234 84270000 18285.740234","title":"&amp; ile filtreleme"},{"location":"pandas/pandas/#verileri-sralama","text":"","title":"Verileri S\u0131ralama"},{"location":"pandas/pandas/#dfsort_valuescolumnname","text":"Bu kod, belirtti\u011fimiz s\u00fctunu, k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe do\u011fru s\u0131ralar. df.sort_values('Open').head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 1842 2009-03-10 6547.009766 6926.490234 6546.609863 6926.490234 640020000 6926.490234 1844 2009-03-06 6595.160156 6755.169922 6469.950195 6626.939941 425170000 6626.939941 1843 2009-03-09 6625.740234 6709.609863 6516.859863 6547.049805 365990000 6547.049805 1846 2009-03-04 6726.500000 6979.220215 6726.419922 6875.839844 464830000 6875.839844 1847 2009-03-03 6764.810059 6855.290039 6705.629883 6726.020020 445280000 6726.020020","title":"df.sort_values('columnName')"},{"location":"pandas/pandas/#dfsort_valuescolumnname-ascendingfalse","text":"Bu kod, b\u00fcy\u00fckten k\u00fc\u00e7\u00fc\u011fe do\u011fru s\u00fctunu s\u0131ralamam\u0131za yarar. df.sort_values('Date', ascending=False).head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234","title":"df.sort_values('columnName', ascending=False)"},{"location":"pandas/pandas/#dfsort_index","text":"Bu kod DataFrame indeksine g\u00f6re k\u00fc\u00e7\u00fckten b\u00fcy\u00fc\u011fe do\u011fru s\u0131ralam yapar. df.sort_index().head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234","title":"df.sort_index()"},{"location":"pandas/pandas/#yeniden-adlandrma-yeniden-tanmla-sutun-adn-degistirme","text":"","title":"Yeniden Adland\u0131rma &amp; Yeniden Tan\u0131mla &amp; S\u00fctun Ad\u0131n\u0131 De\u011fi\u015ftirme"},{"location":"pandas/pandas/#dfrenamecolumns-columnname-newcolumnname","text":"Bu kod s\u00fctun ad\u0131n\u0131 de\u011fi\u015ftirmemize yard\u0131mc\u0131 olur. A\u015fa\u011f\u0131da yazd\u0131\u011f\u0131m kod ID de\u011ferini de\u011fi\u015ftiriyor, ancak de\u011fi\u015fikli\u011fi DF de\u011fi\u015fkenine atamad\u0131\u011f\u0131m\u0131z i\u00e7in, a\u015fa\u011f\u0131da g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi de\u011fi\u015fmemi\u015f olarak g\u00f6r\u00fcn\u00fcyor. df.rename(columns= {'Adj Close' : 'Adjclose'}).head() # df = df.rename(columns= {'Id' : 'Identif'}, inplace=True) -> Do\u011fru Kod # inplace= True or False; Bu durum veri setinin \u00fczerine yaz\u0131p yazmama durumu belirtir. # Other Way # df.columns = ['date', 'open', 'high', 'low', 'close', 'volume', 'adjclose'] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adjclose 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234","title":"df.rename(columns= {'columnName' : 'newColumnName'})"},{"location":"pandas/pandas/#yeni-sutun-tanmlama","text":"Yeni s\u00fctun olu\u015fturma df[\"Difference\"] = df.High - df.Low df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close Difference 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 85.470703 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 218.808594 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 248.490235 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 219.210937 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 292.130860","title":"Yeni S\u00fctun Tan\u0131mlama"},{"location":"pandas/pandas/#indeks-adn-degistir","text":"\u0130ndeks ad\u0131n\u0131 belirtti\u011fimiz \u015fekilde de\u011fi\u015ftirir. print(df.index.name) df.index.name = \"index_name\" df.head() None .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close Difference index_name 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 17949.369141 85.470703 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 17929.990234 218.808594 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 17694.679688 248.490235 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 17409.720703 219.210937 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 17140.240234 292.130860","title":"\u0130ndeks Ad\u0131n\u0131 De\u011fi\u015ftir"},{"location":"pandas/pandas/#butun-sutunlarn-adn-kucuk-yapma","text":"#df.columns = map(str.lower(), df.columns)","title":"B\u00fct\u00fcn s\u00fctunlar\u0131n ad\u0131n\u0131 k\u00fc\u00e7\u00fck yapma"},{"location":"pandas/pandas/#butun-sutunlarn-adn-buyuk-yapma","text":"#df.columns = map(str.upper(), df.columns)","title":"B\u00fct\u00fcn s\u00fctunlar\u0131n ad\u0131n\u0131 b\u00fcy\u00fck yapma"},{"location":"pandas/pandas/#veri-ckarma","text":"","title":"Veri \u00c7\u0131karma"},{"location":"pandas/pandas/#dfdropcolumnscolumnname","text":"Bu kod belirledi\u011fimiz s\u00fctunu siler.Ancak burada da inplace de\u011ferini belirtmemiz gerekiyor. df.drop(columns=['Adj Close']).head() # df = df.drop(columns=['Id']) -> True way # OR # df = df.drop('col', axis=1) # axis = 1 is meaning delete columns # axis = 0 is meaning delete rows .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Difference index_name 0 2016-07-01 17924.240234 18002.380859 17916.910156 17949.369141 82160000 85.470703 1 2016-06-30 17712.759766 17930.609375 17711.800781 17929.990234 133030000 218.808594 2 2016-06-29 17456.019531 17704.509766 17456.019531 17694.679688 106380000 248.490235 3 2016-06-28 17190.509766 17409.720703 17190.509766 17409.720703 112190000 219.210937 4 2016-06-27 17355.210938 17355.210938 17063.080078 17140.240234 138740000 292.130860","title":"df.drop(columns=['columnName'])"},{"location":"pandas/pandas/#myseriesdropa","text":"Bu kod, dizide belirtilen de\u011feri silmemize yarar. mySeries.drop(['a']) b -5 c 7 d 4 dtype: int64","title":"mySeries.drop(['a'])"},{"location":"pandas/pandas/#satr-silme","text":"# df.drop(['2016-07-01', '2016-06-27'])","title":"Sat\u0131r Silme"},{"location":"pandas/pandas/#veri-silme","text":"Not: axis = 1, bir sat\u0131ra de\u011fil bir s\u00fctuna i\u015faret etti\u011fimizi g\u00f6sterir. # df.drop('Volume', axis=1)","title":"Veri Silme"},{"location":"pandas/pandas/#veri-tiplerini-cevirme","text":"","title":"Veri Tiplerini \u00c7evirme"},{"location":"pandas/pandas/#dfdtypes","text":"Bu kod hangi s\u00fctunlar\u0131n hangi veri tipini oldu\u011funu g\u00f6sterir. Boolean, int, float, object (String), tarih ve kategorik. df.dtypes Date object Open float64 High float64 Low float64 Close float64 Volume int64 Adj Close float64 Difference float64 dtype: object","title":"df.dtypes"},{"location":"pandas/pandas/#dfcolumnname-dfcolumnnameastypedatatype","text":"Bu kod, belirledi\u011fimiz s\u00fctunu, belirledi\u011fimiz veri t\u00fcr\u00fcne d\u00f6n\u00fc\u015ft\u00fcr\u00fcr. df.Date.astype('category').dtypes # OR Convert Datetime # df.Date= pd.to_datetime(df.Date) CategoricalDtype(categories=['2008-08-08', '2008-08-11', '2008-08-12', '2008-08-13', '2008-08-14', '2008-08-15', '2008-08-18', '2008-08-19', '2008-08-20', '2008-08-21', ... '2016-06-20', '2016-06-21', '2016-06-22', '2016-06-23', '2016-06-24', '2016-06-27', '2016-06-28', '2016-06-29', '2016-06-30', '2016-07-01'], ordered=False)","title":"df['columnName'] = df['columnName'].astype('dataType')"},{"location":"pandas/pandas/#pdmeltframedataframenameid_vars-columnname-value_vars-columnname","text":"Bu kod biraz kafa kar\u0131\u015ft\u0131r\u0131c\u0131, bu nedenle \u00f6rne\u011fe bakal\u0131m. df_new = df.head() melted = pd.melt(frame=df_new,id_vars = 'Date', value_vars= ['Low']) melted .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date variable value 0 2016-07-01 Low 17916.910156 1 2016-06-30 Low 17711.800781 2 2016-06-29 Low 17456.019531 3 2016-06-28 Low 17190.509766 4 2016-06-27 Low 17063.080078","title":"pd.melt(frame=dataFrameName,id_vars = 'columnName', value_vars= ['columnName'])"},{"location":"pandas/pandas/#apply-fonksiyonu","text":"","title":"Apply Fonksiyonu"},{"location":"pandas/pandas/#yontem-1","text":"def examples(x): #create a function return x*2 df.Open.apply(examples).head() #use the function with apply() index_name 0 35848.480468 1 35425.519532 2 34912.039062 3 34381.019532 4 34710.421876 Name: Open, dtype: float64","title":"Y\u00f6ntem 1"},{"location":"pandas/pandas/#yontem-2","text":"df.Open.apply(lambda x: x*2).head() index_name 0 35848.480468 1 35425.519532 2 34912.039062 3 34381.019532 4 34710.421876 Name: Open, dtype: float64","title":"Y\u00f6ntem 2"},{"location":"pandas/pandas/#faydal-kodlar","text":"# pd.get_option OR pd.set_option # pd.reset_option(\"^display\") # pd.reset_option(\"display.max_rows\") # pd.get_option(\"display.max_rows\") # pd.set_option(\"max_r\",102) -> G\u00f6sterilecek maksimum sat\u0131r say\u0131s\u0131n\u0131 belirtir. # pd.options.display.max_rows = 999 -> G\u00f6sterilecek maksimum sat\u0131r say\u0131s\u0131n\u0131 belirtir. # pd.get_option(\"display.max_columns\") # pd.options.display.max_columns = 999 -> G\u00f6r\u00fcnt\u00fclenecek maksimum s\u00fctun say\u0131s\u0131n\u0131 belirtir. # pd.set_option('display.width', 300) # pd.set_option('display.max_columns', 300) -> G\u00f6sterilecek maksimum sat\u0131r say\u0131s\u0131n\u0131 belirtir. # pd.set_option('display.max_colwidth', 500) -> G\u00f6r\u00fcnt\u00fclenecek maksimum s\u00fctun say\u0131s\u0131n\u0131 belirtir. # pd.get_option('max_colwidth') # pd.set_option('max_colwidth',40) # pd.reset_option('max_colwidth') # pd.get_option('max_info_columns') # pd.set_option('max_info_columns', 11) # pd.reset_option('max_info_columns') # pd.get_option('max_info_rows') # pd.set_option('max_info_rows', 11) # pd.reset_option('max_info_rows') # pd.set_option('precision',7) -> \u00c7\u0131kt\u0131 g\u00f6r\u00fcnt\u00fcleme hassasiyetini ondal\u0131k basamak cinsinden ayarlar. Bu sadece bir \u00f6neri. # OR # pd.set_option('display.precision',3) # pd.set_option('chop_threshold', 0) -> Bir DataFrame dizisi g\u00f6r\u00fcnt\u00fcledi\u011finde Pandas'\u0131n s\u0131f\u0131ra ne kadar d\u00f6nd\u00fc\u011f\u00fcn\u00fc belirler. Bu ayar, numaran\u0131n kaydedildi\u011fi hassasiyeti de\u011fi\u015ftirmez. # pd.reset_option('chop_threshold') Son G\u00fcncelleme: 28 Aral\u0131k 2019 - Cumartesi","title":"Faydal\u0131 Kodlar"},{"location":"python/degiskenler/","text":"De\u011fi\u015fkenler De\u011fi\u015fkenler b\u00fct\u00fcn programlama dillerinde olmazsa olmazd\u0131r. De\u011fi\u015fken tan\u0131mlarken baz\u0131 kurallar mevcuttur. De\u011fi\u015fken adlar\u0131 bir say\u0131 ile ba\u015flayamaz. Yani \u015fu kullan\u0131m yanl\u0131\u015ft\u0131r: 3_kilo = \"5 TL\" File \"<ipython-input-1-bc29f79e52e9>\", line 1 3_kilo = \"5 TL\" ^ SyntaxError: invalid token De\u011fi\u015fken adlar\u0131 aritmetik i\u015fle\u00e7lerle ba\u015flayamaz. Yani \u015fu kullan\u0131m yanl\u0131\u015ft\u0131r: +de\u011fer = 4568 File \"<ipython-input-2-53e025623b01>\", line 1 +de\u011fer = 4568 ^ SyntaxError: can't assign to operator De\u011fi\u015fken adlar\u0131 ya bir alfabe harfiyle ya da _ i\u015faretiyle ba\u015flamal\u0131d\u0131r: _deger = 4568 deger = 4568 De\u011fi\u015fken adlar\u0131 i\u00e7inde T\u00fcrk\u00e7e karakterler kullanabilirsiniz. Ancak ileride beklenmedik uyum sorunlar\u0131 \u00e7\u0131kmas\u0131 ihtimaline kar\u015f\u0131 de\u011fi\u015fken adlar\u0131nda T\u00fcrk\u00e7e karakter kullanmaktan ka\u00e7\u0131nmak isteyebilirsiniz. Python i\u00e7in anahtar veya \u00f6zel olan kelimeleri de\u011fi\u015fken ad\u0131 olarak kullanamazs\u0131n\u0131z. Bu adlar a\u015fa\u011f\u0131da listelenmi\u015ftir. import keyword keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] type Fonksiyonu Bu fonksiyonu herhangi bir nesnenin hangi veri tipinde oldu\u011funu \u00f6\u011frenebilmemizi sa\u011flar. print(type(\"Abdullah\")) print(type(1)) print(type(5.0)) print(type(True)) <class 'str'> <class 'int'> <class 'float'> <class 'bool'> len Fonksiyonu len fonksiyonu ile bir verinin uzunlu\u011funu h\u0131zl\u0131ca \u00f6\u011frenebilirsiniz. len(\"Abdullah\") 8 isim = \"Abdullah\" len(isim) 8 Son G\u00fcncelleme: 14 Aral\u0131k 2019 - Cumartesi","title":"De\u011fi\u015fkenler"},{"location":"python/degiskenler/#degiskenler","text":"De\u011fi\u015fkenler b\u00fct\u00fcn programlama dillerinde olmazsa olmazd\u0131r. De\u011fi\u015fken tan\u0131mlarken baz\u0131 kurallar mevcuttur. De\u011fi\u015fken adlar\u0131 bir say\u0131 ile ba\u015flayamaz. Yani \u015fu kullan\u0131m yanl\u0131\u015ft\u0131r: 3_kilo = \"5 TL\" File \"<ipython-input-1-bc29f79e52e9>\", line 1 3_kilo = \"5 TL\" ^ SyntaxError: invalid token De\u011fi\u015fken adlar\u0131 aritmetik i\u015fle\u00e7lerle ba\u015flayamaz. Yani \u015fu kullan\u0131m yanl\u0131\u015ft\u0131r: +de\u011fer = 4568 File \"<ipython-input-2-53e025623b01>\", line 1 +de\u011fer = 4568 ^ SyntaxError: can't assign to operator De\u011fi\u015fken adlar\u0131 ya bir alfabe harfiyle ya da _ i\u015faretiyle ba\u015flamal\u0131d\u0131r: _deger = 4568 deger = 4568 De\u011fi\u015fken adlar\u0131 i\u00e7inde T\u00fcrk\u00e7e karakterler kullanabilirsiniz. Ancak ileride beklenmedik uyum sorunlar\u0131 \u00e7\u0131kmas\u0131 ihtimaline kar\u015f\u0131 de\u011fi\u015fken adlar\u0131nda T\u00fcrk\u00e7e karakter kullanmaktan ka\u00e7\u0131nmak isteyebilirsiniz. Python i\u00e7in anahtar veya \u00f6zel olan kelimeleri de\u011fi\u015fken ad\u0131 olarak kullanamazs\u0131n\u0131z. Bu adlar a\u015fa\u011f\u0131da listelenmi\u015ftir. import keyword keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']","title":"De\u011fi\u015fkenler"},{"location":"python/degiskenler/#type-fonksiyonu","text":"Bu fonksiyonu herhangi bir nesnenin hangi veri tipinde oldu\u011funu \u00f6\u011frenebilmemizi sa\u011flar. print(type(\"Abdullah\")) print(type(1)) print(type(5.0)) print(type(True)) <class 'str'> <class 'int'> <class 'float'> <class 'bool'>","title":"type Fonksiyonu"},{"location":"python/degiskenler/#len-fonksiyonu","text":"len fonksiyonu ile bir verinin uzunlu\u011funu h\u0131zl\u0131ca \u00f6\u011frenebilirsiniz. len(\"Abdullah\") 8 isim = \"Abdullah\" len(isim) 8 Son G\u00fcncelleme: 14 Aral\u0131k 2019 - Cumartesi","title":"len Fonksiyonu"},{"location":"python/islecler/","text":"\u0130\u015fle\u00e7ler Herhangi bir i\u015flemde, i\u015flenenler \u00fczerinde yap\u0131lmas\u0131 \u00f6ng\u00f6r\u00fclen i\u015fi tan\u0131mlayan \u00f6zel damga, damga dizgisi vb. g\u00f6stergeler, \u00f6rn. \u0097 | + | /| | * aritmetiksel, AND | OR | NOT mant\u0131ksal i\u015fle\u00e7ler olarak kullan\u0131l\u0131r. Kaynak Python i\u00e7erisinde farkl\u0131 i\u015fle\u00e7ler bulunmaktad\u0131r. Bunlar; 1. Aritmetik \u0130\u015fle\u00e7ler 2. Kar\u015f\u0131la\u015ft\u0131rma \u0130\u015fle\u00e7leri 3. Bool \u0130\u015fle\u00e7leri 4. De\u011fer Atama \u0130\u015fle\u00e7leri 5. Aitlik \u0130\u015fle\u00e7leri 6. Kimlik \u0130\u015fle\u00e7leri Aritmetik \u0130\u015fle\u00e7ler Aritmetik i\u015fle\u00e7ler, matematiksel i\u015flemler yapabilmemiz sa\u011flayan ara\u00e7lar. \u0130\u015fle\u00e7 \u0130\u015flem + Toplama - \u00c7\u0131karma * \u00c7arpma / B\u00f6lme ** Kuvvet % Mod\u00fcl\u00fcs // Taban B\u00f6lme Aritmetik i\u015fle\u00e7lerle baz\u0131 i\u015flemler yapal\u0131m ve nas\u0131l kullan\u0131ld\u0131klar\u0131n\u0131 \u00f6\u011frenelim. 3-2 1 3*2 6 3+2 5 3/2 1.5 3**2 9 \"Python\" + \"Dili\" 'PythonDili' \"yava\u015f\" * 2 'yava\u015fyava\u015f' \"/\" * 5 '/////' 29 % 4 #Bu i\u015fle\u00e7 bir say\u0131n\u0131n ba\u015fka bir say\u0131ya b\u00f6l\u00fcm\u00fcnde kalan\u0131 vermektedir. 1 30 % 5 0 Bir say\u0131n\u0131n \u00e7ift say\u0131 olup olmad\u0131\u011f\u0131n g\u00f6steren uygulama yapal\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi % 2 == 0: print(\"Girdi\u011finiz say\u0131 bir \u00e7ift say\u0131d\u0131r.\") else: print(\"Girdi\u011finiz say\u0131 \u00e7ift say\u0131 de\u011fildir.\") Bir say\u0131 giriniz: 5 Girdi\u011finiz say\u0131 \u00e7ift say\u0131 de\u011fildir. Kar\u015f\u0131la\u015ft\u0131rma \u0130\u015fle\u00e7leri Kar\u015f\u0131la\u015ft\u0131rma i\u015fle\u00e7leri, ad\u0131nda anla\u015f\u0131ld\u0131\u011f\u0131 \u00fczere kar\u015f\u0131la\u015ft\u0131rma i\u015flemlerini yapabilmemizi sa\u011flayan ara\u00e7lard\u0131r. \u0130\u015fle\u00e7 \u0130\u015flevi == E\u015fittir != E\u015fit De\u011fildir > B\u00fcy\u00fckt\u00fcr < K\u00fc\u00e7\u00fckt\u00fcr >= B\u00fcy\u00fck E\u015fittir <= K\u00fc\u00e7\u00fck E\u015fittir Tabloda bulunan i\u015fle\u00e7lerin hepsini olmasada baz\u0131lar\u0131 i\u00e7in k\u00fc\u00e7\u00fck bir \u00f6rnek ile nas\u0131l kullan\u0131ld\u0131\u011f\u0131na bakal\u0131m. parola = \"11111\" soru = input(\"parolan\u0131z: \") if soru == parola: print(\"do\u011fru parola!\") elif soru != parola: print(\"yanl\u0131\u015f parola!\") parolan\u0131z: 11111 do\u011fru parola! sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 5: print(\"Say\u0131 5'e e\u015fittir.\") elif sayi < 5: print(\"Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") elif sayi > 5: print(\"Say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") Bir say\u0131 giriniz: 5 Say\u0131 5'e e\u015fittir. Bool \u0130\u015fle\u00e7leri Bu i\u015fle\u00e7 bizlere kar\u015f\u0131la\u015ft\u0131r\u0131lan bir nesne ile ilgili iki farkl\u0131 sonu\u00e7 g\u00f6sterir. Bunlar True veya False de\u011ferleridir. Bu yap\u0131n\u0131n nas\u0131l oldu\u011funa bakal\u0131m. 5 == 0 False 5 == 5 True E\u011fer istersek bool() fonksiyonundanda faydalanabiliriz. bool(5 == 0) False Bool i\u015fleci kendi i\u00e7inde \u00fc\u00e7 adet yap\u0131 bulundurmaktad\u0131r. Bunlar: and or not bu yap\u0131lar\u0131 tek tek inceleyelim. and yap\u0131s\u0131 Bu yap\u0131 ve anlam\u0131na gelmektedir. Bu yap\u0131y\u0131 kulland\u0131\u011f\u0131m\u0131z yerde her iki durumunda do\u011fru olmas\u0131 beklenir. \u00d6rnek \u00fczerinde nas\u0131l kullan\u0131ld\u0131\u011f\u0131n\u0131 inceleyelim. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi > 0 and sayi < 5: print(\"Giridi\u011finiz say\u0131 0 ile 5 aras\u0131nda bulunmaktad\u0131r.\") elif sayi > 5 and sayi < 10: print(\"Girdi\u011finiz say\u0131 5 ile 10 aras\u0131nda bulunmaktad\u0131r.\") Bir say\u0131 giriniz: 7 Girdi\u011finiz say\u0131 5 ile 10 aras\u0131nda bulunmaktad\u0131r. or yap\u0131s\u0131 Bu yap\u0131 veya anlam\u0131na gelmektedir. Bu yap\u0131y\u0131 kulland\u0131\u011f\u0131m\u0131z yerde her iki durumdan sadece birisinin do\u011fru olmas\u0131 beklenmektedir. \u00d6rnek \u00fczerinde nas\u0131l kullan\u0131ld\u0131\u011f\u0131n\u0131 inceleyelim. x = int(input(\"Notunuz: \")) if x > 100 or x < 0: print(\"B\u00f6yle bir not yok\") elif x >= 90 and x <= 100: print(\"A ald\u0131n\u0131z.\") elif x >= 80 and x <= 89: print(\"B ald\u0131n\u0131z.\") elif x >= 70 and x <= 79: print(\"C ald\u0131n\u0131z.\") elif x >= 60 and x <= 69: print(\"D ald\u0131n\u0131z.\") elif x >= 0 and x <= 59: print(\"F ald\u0131n\u0131z.\") Notunuz: 99 A ald\u0131n\u0131z. not yap\u0131s\u0131 Bu yap\u0131 de\u011fil anlam\u0131na gelmektedir. Bu yap\u0131y\u0131 kulland\u0131\u011f\u0131m\u0131z yerde durum istedi\u011fimiz duruma e\u015fit de\u011filse gerekli i\u015flemleri yapmaktad\u0131r. parola = input(\"parola: \") if not parola: print(\"Parola bo\u015f b\u0131rak\u0131lamaz!\") else: print(\"Parola dolu.\") parola: Parola bo\u015f b\u0131rak\u0131lamaz! De\u011fer Atama i\u015fle\u00e7leri \u0130\u015fle\u00e7 \u0130\u015flevi = De\u011fer Atama += Topla ve Sonucu Aktar -= \u00c7\u0131kar ve Sonucu Aktar /= B\u00f6l ve Sonucu Aktar *= \u00c7arp ve Sonucu Aktar %= Kalan\u0131 Bul ve Sonucu Aktar **= \u00dcss\u00fcn\u00fc Al ve Sonucu Aktar //= Taban B\u00f6lme \u0130\u015flemini Yap ve Sonucu Aktar Tabloda bulunan i\u015fle\u00e7leri tek tek inceleyelim. a = 5 #de\u011fer atama c = 5 c += 5 #toplama i\u015flemi print(c) 10 #Yukar\u0131da yapt\u0131\u011f\u0131m\u0131z toplama i\u015fleminin e\u015f de\u011feri. b = 5 b = b + 5 print(b) 10 d = 2 d -= 1 #\u00e7\u0131karma i\u015flemi print(d) 1 e = 4 e /= 3 #b\u00f6lme i\u015flemi print(e) 1.3333333333333333 f = 5 f *= 2 #\u00e7arpma i\u015flemi print(f) 10 g = 10 g %= 3 print(g) 1 h = 2 h **= 3 print(h) 8 k = 3 k //= 2 print(k) 1 Aitlik \u0130\u015fle\u00e7leri Aitlik i\u015fle\u00e7leri, bir karakter dizisi ya da say\u0131n\u0131n, herhangi bir veri tipi i\u00e7inde bulunup bulunmad\u0131\u011f\u0131n\u0131 sorgulamam\u0131z\u0131 sa\u011flayan i\u015fle\u00e7lerdir. rakamlar = \"12345\" \"1\" in rakamlar True \"7\" in rakamlar False Kimlik \u0130\u015fle\u00e7leri Python\u2019da her \u015feyin (ya da ba\u015fka bir deyi\u015fle her nesnenin) bir kimlik numaras\u0131 (identity) vard\u0131r. Kabaca s\u00f6ylemek gerekirse, bu kimlik numaras\u0131 denen \u015fey esas\u0131nda o nesnenin bellekteki adresini g\u00f6sterir. Bu kimlik numaras\u0131na id() isimli fonksiyon ile eri\u015febiliriz. m = 5 id(m) 4480324880 n = 20 id(n) 4480325360 Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"\u0130\u015fle\u00e7ler"},{"location":"python/islecler/#islecler","text":"Herhangi bir i\u015flemde, i\u015flenenler \u00fczerinde yap\u0131lmas\u0131 \u00f6ng\u00f6r\u00fclen i\u015fi tan\u0131mlayan \u00f6zel damga, damga dizgisi vb. g\u00f6stergeler, \u00f6rn. \u0097 | + | /| | * aritmetiksel, AND | OR | NOT mant\u0131ksal i\u015fle\u00e7ler olarak kullan\u0131l\u0131r. Kaynak Python i\u00e7erisinde farkl\u0131 i\u015fle\u00e7ler bulunmaktad\u0131r. Bunlar; 1. Aritmetik \u0130\u015fle\u00e7ler 2. Kar\u015f\u0131la\u015ft\u0131rma \u0130\u015fle\u00e7leri 3. Bool \u0130\u015fle\u00e7leri 4. De\u011fer Atama \u0130\u015fle\u00e7leri 5. Aitlik \u0130\u015fle\u00e7leri 6. Kimlik \u0130\u015fle\u00e7leri","title":"\u0130\u015fle\u00e7ler"},{"location":"python/islecler/#aritmetik-islecler","text":"Aritmetik i\u015fle\u00e7ler, matematiksel i\u015flemler yapabilmemiz sa\u011flayan ara\u00e7lar. \u0130\u015fle\u00e7 \u0130\u015flem + Toplama - \u00c7\u0131karma * \u00c7arpma / B\u00f6lme ** Kuvvet % Mod\u00fcl\u00fcs // Taban B\u00f6lme Aritmetik i\u015fle\u00e7lerle baz\u0131 i\u015flemler yapal\u0131m ve nas\u0131l kullan\u0131ld\u0131klar\u0131n\u0131 \u00f6\u011frenelim. 3-2 1 3*2 6 3+2 5 3/2 1.5 3**2 9 \"Python\" + \"Dili\" 'PythonDili' \"yava\u015f\" * 2 'yava\u015fyava\u015f' \"/\" * 5 '/////' 29 % 4 #Bu i\u015fle\u00e7 bir say\u0131n\u0131n ba\u015fka bir say\u0131ya b\u00f6l\u00fcm\u00fcnde kalan\u0131 vermektedir. 1 30 % 5 0 Bir say\u0131n\u0131n \u00e7ift say\u0131 olup olmad\u0131\u011f\u0131n g\u00f6steren uygulama yapal\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi % 2 == 0: print(\"Girdi\u011finiz say\u0131 bir \u00e7ift say\u0131d\u0131r.\") else: print(\"Girdi\u011finiz say\u0131 \u00e7ift say\u0131 de\u011fildir.\") Bir say\u0131 giriniz: 5 Girdi\u011finiz say\u0131 \u00e7ift say\u0131 de\u011fildir.","title":"Aritmetik \u0130\u015fle\u00e7ler"},{"location":"python/islecler/#karslastrma-islecleri","text":"Kar\u015f\u0131la\u015ft\u0131rma i\u015fle\u00e7leri, ad\u0131nda anla\u015f\u0131ld\u0131\u011f\u0131 \u00fczere kar\u015f\u0131la\u015ft\u0131rma i\u015flemlerini yapabilmemizi sa\u011flayan ara\u00e7lard\u0131r. \u0130\u015fle\u00e7 \u0130\u015flevi == E\u015fittir != E\u015fit De\u011fildir > B\u00fcy\u00fckt\u00fcr < K\u00fc\u00e7\u00fckt\u00fcr >= B\u00fcy\u00fck E\u015fittir <= K\u00fc\u00e7\u00fck E\u015fittir Tabloda bulunan i\u015fle\u00e7lerin hepsini olmasada baz\u0131lar\u0131 i\u00e7in k\u00fc\u00e7\u00fck bir \u00f6rnek ile nas\u0131l kullan\u0131ld\u0131\u011f\u0131na bakal\u0131m. parola = \"11111\" soru = input(\"parolan\u0131z: \") if soru == parola: print(\"do\u011fru parola!\") elif soru != parola: print(\"yanl\u0131\u015f parola!\") parolan\u0131z: 11111 do\u011fru parola! sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 5: print(\"Say\u0131 5'e e\u015fittir.\") elif sayi < 5: print(\"Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") elif sayi > 5: print(\"Say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") Bir say\u0131 giriniz: 5 Say\u0131 5'e e\u015fittir.","title":"Kar\u015f\u0131la\u015ft\u0131rma \u0130\u015fle\u00e7leri"},{"location":"python/islecler/#bool-islecleri","text":"Bu i\u015fle\u00e7 bizlere kar\u015f\u0131la\u015ft\u0131r\u0131lan bir nesne ile ilgili iki farkl\u0131 sonu\u00e7 g\u00f6sterir. Bunlar True veya False de\u011ferleridir. Bu yap\u0131n\u0131n nas\u0131l oldu\u011funa bakal\u0131m. 5 == 0 False 5 == 5 True E\u011fer istersek bool() fonksiyonundanda faydalanabiliriz. bool(5 == 0) False Bool i\u015fleci kendi i\u00e7inde \u00fc\u00e7 adet yap\u0131 bulundurmaktad\u0131r. Bunlar: and or not bu yap\u0131lar\u0131 tek tek inceleyelim.","title":"Bool \u0130\u015fle\u00e7leri"},{"location":"python/islecler/#and-yaps","text":"Bu yap\u0131 ve anlam\u0131na gelmektedir. Bu yap\u0131y\u0131 kulland\u0131\u011f\u0131m\u0131z yerde her iki durumunda do\u011fru olmas\u0131 beklenir. \u00d6rnek \u00fczerinde nas\u0131l kullan\u0131ld\u0131\u011f\u0131n\u0131 inceleyelim. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi > 0 and sayi < 5: print(\"Giridi\u011finiz say\u0131 0 ile 5 aras\u0131nda bulunmaktad\u0131r.\") elif sayi > 5 and sayi < 10: print(\"Girdi\u011finiz say\u0131 5 ile 10 aras\u0131nda bulunmaktad\u0131r.\") Bir say\u0131 giriniz: 7 Girdi\u011finiz say\u0131 5 ile 10 aras\u0131nda bulunmaktad\u0131r.","title":"and yap\u0131s\u0131"},{"location":"python/islecler/#or-yaps","text":"Bu yap\u0131 veya anlam\u0131na gelmektedir. Bu yap\u0131y\u0131 kulland\u0131\u011f\u0131m\u0131z yerde her iki durumdan sadece birisinin do\u011fru olmas\u0131 beklenmektedir. \u00d6rnek \u00fczerinde nas\u0131l kullan\u0131ld\u0131\u011f\u0131n\u0131 inceleyelim. x = int(input(\"Notunuz: \")) if x > 100 or x < 0: print(\"B\u00f6yle bir not yok\") elif x >= 90 and x <= 100: print(\"A ald\u0131n\u0131z.\") elif x >= 80 and x <= 89: print(\"B ald\u0131n\u0131z.\") elif x >= 70 and x <= 79: print(\"C ald\u0131n\u0131z.\") elif x >= 60 and x <= 69: print(\"D ald\u0131n\u0131z.\") elif x >= 0 and x <= 59: print(\"F ald\u0131n\u0131z.\") Notunuz: 99 A ald\u0131n\u0131z.","title":"or yap\u0131s\u0131"},{"location":"python/islecler/#not-yaps","text":"Bu yap\u0131 de\u011fil anlam\u0131na gelmektedir. Bu yap\u0131y\u0131 kulland\u0131\u011f\u0131m\u0131z yerde durum istedi\u011fimiz duruma e\u015fit de\u011filse gerekli i\u015flemleri yapmaktad\u0131r. parola = input(\"parola: \") if not parola: print(\"Parola bo\u015f b\u0131rak\u0131lamaz!\") else: print(\"Parola dolu.\") parola: Parola bo\u015f b\u0131rak\u0131lamaz!","title":"not yap\u0131s\u0131"},{"location":"python/islecler/#deger-atama-islecleri","text":"\u0130\u015fle\u00e7 \u0130\u015flevi = De\u011fer Atama += Topla ve Sonucu Aktar -= \u00c7\u0131kar ve Sonucu Aktar /= B\u00f6l ve Sonucu Aktar *= \u00c7arp ve Sonucu Aktar %= Kalan\u0131 Bul ve Sonucu Aktar **= \u00dcss\u00fcn\u00fc Al ve Sonucu Aktar //= Taban B\u00f6lme \u0130\u015flemini Yap ve Sonucu Aktar Tabloda bulunan i\u015fle\u00e7leri tek tek inceleyelim. a = 5 #de\u011fer atama c = 5 c += 5 #toplama i\u015flemi print(c) 10 #Yukar\u0131da yapt\u0131\u011f\u0131m\u0131z toplama i\u015fleminin e\u015f de\u011feri. b = 5 b = b + 5 print(b) 10 d = 2 d -= 1 #\u00e7\u0131karma i\u015flemi print(d) 1 e = 4 e /= 3 #b\u00f6lme i\u015flemi print(e) 1.3333333333333333 f = 5 f *= 2 #\u00e7arpma i\u015flemi print(f) 10 g = 10 g %= 3 print(g) 1 h = 2 h **= 3 print(h) 8 k = 3 k //= 2 print(k) 1","title":"De\u011fer Atama i\u015fle\u00e7leri"},{"location":"python/islecler/#aitlik-islecleri","text":"Aitlik i\u015fle\u00e7leri, bir karakter dizisi ya da say\u0131n\u0131n, herhangi bir veri tipi i\u00e7inde bulunup bulunmad\u0131\u011f\u0131n\u0131 sorgulamam\u0131z\u0131 sa\u011flayan i\u015fle\u00e7lerdir. rakamlar = \"12345\" \"1\" in rakamlar True \"7\" in rakamlar False","title":"Aitlik \u0130\u015fle\u00e7leri"},{"location":"python/islecler/#kimlik-islecleri","text":"Python\u2019da her \u015feyin (ya da ba\u015fka bir deyi\u015fle her nesnenin) bir kimlik numaras\u0131 (identity) vard\u0131r. Kabaca s\u00f6ylemek gerekirse, bu kimlik numaras\u0131 denen \u015fey esas\u0131nda o nesnenin bellekteki adresini g\u00f6sterir. Bu kimlik numaras\u0131na id() isimli fonksiyon ile eri\u015febiliriz. m = 5 id(m) 4480324880 n = 20 id(n) 4480325360 Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"Kimlik \u0130\u015fle\u00e7leri"},{"location":"python/kacis_dizileri/","text":"Ka\u00e7\u0131\u015f Dizileri Ters Taksim (/) Bu i\u015faret karakter dizilerini tan\u0131mlarken olu\u015fabilecek hatalardan ka\u00e7mam\u0131z\u0131 sa\u011flar. print('\u0130stanbul\\'un 5 g\u00fcnl\u00fck hava durumu tahmini') \u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini Sat\u0131r Ba\u015f\u0131 (/n) print(\"birinci sat\u0131r\\nikinci sat\u0131r\\n\u00fc\u00e7\u00fcnc\u00fc sat\u0131r\") birinci sat\u0131r ikinci sat\u0131r \u00fc\u00e7\u00fcnc\u00fc sat\u0131r Sekme (/t) /t ka\u00e7\u0131\u015f dizisi sanki Tab (sekme) tu\u015funa bas\u0131lm\u0131\u015f gibi bir etki olu\u015fturur. print(\"abc\\tdef\") abc def print(\"bir\", \"iki\", \"\u00fc\u00e7\", sep=\"\\t\") bir iki \u00fc\u00e7 print(*\"123456789\", sep=\"\\t\") 1 2 3 4 5 6 7 8 9 Zil Sesi (/a) \\ i\u015fareti \u2018a\u2019 harfiyle birle\u015ferek !bip! benzeri bir zil sesi \u00fcretilmesini sa\u011flar. print(\"\\a\") \u0007 Ayn\u0131 Sat\u0131r Ba\u015f\u0131 (/r) Bu ka\u00e7\u0131\u015f dizisi, bir karakter dizisinde ayn\u0131 sat\u0131r\u0131n en ba\u015f\u0131na d\u00f6n\u00fclmesini sa\u011flar. print(\"Merhaba\\rD\u00fcnya\") D\u00fcnya Burada, \u201cMerhaba\u201d karakter dizisi ekrana yazd\u0131r\u0131ld\u0131ktan sonra \\r ka\u00e7\u0131\u015f dizisinin etkisiyle sat\u0131r ba\u015f\u0131na d\u00f6n\u00fcl\u00fcyor ve bu ka\u00e7\u0131\u015f dizisinden sonra gelen \u201cD\u00fcnya\u201d karakter dizisi \u201cMerhaba\u201d karakter dizisinin \u00fczerine yaz\u0131yor. Tabii \u201cD\u00fcnya\u201d karakter dizisi i\u00e7inde 5 karakter, \u201cMerhaba\u201d karakter dizisi i\u00e7inde ise 7 karakter oldu\u011fu i\u00e7in, \u201cMerhaba\u201d karakter dizisinin son iki karakteri (\u201cba\u201d) d\u0131\u015farda kal\u0131yor. B\u00f6ylece ortaya \u201cD\u00fcnyaba\u201d gibi bir \u015fey \u00e7\u0131k\u0131yor. \u0130mle\u00e7 Kayd\u0131rma (/b) \\b ka\u00e7\u0131\u015f dizisinin g\u00f6revi, imleci o anki konumundan sola kayd\u0131rmakt\u0131r. print(\"yahoo.com\\b.uk\") yahoo.com\b.uk K\u00fc\u00e7\u00fck Unicode (/u) Bu ka\u00e7\u0131\u015f dizisi UNICODE sistemindeki her bir kodun konumunu g\u00f6sterir. '\\u0130' '\u0130' B\u00fcy\u00fck Unicode (/U) UNICODE kod konumlar\u0131n\u0131 g\u00f6sterebilmemizi sa\u011flar. '\\U00000131' '\u0131' Uzun Ad (/N) Karakterleri UNICODE adlar\u0131na g\u00f6re kullanabilmemizi sa\u011flar. print(\"\\N{LATIN SMALL LETTER A}\") a Onalt\u0131l\u0131 Karakter (\\x) Onalt\u0131l\u0131 sistemdeki bir say\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131n\u0131 g\u00f6sterebilmemizi sa\u011flar. \"\\x41\" 'A' Etkisizle\u015ftirme (r) Karakter dizisi i\u00e7inde ka\u00e7\u0131\u015f dizilerini kullanabilmemizi sa\u011flar. print(r\"Kurulum dizini: C:\\aylar\\nisan\\toplam masraf\") Kurulum dizini: C:\\aylar\\nisan\\toplam masraf","title":"Ka\u00e7\u0131\u015f Dizileri"},{"location":"python/kacis_dizileri/#kacs-dizileri","text":"","title":"Ka\u00e7\u0131\u015f Dizileri"},{"location":"python/kacis_dizileri/#ters-taksim","text":"Bu i\u015faret karakter dizilerini tan\u0131mlarken olu\u015fabilecek hatalardan ka\u00e7mam\u0131z\u0131 sa\u011flar. print('\u0130stanbul\\'un 5 g\u00fcnl\u00fck hava durumu tahmini') \u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini","title":"Ters Taksim (/)"},{"location":"python/kacis_dizileri/#satr-bas-n","text":"print(\"birinci sat\u0131r\\nikinci sat\u0131r\\n\u00fc\u00e7\u00fcnc\u00fc sat\u0131r\") birinci sat\u0131r ikinci sat\u0131r \u00fc\u00e7\u00fcnc\u00fc sat\u0131r","title":"Sat\u0131r Ba\u015f\u0131 (/n)"},{"location":"python/kacis_dizileri/#sekme-t","text":"/t ka\u00e7\u0131\u015f dizisi sanki Tab (sekme) tu\u015funa bas\u0131lm\u0131\u015f gibi bir etki olu\u015fturur. print(\"abc\\tdef\") abc def print(\"bir\", \"iki\", \"\u00fc\u00e7\", sep=\"\\t\") bir iki \u00fc\u00e7 print(*\"123456789\", sep=\"\\t\") 1 2 3 4 5 6 7 8 9","title":"Sekme (/t)"},{"location":"python/kacis_dizileri/#zil-sesi-a","text":"\\ i\u015fareti \u2018a\u2019 harfiyle birle\u015ferek !bip! benzeri bir zil sesi \u00fcretilmesini sa\u011flar. print(\"\\a\") \u0007","title":"Zil Sesi (/a)"},{"location":"python/kacis_dizileri/#ayn-satr-bas-r","text":"Bu ka\u00e7\u0131\u015f dizisi, bir karakter dizisinde ayn\u0131 sat\u0131r\u0131n en ba\u015f\u0131na d\u00f6n\u00fclmesini sa\u011flar. print(\"Merhaba\\rD\u00fcnya\") D\u00fcnya Burada, \u201cMerhaba\u201d karakter dizisi ekrana yazd\u0131r\u0131ld\u0131ktan sonra \\r ka\u00e7\u0131\u015f dizisinin etkisiyle sat\u0131r ba\u015f\u0131na d\u00f6n\u00fcl\u00fcyor ve bu ka\u00e7\u0131\u015f dizisinden sonra gelen \u201cD\u00fcnya\u201d karakter dizisi \u201cMerhaba\u201d karakter dizisinin \u00fczerine yaz\u0131yor. Tabii \u201cD\u00fcnya\u201d karakter dizisi i\u00e7inde 5 karakter, \u201cMerhaba\u201d karakter dizisi i\u00e7inde ise 7 karakter oldu\u011fu i\u00e7in, \u201cMerhaba\u201d karakter dizisinin son iki karakteri (\u201cba\u201d) d\u0131\u015farda kal\u0131yor. B\u00f6ylece ortaya \u201cD\u00fcnyaba\u201d gibi bir \u015fey \u00e7\u0131k\u0131yor.","title":"Ayn\u0131 Sat\u0131r Ba\u015f\u0131 (/r)"},{"location":"python/kacis_dizileri/#imlec-kaydrma-b","text":"\\b ka\u00e7\u0131\u015f dizisinin g\u00f6revi, imleci o anki konumundan sola kayd\u0131rmakt\u0131r. print(\"yahoo.com\\b.uk\") yahoo.com\b.uk","title":"\u0130mle\u00e7 Kayd\u0131rma (/b)"},{"location":"python/kacis_dizileri/#kucuk-unicode-u","text":"Bu ka\u00e7\u0131\u015f dizisi UNICODE sistemindeki her bir kodun konumunu g\u00f6sterir. '\\u0130' '\u0130'","title":"K\u00fc\u00e7\u00fck Unicode (/u)"},{"location":"python/kacis_dizileri/#buyuk-unicode-u","text":"UNICODE kod konumlar\u0131n\u0131 g\u00f6sterebilmemizi sa\u011flar. '\\U00000131' '\u0131'","title":"B\u00fcy\u00fck Unicode (/U)"},{"location":"python/kacis_dizileri/#uzun-ad-n","text":"Karakterleri UNICODE adlar\u0131na g\u00f6re kullanabilmemizi sa\u011flar. print(\"\\N{LATIN SMALL LETTER A}\") a","title":"Uzun Ad (/N)"},{"location":"python/kacis_dizileri/#onaltl-karakter-x","text":"Onalt\u0131l\u0131 sistemdeki bir say\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131n\u0131 g\u00f6sterebilmemizi sa\u011flar. \"\\x41\" 'A'","title":"Onalt\u0131l\u0131 Karakter (\\x)"},{"location":"python/kacis_dizileri/#etkisizlestirme-r","text":"Karakter dizisi i\u00e7inde ka\u00e7\u0131\u015f dizilerini kullanabilmemizi sa\u011flar. print(r\"Kurulum dizini: C:\\aylar\\nisan\\toplam masraf\") Kurulum dizini: C:\\aylar\\nisan\\toplam masraf","title":"Etkisizle\u015ftirme (r)"},{"location":"python/kosullu_durumlar/","text":"Ko\u015fullu Durumlar Ko\u015fullu Duumlar, geli\u015ftirdi\u011fimiz yaz\u0131l\u0131mda baz\u0131 filtrelemeler yapmam\u0131z\u0131 veya belirli bir ko\u015ful belirleyip ona g\u00f6re davranmas\u0131n\u0131 sa\u011flayabiliriz. Bunun i\u00e7in python'da bulunan ko\u015fullar\u0131 inceleyelim. Ko\u015ful Deyimleri \u0130f Python programlama dilinde ko\u015fullu durumlar\u0131 belirtmek i\u00e7in \u00fc\u00e7 adet deyimden faydalan\u0131r\u0131z: if elif else if deyimi ile ba\u015flayal\u0131m. a = 10 if a > 5: print(\"Say\u0131 10'dan b\u00fcy\u00fckt\u00fcr.\") Say\u0131 10'dan b\u00fcy\u00fckt\u00fcr. if deyimi >(b\u00fcy\u00fckt\u00fcr) i\u015faretinin haricinde farkl\u0131 i\u015faretlerde almaktad\u0131r. \u0130\u015fle\u00e7 Anlam\u0131 > b\u00fcy\u00fckt\u00fcr < k\u00fc\u00e7\u00fckt\u00fcr >= b\u00fcy\u00fck e\u015fittir <= k\u00fc\u00e7\u00fck e\u015fittir == e\u015fittir != e\u015fit de\u011fildir Kullan\u0131c\u0131dan bilgi alarak if deyimini kullanal\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi < 5: print(\"say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") if sayi > 5: print(\"say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") if sayi == 5: print(\"say\u0131 5'e e\u015fittir.\") Bir say\u0131 giriniz: 5 say\u0131 5'e e\u015fittir. elif elif, bir ba\u015fka ko\u015ful deyimidir. Nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 a\u015fa\u011f\u0131da bulunan \u00f6rne\u011fi incleyerek anlayal\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 5: print(\"say\u0131 5'e e\u015fittir.\") elif sayi < 5: print(\"say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") elif sayi < 10: print(\"say\u0131 10'dan k\u00fc\u00e7\u00fckt\u00fcr.\") elif sayi > 5: print(\"say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") Bir say\u0131 giriniz: 1 say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Yukar\u0131da yazd\u0131\u011f\u0131m\u0131z \u00f6rne\u011fi hepsi if olacak \u015fekilde yazal\u0131m ve iki sonucuda kar\u015f\u0131la\u015ft\u0131ral\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 5: print(\"say\u0131 5'e e\u015fittir.\") if sayi < 5: print(\"say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") if sayi < 10: print(\"say\u0131 10'dan k\u00fc\u00e7\u00fckt\u00fcr.\") if sayi > 5: print(\"say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") Bir say\u0131 giriniz: 1 say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. say\u0131 10'dan k\u00fc\u00e7\u00fckt\u00fcr. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi elif ko\u015fulunu kullanarak yazd\u0131\u011f\u0131m\u0131z zaman girmi\u015f oldu\u011fumuz de\u011fer hem 5 hem de 10 de\u011ferinden k\u00fc\u00e7\u00fck oldu\u011fu halde sadece 5'ten k\u00fc\u00e7\u00fckt\u00fcr dedi. Yani elif de\u011feri kendisinden sonraki ba\u015fka ko\u015ful \u00e7al\u0131\u015facak dahi olsa o ko\u015fula hi\u00e7 u\u011fram\u0131yor. Ayn\u0131 program\u0131 if de\u011ferini kulland\u0131\u011f\u0131m\u0131z zaman hem 5'ten k\u00fc\u00e7\u00fckt\u00fcr hem de 10'dan k\u00fc\u00e7\u00fckt\u00fcr yazd\u0131. Bu da bizlere if ve elif ko\u015fullar\u0131n\u0131n nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131 hakk\u0131nda bilgi veriyor. else else ko\u015fullu deyimi yukar\u0131da bahsetti\u011fimiz ko\u015fullu deyimlerden biraz farkl\u0131 \u00e7al\u0131\u015fmaktad\u0131r. Nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 bir \u00f6rnek \u00fczerinde inceleyelim. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 1: print(\"Bildiniz.\") else: print(\"Tekrar deneyiniz.\") Bir say\u0131 giriniz: 0 Tekrar deneyiniz. G\u00f6rm\u00fc\u015f oldu\u011funuz gibi e\u011fer yazm\u0131\u015f oldu\u011fumuz ko\u015ful sa\u011flanmad\u0131\u011f\u0131 zaman else durumu \u00e7al\u0131\u015fmaktad\u0131r. Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"Ko\u015fullu Durumlar"},{"location":"python/kosullu_durumlar/#kosullu-durumlar","text":"Ko\u015fullu Duumlar, geli\u015ftirdi\u011fimiz yaz\u0131l\u0131mda baz\u0131 filtrelemeler yapmam\u0131z\u0131 veya belirli bir ko\u015ful belirleyip ona g\u00f6re davranmas\u0131n\u0131 sa\u011flayabiliriz. Bunun i\u00e7in python'da bulunan ko\u015fullar\u0131 inceleyelim.","title":"Ko\u015fullu Durumlar"},{"location":"python/kosullu_durumlar/#kosul-deyimleri","text":"","title":"Ko\u015ful Deyimleri"},{"location":"python/kosullu_durumlar/#if","text":"Python programlama dilinde ko\u015fullu durumlar\u0131 belirtmek i\u00e7in \u00fc\u00e7 adet deyimden faydalan\u0131r\u0131z: if elif else if deyimi ile ba\u015flayal\u0131m. a = 10 if a > 5: print(\"Say\u0131 10'dan b\u00fcy\u00fckt\u00fcr.\") Say\u0131 10'dan b\u00fcy\u00fckt\u00fcr. if deyimi >(b\u00fcy\u00fckt\u00fcr) i\u015faretinin haricinde farkl\u0131 i\u015faretlerde almaktad\u0131r. \u0130\u015fle\u00e7 Anlam\u0131 > b\u00fcy\u00fckt\u00fcr < k\u00fc\u00e7\u00fckt\u00fcr >= b\u00fcy\u00fck e\u015fittir <= k\u00fc\u00e7\u00fck e\u015fittir == e\u015fittir != e\u015fit de\u011fildir Kullan\u0131c\u0131dan bilgi alarak if deyimini kullanal\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi < 5: print(\"say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") if sayi > 5: print(\"say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") if sayi == 5: print(\"say\u0131 5'e e\u015fittir.\") Bir say\u0131 giriniz: 5 say\u0131 5'e e\u015fittir.","title":"\u0130f"},{"location":"python/kosullu_durumlar/#elif","text":"elif, bir ba\u015fka ko\u015ful deyimidir. Nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 a\u015fa\u011f\u0131da bulunan \u00f6rne\u011fi incleyerek anlayal\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 5: print(\"say\u0131 5'e e\u015fittir.\") elif sayi < 5: print(\"say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") elif sayi < 10: print(\"say\u0131 10'dan k\u00fc\u00e7\u00fckt\u00fcr.\") elif sayi > 5: print(\"say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") Bir say\u0131 giriniz: 1 say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Yukar\u0131da yazd\u0131\u011f\u0131m\u0131z \u00f6rne\u011fi hepsi if olacak \u015fekilde yazal\u0131m ve iki sonucuda kar\u015f\u0131la\u015ft\u0131ral\u0131m. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 5: print(\"say\u0131 5'e e\u015fittir.\") if sayi < 5: print(\"say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") if sayi < 10: print(\"say\u0131 10'dan k\u00fc\u00e7\u00fckt\u00fcr.\") if sayi > 5: print(\"say\u0131 5'ten b\u00fcy\u00fckt\u00fcr.\") Bir say\u0131 giriniz: 1 say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. say\u0131 10'dan k\u00fc\u00e7\u00fckt\u00fcr. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi elif ko\u015fulunu kullanarak yazd\u0131\u011f\u0131m\u0131z zaman girmi\u015f oldu\u011fumuz de\u011fer hem 5 hem de 10 de\u011ferinden k\u00fc\u00e7\u00fck oldu\u011fu halde sadece 5'ten k\u00fc\u00e7\u00fckt\u00fcr dedi. Yani elif de\u011feri kendisinden sonraki ba\u015fka ko\u015ful \u00e7al\u0131\u015facak dahi olsa o ko\u015fula hi\u00e7 u\u011fram\u0131yor. Ayn\u0131 program\u0131 if de\u011ferini kulland\u0131\u011f\u0131m\u0131z zaman hem 5'ten k\u00fc\u00e7\u00fckt\u00fcr hem de 10'dan k\u00fc\u00e7\u00fckt\u00fcr yazd\u0131. Bu da bizlere if ve elif ko\u015fullar\u0131n\u0131n nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131 hakk\u0131nda bilgi veriyor.","title":"elif"},{"location":"python/kosullu_durumlar/#else","text":"else ko\u015fullu deyimi yukar\u0131da bahsetti\u011fimiz ko\u015fullu deyimlerden biraz farkl\u0131 \u00e7al\u0131\u015fmaktad\u0131r. Nas\u0131l \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 bir \u00f6rnek \u00fczerinde inceleyelim. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi == 1: print(\"Bildiniz.\") else: print(\"Tekrar deneyiniz.\") Bir say\u0131 giriniz: 0 Tekrar deneyiniz. G\u00f6rm\u00fc\u015f oldu\u011funuz gibi e\u011fer yazm\u0131\u015f oldu\u011fumuz ko\u015ful sa\u011flanmad\u0131\u011f\u0131 zaman else durumu \u00e7al\u0131\u015fmaktad\u0131r. Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"else"},{"location":"python/kullanicidan_bilgi_almak/","text":"Kullan\u0131c\u0131dan Bilgi Almak Kullan\u0131c\u0131dan bilgi almak, geli\u015ftirdi\u011fimiz yaz\u0131l\u0131mlar\u0131n kullan\u0131c\u0131ya \u00f6zg\u00fc bilgiler \u00fcretmesi i\u00e7in elzem bir durumdur. Bu y\u00fczden python i\u00e7erisinde bulunan ve kullan\u0131c\u0131dan bilgi almam\u0131za yarayan bir fonksiyondur. input() fonksiyonu isim = input(\"\u0130sminiz nedir? \") \u0130sminiz nedir? Abdullah print(\"Merhaba\", isim, end=\"!\\n\") Merhaba Abdullah! G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi input() fonksiyonu etkile\u015fimli bir yaz\u0131l\u0131m \u00fcretmemiz konusunda kolayl\u0131k sa\u011fl\u0131yor. Peki bu fonksiyonu kullanarak bir adet toplama i\u015flemi yapt\u0131ral\u0131m; sayi1 = input(\"1. Say\u0131y\u0131 giriniz?: \") 1. Say\u0131y\u0131 giriniz?: 1 sayi2 = input(\"2. Say\u0131y\u0131 giriniz: \") 2. Say\u0131y\u0131 giriniz: 0 toplam = sayi1 + sayi2 print(\"Toplam i\u015fleminin sonucu: \",toplam) Toplam i\u015fleminin sonucu: 10 Yukar\u0131da bulunan i\u015flemi inceledi\u011fimiz taktirde bir hatan\u0131n oldu\u011funu g\u00f6r\u00fcyoruz. Bu hata toplama i\u015flemi yerine iki adet c\u00fcmleyi yan yana yazd\u0131rma i\u015flemi yapm\u0131\u015f olmas\u0131. Peki bu durumun sebebi ne, neden iki say\u0131y\u0131 toplamak yerine bu iki say\u0131y\u0131 yan yana yazd\u0131rd\u0131. Burada bakmam\u0131z gereken yap\u0131, girdi\u011fimiz say\u0131lar\u0131n tipinin say\u0131 m\u0131 oldu\u011fu yoksa c\u00fcmlemi oldu\u011fu. Hadi bu bakal\u0131m. type(sayi1) str type(sayi2) str type(toplam) str Yukar\u0131da da g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi sayi1, sayi2 ve toplam de\u011fi\u015fkenlerinin tipi string. Bu durumda bizim kullan\u0131c\u0131dan ald\u0131\u011f\u0131m\u0131z de\u011ferlerin tiplerini d\u00f6n\u00fc\u015ft\u00fcrmemiz gerekmektedir. \u015e\u0130mdi de bu konuyu \u00f6\u011frenelim. Tip D\u00f6n\u00fc\u015f\u00fcmleri Tip d\u00f6n\u00fc\u015f\u00fcmleri, de\u011fi\u015fkenlerin farkl\u0131 tiplere d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesini sa\u011flar. int() Bu yap\u0131 de\u011fi\u015fkenimizi int tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. str_sayi = \"1\" int_sayi = int(str_sayi) print(\"str_sayi: \",type(str_sayi)) print(\"int_sayi: \",type(int_sayi)) str_sayi: <class 'str'> int_sayi: <class 'int'> string tipindeki de\u011fi\u015fkeni int() fonksiyonu ile int tipine d\u00f6n\u00fc\u015ft\u00fcrd\u00fck. B\u00f6ylece bu de\u011fi\u015fkeni matematiksel i\u015flemlerde kullanabiliriz. str() Bu yap\u0131 de\u011fi\u015fkenimizin tipini str tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. sayi = 5 karakter = str(sayi) print(\"sayinin tipi: \",type(sayi)) print(\"karakterin tipi: \",type(karakter)) sayinin tipi: <class 'int'> karakterin tipi: <class 'str'> float() Bu yap\u0131 de\u011fi\u015fkenimizi float tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. Bu t\u00fcr bildi\u011finiz \u00fczere kayan noktal\u0131 say\u0131lar oluyor. \u00d6rnek vermek gerekirse 1,5 gibi. a = 42 print(a) type(a) 42 int a = float(a) print(a) type(a) 42.0 float complex() Bu yap\u0131 de\u011fi\u015fkenimizi complex tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. Bu t\u00fcr bildi\u011finiz \u00fczere karma\u015f\u0131k say\u0131lar oluyor. \u00d6rnek vermek gerekirse 15+0j gibi. type(15+0j) complex Bu k\u0131s\u0131mda \u00f6\u011frendiklerimiz ile yukar\u0131da yapmaya \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z, kullan\u0131c\u0131dan iki adet say\u0131 al\u0131p bunlar\u0131 toplama i\u015flemini yapal\u0131m. sayi1 = int(input(\"1. say\u0131y\u0131 giriniz: \")) 1. say\u0131y\u0131 giriniz: 1 sayi2 = int(input(\"2. say\u0131y\u0131 giriniz: \")) 2. say\u0131y\u0131 giriniz: 1 toplam = sayi1 + sayi2 print(\"Toplam: \",toplam) Toplam: 2 format() Metodu Bu fonksiyon, print fonksiyonunu daha etkili kullanabilmemiz ve baz\u0131 i\u015flemleri daha etkili yapmam\u0131z sa\u011flar. Hemen bir \u00f6rnek ile inceleyelim. dil1 = \"Python\" dil2 = \"Java\" print(\"{} ve {} bir progralama dilidir.\".format(dil1,dil2)) Python ve Java bir progralama dilidir. Bu yap\u0131y\u0131 kullan\u0131c\u0131dan ald\u0131\u011f\u0131m\u0131z bilgileri print fonksiyonu ile ekranda g\u00f6sterebiliriz. Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"Kullan\u0131c\u0131dan Bilgi Almak"},{"location":"python/kullanicidan_bilgi_almak/#kullancdan-bilgi-almak","text":"Kullan\u0131c\u0131dan bilgi almak, geli\u015ftirdi\u011fimiz yaz\u0131l\u0131mlar\u0131n kullan\u0131c\u0131ya \u00f6zg\u00fc bilgiler \u00fcretmesi i\u00e7in elzem bir durumdur. Bu y\u00fczden python i\u00e7erisinde bulunan ve kullan\u0131c\u0131dan bilgi almam\u0131za yarayan bir fonksiyondur.","title":"Kullan\u0131c\u0131dan Bilgi Almak"},{"location":"python/kullanicidan_bilgi_almak/#input-fonksiyonu","text":"isim = input(\"\u0130sminiz nedir? \") \u0130sminiz nedir? Abdullah print(\"Merhaba\", isim, end=\"!\\n\") Merhaba Abdullah! G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi input() fonksiyonu etkile\u015fimli bir yaz\u0131l\u0131m \u00fcretmemiz konusunda kolayl\u0131k sa\u011fl\u0131yor. Peki bu fonksiyonu kullanarak bir adet toplama i\u015flemi yapt\u0131ral\u0131m; sayi1 = input(\"1. Say\u0131y\u0131 giriniz?: \") 1. Say\u0131y\u0131 giriniz?: 1 sayi2 = input(\"2. Say\u0131y\u0131 giriniz: \") 2. Say\u0131y\u0131 giriniz: 0 toplam = sayi1 + sayi2 print(\"Toplam i\u015fleminin sonucu: \",toplam) Toplam i\u015fleminin sonucu: 10 Yukar\u0131da bulunan i\u015flemi inceledi\u011fimiz taktirde bir hatan\u0131n oldu\u011funu g\u00f6r\u00fcyoruz. Bu hata toplama i\u015flemi yerine iki adet c\u00fcmleyi yan yana yazd\u0131rma i\u015flemi yapm\u0131\u015f olmas\u0131. Peki bu durumun sebebi ne, neden iki say\u0131y\u0131 toplamak yerine bu iki say\u0131y\u0131 yan yana yazd\u0131rd\u0131. Burada bakmam\u0131z gereken yap\u0131, girdi\u011fimiz say\u0131lar\u0131n tipinin say\u0131 m\u0131 oldu\u011fu yoksa c\u00fcmlemi oldu\u011fu. Hadi bu bakal\u0131m. type(sayi1) str type(sayi2) str type(toplam) str Yukar\u0131da da g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi sayi1, sayi2 ve toplam de\u011fi\u015fkenlerinin tipi string. Bu durumda bizim kullan\u0131c\u0131dan ald\u0131\u011f\u0131m\u0131z de\u011ferlerin tiplerini d\u00f6n\u00fc\u015ft\u00fcrmemiz gerekmektedir. \u015e\u0130mdi de bu konuyu \u00f6\u011frenelim.","title":"input() fonksiyonu"},{"location":"python/kullanicidan_bilgi_almak/#tip-donusumleri","text":"Tip d\u00f6n\u00fc\u015f\u00fcmleri, de\u011fi\u015fkenlerin farkl\u0131 tiplere d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesini sa\u011flar.","title":"Tip D\u00f6n\u00fc\u015f\u00fcmleri"},{"location":"python/kullanicidan_bilgi_almak/#int","text":"Bu yap\u0131 de\u011fi\u015fkenimizi int tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. str_sayi = \"1\" int_sayi = int(str_sayi) print(\"str_sayi: \",type(str_sayi)) print(\"int_sayi: \",type(int_sayi)) str_sayi: <class 'str'> int_sayi: <class 'int'> string tipindeki de\u011fi\u015fkeni int() fonksiyonu ile int tipine d\u00f6n\u00fc\u015ft\u00fcrd\u00fck. B\u00f6ylece bu de\u011fi\u015fkeni matematiksel i\u015flemlerde kullanabiliriz.","title":"int()"},{"location":"python/kullanicidan_bilgi_almak/#str","text":"Bu yap\u0131 de\u011fi\u015fkenimizin tipini str tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. sayi = 5 karakter = str(sayi) print(\"sayinin tipi: \",type(sayi)) print(\"karakterin tipi: \",type(karakter)) sayinin tipi: <class 'int'> karakterin tipi: <class 'str'>","title":"str()"},{"location":"python/kullanicidan_bilgi_almak/#float","text":"Bu yap\u0131 de\u011fi\u015fkenimizi float tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. Bu t\u00fcr bildi\u011finiz \u00fczere kayan noktal\u0131 say\u0131lar oluyor. \u00d6rnek vermek gerekirse 1,5 gibi. a = 42 print(a) type(a) 42 int a = float(a) print(a) type(a) 42.0 float","title":"float()"},{"location":"python/kullanicidan_bilgi_almak/#complex","text":"Bu yap\u0131 de\u011fi\u015fkenimizi complex tipine d\u00f6n\u00fc\u015ft\u00fcrmemizi sa\u011flar. Bu t\u00fcr bildi\u011finiz \u00fczere karma\u015f\u0131k say\u0131lar oluyor. \u00d6rnek vermek gerekirse 15+0j gibi. type(15+0j) complex Bu k\u0131s\u0131mda \u00f6\u011frendiklerimiz ile yukar\u0131da yapmaya \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z, kullan\u0131c\u0131dan iki adet say\u0131 al\u0131p bunlar\u0131 toplama i\u015flemini yapal\u0131m. sayi1 = int(input(\"1. say\u0131y\u0131 giriniz: \")) 1. say\u0131y\u0131 giriniz: 1 sayi2 = int(input(\"2. say\u0131y\u0131 giriniz: \")) 2. say\u0131y\u0131 giriniz: 1 toplam = sayi1 + sayi2 print(\"Toplam: \",toplam) Toplam: 2","title":"complex()"},{"location":"python/kullanicidan_bilgi_almak/#format-metodu","text":"Bu fonksiyon, print fonksiyonunu daha etkili kullanabilmemiz ve baz\u0131 i\u015flemleri daha etkili yapmam\u0131z sa\u011flar. Hemen bir \u00f6rnek ile inceleyelim. dil1 = \"Python\" dil2 = \"Java\" print(\"{} ve {} bir progralama dilidir.\".format(dil1,dil2)) Python ve Java bir progralama dilidir. Bu yap\u0131y\u0131 kullan\u0131c\u0131dan ald\u0131\u011f\u0131m\u0131z bilgileri print fonksiyonu ile ekranda g\u00f6sterebiliriz. Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"format() Metodu"},{"location":"python/print/","text":"print Fonksiyonu Print fonksiyonu ekrana \u00e7\u0131kt\u0131 vermemizi sa\u011flar. print(\"Python\") Python Print fonksiyonunu \u00fc\u00e7 farkl\u0131 t\u0131rnak ile birlikte kullanabilirsiniz. Tek t\u0131rnak (\u2018 \u2018) \u00c7ift t\u0131rnak (\u201d \u201d) \u00dc\u00e7 t\u0131rnak (\u201c\u201d\u201d \u201c\u201d\u201d) print('1) Python programlama dili') print(\"2) Python programlama dili\") print(\"\"\"3) Python programlama dili\"\"\") 1) Python programlama dili 2) Python programlama dili 3) Python programlama dili Print fonksiyonun i\u00e7erisinde t\u0131rnaklar\u0131 beraber kullanmak isted\u011finiz zaman ise \u015fu \u015fekilde bir yol izleyebilirsiniz. print('Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez') print(\"\u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini\") print(\"\"\"Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez\"\"\") print(\"\"\"\u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini\"\"\") Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez \u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez \u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini Print i\u00e7erisinde \u00fc\u00e7 t\u0131rnak kullanarak \u00e7ok farkl\u0131 \u00e7\u0131kt\u0131lar verebilirsiniz. print(\"\"\" [H]=========\u015eAH\u0130========[-][o][x] | | | Programa Ho\u015fgeldiniz! | | S\u00fcr\u00fcm 0.8 | | Devam etmek i\u00e7in herhangi | | bir d\u00fc\u011fmeye bas\u0131n. | | | |=================================| \"\"\") [H]=========\u015eAH\u0130========[-][o][x] | | | Programa Ho\u015fgeldiniz! | | S\u00fcr\u00fcm 0.8 | | Devam etmek i\u00e7in herhangi | | bir d\u00fc\u011fmeye bas\u0131n. | | | |=================================| Print fonksiyonunda rakam ile harfleri beraber yazd\u0131rabilirsiniz. print(\"Python\", \"Versiyon\",3.7) Python Versiyon 3.7 print() Fonksiyonunun Parametreleri sep sep parametresi, ekrana bas\u0131lacak \u00f6\u011feler aras\u0131na hangi karakterin yerle\u015ftirilece\u011fini g\u00f6sterir. print(\"http://\", \"www.\", \"istihza.\", \"com\", sep=\"\") http://www.istihza.com print(\"\u0130stanbul\", \"Konya\", sep=\"-\") \u0130stanbul-Konya end end parametresi ise bu parametrelerin sonuna neyin gelece\u011fini belirler. print(\"Bug\u00fcn g\u00fcnlerden Cuma\", end=\".\") Bug\u00fcn g\u00fcnlerden Cuma. file file verilen karakter dizisi ve/veya say\u0131lar\u0131n, yani parametrelerin nereye yaz\u0131laca\u011f\u0131n\u0131 belirtmektir. A\u015fa\u011f\u0131da bulunan komutlar\u0131o \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131z taktirde python dosyas\u0131n\u0131n bulundu\u011fu konuma deneme.txt isminde bir dosya olu\u015fturup belirtmi\u015f oldu\u011fumuz c\u00fcmleyi yazacakt\u0131r. dosya = open(\"deneme.txt\", \"w\") print(\"Ben Python, Monty Python!\", file=dosya) dosya.close() y\u0131ld\u0131z(*) Bu parametre veriler aras\u0131nda i\u015flem yapmam\u0131z\u0131 sa\u011flar. print(*\"Python\") P y t h o n","title":"print Fonksiyonu"},{"location":"python/print/#print-fonksiyonu","text":"Print fonksiyonu ekrana \u00e7\u0131kt\u0131 vermemizi sa\u011flar. print(\"Python\") Python Print fonksiyonunu \u00fc\u00e7 farkl\u0131 t\u0131rnak ile birlikte kullanabilirsiniz. Tek t\u0131rnak (\u2018 \u2018) \u00c7ift t\u0131rnak (\u201d \u201d) \u00dc\u00e7 t\u0131rnak (\u201c\u201d\u201d \u201c\u201d\u201d) print('1) Python programlama dili') print(\"2) Python programlama dili\") print(\"\"\"3) Python programlama dili\"\"\") 1) Python programlama dili 2) Python programlama dili 3) Python programlama dili Print fonksiyonun i\u00e7erisinde t\u0131rnaklar\u0131 beraber kullanmak isted\u011finiz zaman ise \u015fu \u015fekilde bir yol izleyebilirsiniz. print('Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez') print(\"\u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini\") print(\"\"\"Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez\"\"\") print(\"\"\"\u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini\"\"\") Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez \u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini Python programlama dilinin ad\u0131 \"piton\" y\u0131lan\u0131ndan gelmez \u0130stanbul'un 5 g\u00fcnl\u00fck hava durumu tahmini Print i\u00e7erisinde \u00fc\u00e7 t\u0131rnak kullanarak \u00e7ok farkl\u0131 \u00e7\u0131kt\u0131lar verebilirsiniz. print(\"\"\" [H]=========\u015eAH\u0130========[-][o][x] | | | Programa Ho\u015fgeldiniz! | | S\u00fcr\u00fcm 0.8 | | Devam etmek i\u00e7in herhangi | | bir d\u00fc\u011fmeye bas\u0131n. | | | |=================================| \"\"\") [H]=========\u015eAH\u0130========[-][o][x] | | | Programa Ho\u015fgeldiniz! | | S\u00fcr\u00fcm 0.8 | | Devam etmek i\u00e7in herhangi | | bir d\u00fc\u011fmeye bas\u0131n. | | | |=================================| Print fonksiyonunda rakam ile harfleri beraber yazd\u0131rabilirsiniz. print(\"Python\", \"Versiyon\",3.7) Python Versiyon 3.7","title":"print Fonksiyonu"},{"location":"python/print/#print-fonksiyonunun-parametreleri","text":"","title":"print() Fonksiyonunun Parametreleri"},{"location":"python/print/#sep","text":"sep parametresi, ekrana bas\u0131lacak \u00f6\u011feler aras\u0131na hangi karakterin yerle\u015ftirilece\u011fini g\u00f6sterir. print(\"http://\", \"www.\", \"istihza.\", \"com\", sep=\"\") http://www.istihza.com print(\"\u0130stanbul\", \"Konya\", sep=\"-\") \u0130stanbul-Konya","title":"sep"},{"location":"python/print/#end","text":"end parametresi ise bu parametrelerin sonuna neyin gelece\u011fini belirler. print(\"Bug\u00fcn g\u00fcnlerden Cuma\", end=\".\") Bug\u00fcn g\u00fcnlerden Cuma.","title":"end"},{"location":"python/print/#file","text":"file verilen karakter dizisi ve/veya say\u0131lar\u0131n, yani parametrelerin nereye yaz\u0131laca\u011f\u0131n\u0131 belirtmektir. A\u015fa\u011f\u0131da bulunan komutlar\u0131o \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131z taktirde python dosyas\u0131n\u0131n bulundu\u011fu konuma deneme.txt isminde bir dosya olu\u015fturup belirtmi\u015f oldu\u011fumuz c\u00fcmleyi yazacakt\u0131r. dosya = open(\"deneme.txt\", \"w\") print(\"Ben Python, Monty Python!\", file=dosya) dosya.close()","title":"file"},{"location":"python/print/#yldz","text":"Bu parametre veriler aras\u0131nda i\u015flem yapmam\u0131z\u0131 sa\u011flar. print(*\"Python\") P y t h o n","title":"y\u0131ld\u0131z(*)"},{"location":"python/python_donguler/","text":"D\u00f6ng\u00fcler(Loops) Bir durumun/s\u00fcrecin tekrar tekrar kullan\u0131lmas\u0131n\u0131 sa\u011flayan yap\u0131ya d\u00f6ng\u00fc(loops) denir. Python'da iki adet d\u00f6ng\u00fc bulunmaktad\u0131r; 1. While 2. For While D\u00f6ng\u00fcs\u00fc While d\u00f6ng\u00fcs\u00fcn\u00fc \u00f6rnekler \u00fczerinden \u00f6\u011frenelim. a = 1 while a < 5: a += 1 print(\"Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Yukar\u0131da bulunan \u00f6rnekte a\u015fa\u011f\u0131daki ad\u0131mlar ger\u00e7ekle\u015fmi\u015ftir: Ad\u0131m 1: a de\u011fi\u015fkenine 1 de\u011ferini ata. Ad\u0131m 2: a say\u0131s\u0131 5 de\u011ferinden k\u00fc\u00e7\u00fck ise d\u00f6ng\u00fcn\u00fcn i\u00e7ine gir. E\u011fer a say\u0131s\u0131 5 de\u011ferinden b\u00fcy\u00fck ise Ad\u0131m 6 'ya git. Ad\u0131m 3: a de\u011ferini 1 art\u0131r. Ad\u0131m 4: ekrana \"Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\" yazd\u0131r. Ad\u0131m 5: Ad\u0131m 2 'ye git. Ad\u0131m 6: \u00c7\u0131k\u0131\u015f. While d\u00f6ng\u00fcs\u00fcn\u00fcn daha iyi anla\u015f\u0131lmas\u0131 i\u00e7in \u00e7ift say\u0131lar\u0131 ekrana yazd\u0131ran bir uygulama yapal\u0131m. sayi = 0 while sayi < 19: sayi += 1 if sayi % 2 == 0: print(sayi) 2 4 6 8 10 12 14 16 18 For D\u00f6ng\u00fcs\u00fc while d\u00f6ng\u00fcs\u00fc ile yapamayaca\u011f\u0131n\u0131z veya yaparken \u00e7ok zorlanaca\u011f\u0131n\u0131z \u015feyleri for d\u00f6ng\u00fcs\u00fc yard\u0131m\u0131yla \u00e7ok kolay bir \u015fekilde halledebilirsiniz. harfler = \"abcd\" for harf in harfler: print(harf) a b c d \u00d6rnekte oldu\u011fu gibi for d\u00f6ng\u00fcs\u00fc bir nesnenin i\u00e7inde dola\u015fabilmemizi ve nesnenin sahip oldu\u011fu de\u011ferlere ayr\u0131 ayr\u0131 eri\u015febilmemizi sa\u011flar. Peki ayn\u0131 i\u015flemi while d\u00f6ng\u00fcs\u00fc ile yazal\u0131m ve kar\u015f\u0131la\u015ft\u0131ral\u0131m. a = 0 while a < len(harfler): print(harfler[a]) a += 1 a b c d For d\u00f6ng\u00fcs\u00fc ile yapt\u0131\u011f\u0131m\u0131z i\u015flemin ayn\u0131s\u0131n\u0131 while ile de yapabildik fakat biraz daha uzun s\u00fcrd\u00fc. Bu y\u00fczden for ile yapabilece\u011fimiz bir i\u015flemi while ile yapmamak daha iyi olacakt\u0131r. \u0130lgili Ara\u00e7lar D\u00f6ng\u00fcler kendilerinin yan\u0131na baz\u0131 fonksiyonlar alabilmektedir. Bu fonksiyonlar\u0131 inceleyelim. range Fonksiyonu range fonksiyonunu belirli bir aral\u0131kta bulunan say\u0131lar\u0131 g\u00f6stermek i\u00e7in kullan\u0131yoruz. for i in range(0,5): print(i) 0 1 2 3 4 range(ilk_sayi,son_sayi) fonksiyonu \u015feklinde kullan\u0131l\u0131r. Burada ilk_sayi aral\u0131\u011fa dahil edilirken, son_sayi aral\u0131\u011fa dahil edilmez. E\u011fer biz 1'den 5'e kadar olan say\u0131lar\u0131 ekrana yazd\u0131rmak istiyorsak range fonksiyonu \u015fu \u015fekilde olmal\u0131d\u0131r. for i in range(0,6): print(i) 0 1 2 3 4 5 Yukar\u0131daki \u00f6rneklerde say\u0131lar hep birer birer artt\u0131. Peki art\u0131\u015f miktar\u0131n\u0131 de\u011fi\u015ftirmek istiyorsak nas\u0131l bir yol izlemeliyiz. O zaman range fonksiyonunu \u015fu \u015fekilde range(ilk_sayi,son_sayi,artis_miktari) kullanmal\u0131y\u0131z. Burada art\u0131\u015f miktar\u0131na istedi\u011fimiz say\u0131y\u0131 yazabiliriz. Hemen birka\u00e7 \u00f6rnek ile inceleyelim. for i in range(5,0,-1): print(i) 5 4 3 2 1 Bir ba\u015fka \u00f6rnek; for i in range(0,10,2): print(i) 0 2 4 6 8 ve bir \u00f6rnek daha. for i in range(0,20,5): print(i) 0 5 10 15 range fonksiyonunun, print fonksiyonu ile kullan\u0131mana birka\u00e7 \u00f6rnek verelim; print(*range(10)) 0 1 2 3 4 5 6 7 8 9 ve range fonksiyonu i\u00e7in son \u00f6rne\u011fimiz: print(*range(10), sep=\", \") 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 pass Deyimi pass kelimesi ingilizce'de ge\u00e7mek anlam\u0131na gelir. Bu deyimi d\u00f6ng\u00fclerle birlikte kulland\u0131\u011f\u0131m\u0131z zaman o yap\u0131 g\u00f6z ard\u0131 edilecektir. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi < 0: pass else: print(sayi) Bir say\u0131 giriniz: -1 Yukar\u0131daki \u00f6rnekte girmi\u015f oldu\u011fumuz say\u0131n\u0131n de\u011feri -1, if blo\u011funa geldi\u011fi zaman bakt\u0131 say\u0131 0'dan k\u00fc\u00e7\u00fck i\u00e7eri girdi fakat biz pas ge\u00e7 dedi\u011fimiz i\u00e7in herhangi bir i\u015flem yapmad\u0131. break Deyimi break kelimesi ingilizce'de k\u0131rmak anlam\u0131na gelir. Bu deyimi d\u00f6ng\u00fclerle birlikte kulland\u0131\u011f\u0131m\u0131z zaman d\u00f6ng\u00fcy\u00fc k\u0131rar ve d\u0131\u015far\u0131 \u00e7\u0131kar yani i\u015flem devam etmesi gerekse bile biz break yazd\u0131\u011f\u0131m\u0131z i\u00e7in break deyiminin oldu\u011fu yerde i\u015flemleri keser ve d\u0131\u015far\u0131 \u00e7\u0131kar. while True: parola = input(\"L\u00fctfen bir parola belirleyiniz:\") if len(parola) < 5: print(\"Parola 5 karakterden az olmamal\u0131!\") else: print(\"Parolan\u0131z belirlendi!\") break L\u00fctfen bir parola belirleyiniz:123456 Parolan\u0131z belirlendi! E\u011fer yukar\u0131da bulunan \u00f6rnekte break deyimini yazmam\u0131\u015f olsayd\u0131k, parolam\u0131z\u0131 istenildi\u011fi gibi belirledi\u011fimiz halde d\u00f6ng\u00fc devam edecekti. continue Deyimi continue kelimesi ingilizce'de devam et anlam\u0131na gelmektedir. Bu deyimi d\u00f6ng\u00fclerde kulland\u0131\u011f\u0131m\u0131z zaman istenilen \u015fart ger\u00e7ekle\u015fse bile d\u00f6ng\u00fcde i\u015fleme devam edilir. while True: s = input(\"Bir say\u0131 girin: \") if s == \"iptal\": break if len(s) <= 3: continue print(\"En fazla \u00fc\u00e7 haneli bir say\u0131 girebilirsiniz.\") Bir say\u0131 girin: 3 Bir say\u0131 girin: 2 Bir say\u0131 girin: 1 Bir say\u0131 girin: iptal Yukar\u0131daki \u00f6rnekte kullan\u0131c\u0131 3'e e\u015fit veya daha k\u00fc\u00e7\u00fck say\u0131lar girdi\u011fi s\u00fcrece d\u00f6ng\u00fc devam edecek \u00e7\u00fcnk\u00fc continue ifadesi bulunmaktad\u0131r. E\u011fer iptal ibaresini girersek d\u00f6ng\u00fc k\u0131r\u0131lm\u0131\u015f olacak ve d\u00f6ng\u00fcden d\u0131\u015far\u0131 \u00e7\u0131k\u0131lacak. Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"D\u00f6ng\u00fcler"},{"location":"python/python_donguler/#dongulerloops","text":"Bir durumun/s\u00fcrecin tekrar tekrar kullan\u0131lmas\u0131n\u0131 sa\u011flayan yap\u0131ya d\u00f6ng\u00fc(loops) denir. Python'da iki adet d\u00f6ng\u00fc bulunmaktad\u0131r; 1. While 2. For","title":"D\u00f6ng\u00fcler(Loops)"},{"location":"python/python_donguler/#while-dongusu","text":"While d\u00f6ng\u00fcs\u00fcn\u00fc \u00f6rnekler \u00fczerinden \u00f6\u011frenelim. a = 1 while a < 5: a += 1 print(\"Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\") Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr. Yukar\u0131da bulunan \u00f6rnekte a\u015fa\u011f\u0131daki ad\u0131mlar ger\u00e7ekle\u015fmi\u015ftir: Ad\u0131m 1: a de\u011fi\u015fkenine 1 de\u011ferini ata. Ad\u0131m 2: a say\u0131s\u0131 5 de\u011ferinden k\u00fc\u00e7\u00fck ise d\u00f6ng\u00fcn\u00fcn i\u00e7ine gir. E\u011fer a say\u0131s\u0131 5 de\u011ferinden b\u00fcy\u00fck ise Ad\u0131m 6 'ya git. Ad\u0131m 3: a de\u011ferini 1 art\u0131r. Ad\u0131m 4: ekrana \"Say\u0131 5'ten k\u00fc\u00e7\u00fckt\u00fcr.\" yazd\u0131r. Ad\u0131m 5: Ad\u0131m 2 'ye git. Ad\u0131m 6: \u00c7\u0131k\u0131\u015f. While d\u00f6ng\u00fcs\u00fcn\u00fcn daha iyi anla\u015f\u0131lmas\u0131 i\u00e7in \u00e7ift say\u0131lar\u0131 ekrana yazd\u0131ran bir uygulama yapal\u0131m. sayi = 0 while sayi < 19: sayi += 1 if sayi % 2 == 0: print(sayi) 2 4 6 8 10 12 14 16 18","title":"While D\u00f6ng\u00fcs\u00fc"},{"location":"python/python_donguler/#for-dongusu","text":"while d\u00f6ng\u00fcs\u00fc ile yapamayaca\u011f\u0131n\u0131z veya yaparken \u00e7ok zorlanaca\u011f\u0131n\u0131z \u015feyleri for d\u00f6ng\u00fcs\u00fc yard\u0131m\u0131yla \u00e7ok kolay bir \u015fekilde halledebilirsiniz. harfler = \"abcd\" for harf in harfler: print(harf) a b c d \u00d6rnekte oldu\u011fu gibi for d\u00f6ng\u00fcs\u00fc bir nesnenin i\u00e7inde dola\u015fabilmemizi ve nesnenin sahip oldu\u011fu de\u011ferlere ayr\u0131 ayr\u0131 eri\u015febilmemizi sa\u011flar. Peki ayn\u0131 i\u015flemi while d\u00f6ng\u00fcs\u00fc ile yazal\u0131m ve kar\u015f\u0131la\u015ft\u0131ral\u0131m. a = 0 while a < len(harfler): print(harfler[a]) a += 1 a b c d For d\u00f6ng\u00fcs\u00fc ile yapt\u0131\u011f\u0131m\u0131z i\u015flemin ayn\u0131s\u0131n\u0131 while ile de yapabildik fakat biraz daha uzun s\u00fcrd\u00fc. Bu y\u00fczden for ile yapabilece\u011fimiz bir i\u015flemi while ile yapmamak daha iyi olacakt\u0131r.","title":"For D\u00f6ng\u00fcs\u00fc"},{"location":"python/python_donguler/#ilgili-araclar","text":"D\u00f6ng\u00fcler kendilerinin yan\u0131na baz\u0131 fonksiyonlar alabilmektedir. Bu fonksiyonlar\u0131 inceleyelim.","title":"\u0130lgili Ara\u00e7lar"},{"location":"python/python_donguler/#range-fonksiyonu","text":"range fonksiyonunu belirli bir aral\u0131kta bulunan say\u0131lar\u0131 g\u00f6stermek i\u00e7in kullan\u0131yoruz. for i in range(0,5): print(i) 0 1 2 3 4 range(ilk_sayi,son_sayi) fonksiyonu \u015feklinde kullan\u0131l\u0131r. Burada ilk_sayi aral\u0131\u011fa dahil edilirken, son_sayi aral\u0131\u011fa dahil edilmez. E\u011fer biz 1'den 5'e kadar olan say\u0131lar\u0131 ekrana yazd\u0131rmak istiyorsak range fonksiyonu \u015fu \u015fekilde olmal\u0131d\u0131r. for i in range(0,6): print(i) 0 1 2 3 4 5 Yukar\u0131daki \u00f6rneklerde say\u0131lar hep birer birer artt\u0131. Peki art\u0131\u015f miktar\u0131n\u0131 de\u011fi\u015ftirmek istiyorsak nas\u0131l bir yol izlemeliyiz. O zaman range fonksiyonunu \u015fu \u015fekilde range(ilk_sayi,son_sayi,artis_miktari) kullanmal\u0131y\u0131z. Burada art\u0131\u015f miktar\u0131na istedi\u011fimiz say\u0131y\u0131 yazabiliriz. Hemen birka\u00e7 \u00f6rnek ile inceleyelim. for i in range(5,0,-1): print(i) 5 4 3 2 1 Bir ba\u015fka \u00f6rnek; for i in range(0,10,2): print(i) 0 2 4 6 8 ve bir \u00f6rnek daha. for i in range(0,20,5): print(i) 0 5 10 15 range fonksiyonunun, print fonksiyonu ile kullan\u0131mana birka\u00e7 \u00f6rnek verelim; print(*range(10)) 0 1 2 3 4 5 6 7 8 9 ve range fonksiyonu i\u00e7in son \u00f6rne\u011fimiz: print(*range(10), sep=\", \") 0, 1, 2, 3, 4, 5, 6, 7, 8, 9","title":"range Fonksiyonu"},{"location":"python/python_donguler/#pass-deyimi","text":"pass kelimesi ingilizce'de ge\u00e7mek anlam\u0131na gelir. Bu deyimi d\u00f6ng\u00fclerle birlikte kulland\u0131\u011f\u0131m\u0131z zaman o yap\u0131 g\u00f6z ard\u0131 edilecektir. sayi = int(input(\"Bir say\u0131 giriniz: \")) if sayi < 0: pass else: print(sayi) Bir say\u0131 giriniz: -1 Yukar\u0131daki \u00f6rnekte girmi\u015f oldu\u011fumuz say\u0131n\u0131n de\u011feri -1, if blo\u011funa geldi\u011fi zaman bakt\u0131 say\u0131 0'dan k\u00fc\u00e7\u00fck i\u00e7eri girdi fakat biz pas ge\u00e7 dedi\u011fimiz i\u00e7in herhangi bir i\u015flem yapmad\u0131.","title":"pass Deyimi"},{"location":"python/python_donguler/#break-deyimi","text":"break kelimesi ingilizce'de k\u0131rmak anlam\u0131na gelir. Bu deyimi d\u00f6ng\u00fclerle birlikte kulland\u0131\u011f\u0131m\u0131z zaman d\u00f6ng\u00fcy\u00fc k\u0131rar ve d\u0131\u015far\u0131 \u00e7\u0131kar yani i\u015flem devam etmesi gerekse bile biz break yazd\u0131\u011f\u0131m\u0131z i\u00e7in break deyiminin oldu\u011fu yerde i\u015flemleri keser ve d\u0131\u015far\u0131 \u00e7\u0131kar. while True: parola = input(\"L\u00fctfen bir parola belirleyiniz:\") if len(parola) < 5: print(\"Parola 5 karakterden az olmamal\u0131!\") else: print(\"Parolan\u0131z belirlendi!\") break L\u00fctfen bir parola belirleyiniz:123456 Parolan\u0131z belirlendi! E\u011fer yukar\u0131da bulunan \u00f6rnekte break deyimini yazmam\u0131\u015f olsayd\u0131k, parolam\u0131z\u0131 istenildi\u011fi gibi belirledi\u011fimiz halde d\u00f6ng\u00fc devam edecekti.","title":"break Deyimi"},{"location":"python/python_donguler/#continue-deyimi","text":"continue kelimesi ingilizce'de devam et anlam\u0131na gelmektedir. Bu deyimi d\u00f6ng\u00fclerde kulland\u0131\u011f\u0131m\u0131z zaman istenilen \u015fart ger\u00e7ekle\u015fse bile d\u00f6ng\u00fcde i\u015fleme devam edilir. while True: s = input(\"Bir say\u0131 girin: \") if s == \"iptal\": break if len(s) <= 3: continue print(\"En fazla \u00fc\u00e7 haneli bir say\u0131 girebilirsiniz.\") Bir say\u0131 girin: 3 Bir say\u0131 girin: 2 Bir say\u0131 girin: 1 Bir say\u0131 girin: iptal Yukar\u0131daki \u00f6rnekte kullan\u0131c\u0131 3'e e\u015fit veya daha k\u00fc\u00e7\u00fck say\u0131lar girdi\u011fi s\u00fcrece d\u00f6ng\u00fc devam edecek \u00e7\u00fcnk\u00fc continue ifadesi bulunmaktad\u0131r. E\u011fer iptal ibaresini girersek d\u00f6ng\u00fc k\u0131r\u0131lm\u0131\u015f olacak ve d\u00f6ng\u00fcden d\u0131\u015far\u0131 \u00e7\u0131k\u0131lacak. Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"continue Deyimi"},{"location":"python/python_fonksiyonlar/","text":"Fonksiyonlar Fonksiyon Nedir ve Ne \u0130\u015fe Yarar? Fonksiyonlar\u0131n genel g\u00f6r\u00fcn\u00fc\u015f\u00fc ve yap\u0131s\u0131: Her fonksiyonun bir ad\u0131 bulunur ve fonksiyonlar sahip olduklar\u0131 bu adlarla an\u0131l\u0131r. (print fonksiyonu, open fonksiyonu, type fonksiyonu, input fonksiyonu, len fonksiyonu vb.) \u015eekil olarak, her fonksiyonun isminin yan\u0131nda birer parantez i\u015fareti bulunur. (open(), print(), input(), len() vb.) Bu parantez i\u015faretlerinin i\u00e7ine, fonksiyonlara i\u015flevsellik kazand\u0131ran baz\u0131 parametreler yaz\u0131l\u0131r. (open(dosya_ad\u0131), print(\"Merhaba Zalim D\u00fcnya!\"), len(\"kahramanmara\u015f\") vb.) Fonksiyonlar farkl\u0131 say\u0131da parametre alabilir. \u00d6rne\u011fin print() fonksiyonu toplam 256 adet parametre alabilirken, input() fonksiyonu yaln\u0131zca tek bir parametre al\u0131r. Fonksiyonlar\u0131n isimli ve isimsiz parametreleri vard\u0131r. print() fonksiyonundaki sep, end ve file parametreleri isimli parametrelere \u00f6rnekken, mesela print(\"Merhaba D\u00fcnya!\") kodunda Merhaba D\u00fcnya! parametresi isimsiz bir parametredir. Ayn\u0131 \u015fekilde input(\"Ad\u0131n\u0131z: \") gibi bir kodda Ad\u0131n\u0131z: parametresi isimsiz bir parametredir. Fonksiyonlar\u0131n, isimli ve isimsiz parametreleri d\u0131\u015f\u0131nda, bir de varsay\u0131lan de\u011ferli parametreleri vard\u0131r. \u00d6rne\u011fin print() fonksiyonunun sep, end ve file parametreleri varsay\u0131lan de\u011ferli parametrelere birer \u00f6rnektir. E\u011fer bir parametrenin varsay\u0131lan bir de\u011feri varsa, o parametreye herhangi bir de\u011fer vermeden de fonksiyonu kullanabiliriz. Python bu parametrelere, belirli de\u011ferleri \u00f6ntan\u0131ml\u0131 olarak kendisi atayacakt\u0131r. Tabii e\u011fer istersek, varsay\u0131lan de\u011ferli parametrelere kendimiz de ba\u015fka birtak\u0131m de\u011ferler verebiliriz. Fonksiyonlar\u0131n g\u00f6revi, karma\u015f\u0131k i\u015flemleri bir araya toplayarak, bu i\u015flemleri tek ad\u0131mda yapmam\u0131z\u0131 sa\u011flamakt\u0131r. Fonksiyonlar \u00e7o\u011fu zaman, yapmak istedi\u011fimiz i\u015flemler i\u00e7in bir \u015fablon vazifesi g\u00f6r\u00fcr. Fonksiyonlar\u0131 kullanarak, bir veya birka\u00e7 ad\u0131mdan olu\u015fan i\u015flemleri tek bir isim alt\u0131nda toplayabiliriz. Python\u2019daki \u2018fonksiyon\u2019 kavram\u0131 ba\u015fka programlama dillerinde \u2018rutin\u2019 veya \u2018prosed\u00fcr\u2019 olarak adland\u0131r\u0131l\u0131r. Ger\u00e7ekten de fonksiyonlar rutin olarak tekrar edilen g\u00f6revleri veya prosed\u00fcrleri tek bir ad/\u00e7at\u0131 alt\u0131nda toplayan ara\u00e7lard\u0131r. Fonksiyonlar\u0131 daha iyi kavramak i\u00e7in print() fonksiyonunu ele alal\u0131m: Kendisine verilen \u201cPython\u201d ve \"2000\" gibi de\u011ferleri ekrana bas\u0131yor, sep=\u201d \u201c parametresinin etkisiyle, bu parametreler aras\u0131na birer bo\u015fluk ekliyor, end=\u201d\\n\u201d parametresinin etkisiyle, sonuncu parametreyi de ekrana bast\u0131ktan sonra bir alt sat\u0131ra ge\u00e7iyor, file=sys.stdout parametresinin etkisiyle, \u00e7\u0131kt\u0131 konumu olarak komut ekran\u0131n\u0131 kullan\u0131yor. Yani \u00e7\u0131kt\u0131lar\u0131 ekrana veriyor. flush=False parametresinin etkisiyle, \u00e7\u0131kt\u0131lar ekrana g\u00f6nderilmeden \u00f6nce tamponda bekletiliyor. Fonksiyon Tan\u0131mlamak ve \u00c7a\u011f\u0131rmak Fonksiyon tan\u0131malama ve \u00e7a\u011f\u0131rma i\u015flemini bir \u00f6rnek \u00fczerinden anlamaya \u00e7al\u0131\u015fal\u0131m. Elimizde bulunan kay\u0131t olu\u015ftur isimli fonksiyon ile ekrana \u015fu \u015fekilde bir \u00e7\u0131kt\u0131 verelim: '-------------------------' isim : Mehmet soyisim : \u00d6ztaban i\u015fletim sistemi: Debian \u015fehir : Ankara '-------------------------' \u0130lk olarak kay\u0131t_olustur() adl\u0131 fonksiyonu kullanabilmek i\u00e7in bu ada sahip fonksiyonu a\u015fa\u011f\u0131daki \u015fekilde tan\u0131mlamal\u0131y\u0131z: def kay\u0131t_olustur(isim, soyisim, isletim, sehir): print(\"-\"*30) print(\"isim : \", isim) print(\"soyisim : \", soyisim) print(\"i\u015fletim sistemi: \", isletim) print(\"\u015fehir : \", sehir) print(\"-\"*30) Fonksiyonumuzu test edelim: kay\u0131t_olustur(\"Abdullah\",\"\u015eahin\",\"Windows\",\"Konya\") ------------------------------ isim : Abdullah soyisim : \u015eahin i\u015fletim sistemi: Windows \u015fehir : Konya ------------------------------ G\u00f6rm\u00fc\u015f oldu\u011funuz gibi yazm\u0131\u015f oldu\u011fumuz fonksiyon \u00e7al\u0131\u015ft\u0131. \u015eimdi yaz\u0131\u011f\u0131m\u0131z yap\u0131y\u0131 irdeleyelim: Kodlar def adl\u0131 bir ifade ile ba\u015flam\u0131\u015f. Bu ifadenin ingilizce olarak a\u00e7\u0131l\u0131m\u0131 definition. Bunun ard\u0131ndan \u2018kay\u0131t_olustur\u2019 ifadesini g\u00f6r\u00fcyoruz. Bu ifadeyi, i\u00e7inde birtak\u0131m kelimeler bar\u0131nd\u0131ran bir parantez \u00e7ifti izliyor. Parantezin i\u00e7inde, isim, soyisim, isletim ve sehir adl\u0131 de\u011ferler var. def ile ba\u015flayan bu sat\u0131r iki nokta \u00fcst \u00fcste i\u015fareti ile son buluyor. \u0130lk sat\u0131r\u0131n ard\u0131ndan gelen k\u0131s\u0131m ilk sat\u0131ra g\u00f6re girintili bir \u015fekilde yaz\u0131lm\u0131\u015f. kay\u0131t_olustur(\"Abdullah\",\"\u015eahin\",\"Windows\",\"Konya\") sat\u0131r\u0131 \u00f6nceki sat\u0131rlara g\u00f6re girintisiz yaz\u0131lm\u0131\u015f. E\u011fer bu kodlara dikkatlice bakacak olursan\u0131z, asl\u0131nda bu kodlar\u0131n topu topu iki par\u00e7adan olu\u015ftu\u011funu g\u00f6receksiniz. \u0130sterseniz yukar\u0131daki yap\u0131y\u0131 biraz sadele\u015ftirelim: def kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4): (...) kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4) Bu yap\u0131n\u0131n ilk par\u00e7as\u0131 \u015fudur: ```python def kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4): (...) ``` \u0130kinci par\u00e7as\u0131 ise \u015fu: kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4) Teknik olarak s\u00f6ylemek gerekirse, ilk par\u00e7aya \u2018fonksiyon tan\u0131m\u0131\u2019 (function definition), ikinci par\u00e7aya ise \u2018fonksiyon \u00e7a\u011fr\u0131s\u0131\u2019 (function call ) ad\u0131 verilir. Dolay\u0131s\u0131yla bir fonksiyonun ya\u015fam d\u00f6ng\u00fcs\u00fc iki a\u015famadan olu\u015fur. Buna g\u00f6re bir fonksiyon \u00f6nce tan\u0131mlan\u0131r; def kay\u0131t_olu\u015ftur(parametre1, parametre2, parametre3, parametre4): (...) ...sonra da \u00e7a\u011fr\u0131l\u0131r. Bir fonksiyon \u00e7a\u011fr\u0131lmadan asla \u00e7al\u0131\u015fmaz. kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4) Fonksiyonlar\u0131n Yap\u0131s\u0131 Bir fonksiyonun ilk par\u00e7as\u0131na \u2018fonksiyon tan\u0131m\u0131\u2019 (function definition) ad\u0131 verilir. Bir fonksiyonu tan\u0131mlamak i\u00e7in def adl\u0131 bir par\u00e7ac\u0131ktan yararlan\u0131yoruz. \u00d6rne\u011fin: def bir_fonksiyon(): (...) Burada def par\u00e7ac\u0131\u011f\u0131, tan\u0131mlad\u0131\u011f\u0131m\u0131z \u015feyin bir fonksiyon oldu\u011funu g\u00f6steriyor. bir_fonksiyon ifadesi ise tan\u0131mlad\u0131\u011f\u0131m\u0131z bu fonksiyonun ad\u0131d\u0131r. Fonksiyonu tan\u0131mlad\u0131ktan sonra, \u00e7a\u011f\u0131r\u0131rken bu ad\u0131 kullanaca\u011f\u0131z. def bir_fonksiyon(): ifadesinin sonundaki iki nokta i\u015faretinden de tahmin edebilece\u011finiz gibi, sonraki sat\u0131ra yazaca\u011f\u0131m\u0131z kodlar girintili olacak. Fonksiyon g\u00f6vdesine, def ifadesinden itibaren 4 (d\u00f6rt) bo\u015flukluk bir girinti veriyoruz. def ifadesinden itibaren girintili olarak yazd\u0131\u011f\u0131m\u0131z k\u0131sm\u0131n tamam\u0131 o fonksiyonun g\u00f6vdesini olu\u015fturur ve b\u00fct\u00fcn\u00fcyle o fonksiyona aittir. \u00d6rne\u011fin: def selamla(): print(\"Merhaba D\u00fcnya!\") Fonksiyonlarla ilgili s\u00f6ylediklerimizi toparlayacak olursak \u015f\u00f6yle bir bilgi listesi ortaya \u00e7\u0131karabiliriz: Python\u2019da kabaca iki tip fonksiyon bulunur. Bunlardan biri g\u00f6m\u00fcl\u00fc fonksiyonlar (builtin functions ), \u00f6teki ise \u00f6zel fonksiyonlard\u0131r (custom functions ). Burada \u2018\u00f6zel\u2019 ifadesi, \u2018kullan\u0131c\u0131n\u0131n ihtiya\u00e7lar\u0131na g\u00f6re kullan\u0131c\u0131 taraf\u0131ndan \u00f6zel olarak \u00fcretilmi\u015f\u2019 anlam\u0131na gelir. G\u00f6m\u00fcl\u00fc fonksiyonlar; Python geli\u015ftiricileri taraf\u0131ndan tan\u0131mlan\u0131p dilin i\u00e7ine g\u00f6m\u00fclm\u00fc\u015f olan print(), open(), type(), str(), int() vb. fonksiyonlard\u0131r. Bu fonksiyonlar halihaz\u0131rda tan\u0131mlan\u0131p hizmetimize sunuldu\u011fu i\u00e7in bunlar\u0131 biz herhangi bir tan\u0131mlama i\u015flemi yapmadan do\u011frudan kullanabiliriz. \u00d6zel fonksiyonlar ise, g\u00f6m\u00fcl\u00fc fonksiyonlar\u0131n aksine, Python geli\u015ftiricileri taraf\u0131ndan de\u011fil, bizim taraf\u0131m\u0131zdan tan\u0131mlanm\u0131\u015ft\u0131r. Bu fonksiyonlar dilin bir par\u00e7as\u0131 olmad\u0131\u011f\u0131ndan, bu fonksiyonlar\u0131 kullanabilmek i\u00e7in bunlar\u0131 \u00f6ncelikle tan\u0131mlamam\u0131z gerekir. Python\u2019da bir fonksiyonun ya\u015fam d\u00f6ng\u00fcs\u00fc iki a\u015famadan olu\u015fur: Tan\u0131mlanma ve \u00e7a\u011fr\u0131lma. Bir fonksiyonun \u00e7a\u011fr\u0131labilmesi (yani kullan\u0131labilmesi) i\u00e7in mutlaka birisi taraf\u0131ndan tan\u0131mlanm\u0131\u015f olmas\u0131 gerekir. Fonksiyonu tan\u0131mlayan ki\u015fi Python geli\u015ftiricileri olabilece\u011fi gibi, siz de olabilirsiniz. Ama neticede ortada bir fonksiyon varsa, bir yerlerde o fonksiyonun tan\u0131m\u0131 da vard\u0131r. Fonksiyon tan\u0131mlamak i\u00e7in def adl\u0131 bir ifadeden yararlan\u0131yoruz. Bu ifadeden sonra, tan\u0131mlayaca\u011f\u0131m\u0131z fonksiyonun ad\u0131n\u0131 belirleyip iki nokta \u00fcst \u00fcste i\u015fareti koyuyoruz. \u0130ki nokta \u00fcst \u00fcste i\u015faretinden sonra gelen sat\u0131rlar girintili olarak yaz\u0131l\u0131yor. Daha \u00f6nce \u00f6\u011frendi\u011fimiz b\u00fct\u00fcn girintileme kurallar\u0131 burada da ge\u00e7erlidir. Fonksiyonun ad\u0131n\u0131 belirleyip iki nokta \u00fcst \u00fcste koyduktan sonra, alt sat\u0131rda girintili olarak yazd\u0131\u011f\u0131m\u0131z b\u00fct\u00fcn kodlar fonksiyonun g\u00f6vdesini olu\u015fturur. Do\u011fal olarak, bir fonksiyonun g\u00f6vdesindeki b\u00fct\u00fcn kodlar o fonksiyona aittir. Girintinin d\u0131\u015f\u0131na \u00e7\u0131k\u0131ld\u0131\u011f\u0131 anda fonksiyon tan\u0131m\u0131 da sona erer. Fonksiyonlar Ne \u0130\u015fe Yarar? Fonksiyonlar bir program i\u00e7erisinde s\u00fcrekli olarak yapmam\u0131z gereken i\u015flemleri tekrar etmemizi engelleyen yap\u0131lard\u0131r. \u00d6rnek vermek gerekirse, siz program\u0131n\u0131zda kare alma i\u015flemini yapacaks\u0131n\u0131z ve bunu bir\u00e7ok kez kullanman\u0131z gerekecekse bunu fonksiyon haline getirmek i\u015flemlerinizi biraz daha kolayla\u015ft\u0131racakt\u0131r. \u00d6rne\u011fimizi inceleyelim: say\u0131 = 12 \u00e7\u0131kt\u0131 = \"{} say\u0131s\u0131n\u0131n karesi {} say\u0131s\u0131d\u0131r\" print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) 12 say\u0131s\u0131n\u0131n karesi 144 say\u0131s\u0131d\u0131r Bu kodu bir\u00e7ok yerde tekrar etti\u011finizi varsayarsak, \u015fu \u015fekilde bir g\u00f6r\u00fcnt\u00fc olu\u015facak: say\u0131 = 12 \u00e7\u0131kt\u0131 = \"{} say\u0131s\u0131n\u0131n karesi {} say\u0131s\u0131d\u0131r\" print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) ####programla ilgili ba\u015fka kodlar### say\u0131 = 14 print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) ###programla ilgili ba\u015fka kodlar### say\u0131 = 53 print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) 12 say\u0131s\u0131n\u0131n karesi 144 say\u0131s\u0131d\u0131r 14 say\u0131s\u0131n\u0131n karesi 196 say\u0131s\u0131d\u0131r 53 say\u0131s\u0131n\u0131n karesi 2809 say\u0131s\u0131d\u0131r G\u00f6rm\u00fc\u015f oldu\u011funuz gibi fazladan zaman harcad\u0131k ve gereksiz bir kod kalabal\u0131\u011f\u0131 olu\u015ftu. Bu i\u015flemi bir fonksiyon ile yapal\u0131m: def kare_bul(sayi): sonuc = \"{} say\u0131s\u0131n\u0131n karesi {} say\u0131s\u0131d\u0131r\" print(sonuc.format(sayi, sayi**2)) \u015eimdide tan\u0131mlad\u0131\u011f\u0131m\u0131z bu fonksiyonu \u00e7a\u011f\u0131ral\u0131m. kare_bul(12) 12 say\u0131s\u0131n\u0131n karesi 144 say\u0131s\u0131d\u0131r kare_bul fonksiyonu ile i\u015flerimiz hem kolayla\u015ft\u0131 hem de kod tekrar\u0131ndan ka\u00e7\u0131nm\u0131\u015f olduk. Parametreler ve Arg\u00fcmanlar Parametreler fonksiyon tan\u0131mlarken parantez i\u00e7inde belirtti\u011fimiz, fonksiyon g\u00f6vdesinde yap\u0131lan i\u015fin de\u011fi\u015fken \u00f6\u011felerini g\u00f6steren par\u00e7alard\u0131r. Bir fonksiyonu tan\u0131mlarken belirledi\u011fimiz adlara parametre , ayn\u0131 fonksiyonu \u00e7a\u011f\u0131r\u0131rken belirledi\u011fimiz adlara ise arg\u00fcman deniyor. \u00d6rne\u011fin: def kopyala(kaynak_dosya, hedef_dizin): #bu k\u0131s\u0131mda bulunan de\u011ferler parametredir. cikti = \"{} adl\u0131 dosya {} adl\u0131 dizin i\u00e7ine kopyaland\u0131!\" print(cikti.format(kaynak_dosya, hedef_dizin)) kopyala(\"deneme.txt\", \"/home/abdullah/Desktop\") #bu k\u0131s\u0131mda t\u0131rnak i\u00e7inde tan\u0131mlad\u0131klar\u0131m\u0131z ise arg\u00fcmand\u0131r. Burada kopyala() adl\u0131 bir fonksiyon tan\u0131mlad\u0131k. Bu fonksiyon toplam iki adet parametre al\u0131yor: kaynak_dosya ve hedef_dizin . G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bu iki parametre ger\u00e7ekten de fonksiyon g\u00f6vdesinde yap\u0131lan i\u015fin de\u011fi\u015fken \u00f6\u011felerini g\u00f6steriyor. Bu fonksiyonun \u00fcretece\u011fi \u00e7\u0131kt\u0131, fonksiyonu \u00e7a\u011f\u0131ran ki\u015finin bu iki parametreye verece\u011fi de\u011ferlere ba\u011fl\u0131 olarak \u015fekillenecek. S\u0131ral\u0131 (veya \u0130simsiz) Parametreler Python\u2019da \u015f\u00f6yle bir fonksiyon tan\u0131mlayabilece\u011fimizi biliyoruz: def kayit_olustur(isim, soyisim, isletim, sehir): print(\"-\"*30) print(\"isim : \", isim) print(\"soyisim : \", soyisim) print(\"i\u015fletim sistemi: \", isletim) print(\"\u015fehir : \", sehir) print(\"-\"*30) Yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z bu fonksiyonu \u015fu \u015fekilde \u00e7a\u011f\u0131rabiliriz: kayit_olustur(\"Ahmet\", \"\u00d6z\", \"Debian\", \"Ankara\") Bu fonksiyonda, yazd\u0131\u011f\u0131m\u0131z parametrelerin s\u0131ras\u0131 b\u00fcy\u00fck \u00f6nem ta\u015f\u0131r. Mesela yukar\u0131daki fonksiyonu \u015f\u00f6yle \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131z\u0131 d\u00fc\u015f\u00fcn\u00fcn: kayit_olustur(\"Debian\", \"Ankara\", \"\u00d6z\", \"Ahmet\") E\u011fer fonksiyon parametrelerini bu s\u0131rayla kullan\u0131rsak ald\u0131\u011f\u0131m\u0131z \u00e7\u0131kt\u0131 hatal\u0131 olacakt\u0131r: '------------------------------' isim : Debian soyisim : Ankara i\u015fletim sistemi: \u00d6z \u015fehir : Ahmet '------------------------------' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, isim, soyisim ve \u00f6teki bilgiler birbirine kar\u0131\u015fm\u0131\u015f. \u0130\u015fte Python\u2019da, verili\u015f s\u0131ras\u0131 \u00f6nem ta\u015f\u0131yan bu t\u00fcr parametrelere \u2018s\u0131ral\u0131 parametreler\u2019 (veya isimsiz parametreler) ad\u0131 verilir. \u0130simli Parametreler Bir \u00f6nceki b\u00f6l\u00fcmde verdi\u011fimiz \u015fu \u00f6rne\u011fi yeniden ele alal\u0131m: def kay\u0131t_olu\u015ftur(isim, soyisim, isletim, sehir): print(\"-\"*30) print(\"isim : \", isim) print(\"soyisim : \", soyisim) print(\"i\u015fletim sistemi: \", isletim) print(\"\u015fehir : \", sehir) print(\"-\"*30) Bu fonksiyonu \u00e7a\u011f\u0131r\u0131rken parametrelerin s\u0131ras\u0131n\u0131 do\u011fru vermenin, alaca\u011f\u0131m\u0131z \u00e7\u0131kt\u0131n\u0131n d\u00fczg\u00fcn olmas\u0131 bak\u0131m\u0131ndan b\u00fcy\u00fck \u00f6nem ta\u015f\u0131d\u0131\u011f\u0131n\u0131 biliyoruz. Ancak \u00f6zellikle parametre say\u0131s\u0131n\u0131n \u00e7ok oldu\u011fu fonksiyonlarda parametre s\u0131ras\u0131n\u0131 ak\u0131lda tutmak zor olabilir. B\u00f6yle durumlarda parametreleri isimleri ile birlikte kullanmay\u0131 tercih edebiliriz: kayit_olustur(soyisim=\"\u00d6z\", isim=\"Ahmet\", isletim=\"Debian\", sehir= \"Ankara\") B\u00f6ylece fonksiyon parametrelerini istedi\u011fimiz s\u0131ra ile kullanabiliriz. Ancak burada dikkat etmemiz gereken baz\u0131 noktalar var. Python\u2019da isimli bir parametrenin ard\u0131ndan s\u0131ral\u0131 bir parametre gelemez. Yani \u015fu kullan\u0131m yanl\u0131\u015ft\u0131r: kayit_olustur(soyisim=\"\u00d6z\", isim=\"Ahmet\", \"Debian\", \"Ankara\") Bu kodlar bize \u015fu hatay\u0131 verir: File \"<stdin>\", line 1 SyntaxError: non-keyword arg after keyword arg Bu y\u00fczden, e\u011fer isimli parametreler kullanacaksak, isimli parametrelerden sonra s\u0131ral\u0131 parametre kullanmamaya dikkat ediyoruz. Varsay\u0131lan De\u011ferli Parametreler Bu durumu print fonksiyonu \u00fczerinden a\u00e7\u0131klamaya \u00e7al\u0131\u015fal\u0131m: print(\"F\u0131rat\", \"\u00d6zg\u00fcl\", sep=\" \", end=\"\\n\", file=sys.stdout, flush=False) Yani biz g\u00f6rmesek de asl\u0131nda her print() \u00e7a\u011fr\u0131s\u0131 sep, end, file ve flush parametrelerini de i\u00e7eriyor. Biz bu \u00f6zel parametreleri kullanmasak da, yazd\u0131\u011f\u0131m\u0131z kod d\u00fczg\u00fcn bir \u015fekilde \u00e7al\u0131\u015f\u0131r. Bunun nedeni, sep, end, file ve flush parametrelerinin \u00f6ntan\u0131ml\u0131 olarak birtak\u0131m de\u011ferlere sahip olmas\u0131d\u0131r. Yani biz bu parametrelere kendimiz bir de\u011fer atamazsak Python bu parametrelere kendi belirledi\u011fi baz\u0131 \u00f6ntan\u0131ml\u0131 de\u011ferleri atayacakt\u0131r. Dolay\u0131s\u0131yla, e\u011fer biz ba\u015fka bir de\u011fer yazmazsak, sep parametresi \u201d \u201c de\u011ferine, end parametresi \u201cn\u201d de\u011ferine, file parametresi sys.stdout de\u011ferine, flush parametresi ise False de\u011ferine sahip olacakt\u0131r. \u0130\u015fte bu t\u00fcr parametrelere Python\u2019da \u2018varsay\u0131lan de\u011ferli parametreler\u2019 ad\u0131 verilir. Peki biz kendimiz varsay\u0131lan de\u011ferli parametreler i\u00e7eren fonksiyonlar\u0131 nas\u0131l tan\u0131mlayabiliriz? \u015eu \u00f6rne\u011fe dikkatlice bak\u0131n: def kur(kurulum_dizini=\"/usr/bin/\"): print(\"Program {} dizinine kuruldu!\".format(kurulum_dizini)) Burada kur() adl\u0131 bir fonksiyon tan\u0131mlad\u0131k. Bu fonksiyonun g\u00f6revi, yazd\u0131\u011f\u0131m\u0131z bir program\u0131, kullan\u0131c\u0131n\u0131n bilgisayar\u0131ndaki bir dizine kurmak ve program\u0131n hangi dizine kuruldu\u011fu konusunda kullan\u0131c\u0131y\u0131 bilgilendirmek. Bu fonksiyonu \u015fu \u015fekilde \u00e7a\u011f\u0131rabiliriz: kur() E\u011fer kur() fonksiyonunu b\u00f6yle \u00e7a\u011f\u0131r\u0131rsak bize \u015fu \u00e7\u0131kt\u0131y\u0131 verecektir: Program /usr/bin/ dizinine kuruldu! G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, kur() fonksiyonunun kurulum_dizini adl\u0131 bir parametresi var. Biz fonksiyonu tan\u0131mlarken, bu parametreye bir varsay\u0131lan de\u011fer atad\u0131k (/usr/bin/). B\u00f6ylece kur() fonksiyonu parametresiz olarak \u00e7a\u011fr\u0131ld\u0131\u011f\u0131nda bu varsay\u0131lan de\u011fer devreye girdi. Rastgele Say\u0131da \u0130simsiz Parametre Belirleme Bir \u00f6rnek \u00fczerinden fonksiyonlar\u0131n rastgele say\u0131da isimsiz parametre alma durumuna bakal\u0131m. def fonksiyon(*parametreler): print(parametreler) fonksiyon(1, 2, 3, 4, 5) Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda \u015fu \u00e7\u0131kt\u0131y\u0131 alaca\u011f\u0131z: (1, 2, 3, 4, 5) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyon tan\u0131m\u0131 i\u00e7inde kulland\u0131\u011f\u0131m\u0131z * i\u015fareti sayesinde fonksiyonumuzun pratik olarak s\u0131n\u0131rs\u0131z say\u0131da parametre kabul etmesini sa\u011flayabiliyoruz. Bu arada, bu t\u00fcr fonksiyonlar\u0131n alabilece\u011fi parametre say\u0131s\u0131, dedi\u011fimiz gibi, pratikte s\u0131n\u0131rs\u0131zd\u0131r, ama teknik olarak bu say\u0131 256 adedi ge\u00e7emez. Peki b\u00f6yle bir fonksiyon tan\u0131mlamak ne i\u015fimize yarar? Mesela bu yap\u0131y\u0131 kullanarak \u015f\u00f6yle bir fonksiyon yazabilirsiniz: def carp(*sayilar): sonuc = 1 for i in sayilar: sonuc *= i print(sonuc) Bu fonksiyon kendisine verilen b\u00fct\u00fcn parametreleri birbiriyle \u00e7arpar. \u00d6rne\u011fin: carp(1, 2, 3, 4) Bu kodun \u00e7\u0131kt\u0131s\u0131 24 olacakt\u0131r. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonumuza istedi\u011fimiz say\u0131da parametre vererek bu say\u0131lar\u0131n birbiriyle \u00e7arp\u0131lmas\u0131n\u0131 sa\u011flayabiliyoruz. Elbette * i\u015faretiyle birlikte kullanaca\u011f\u0131n\u0131z parametrenin ad\u0131 olarak, Python\u2019\u0131n de\u011fi\u015fken adland\u0131rma kurallar\u0131na uygun b\u00fct\u00fcn kelimeleri belirleyebilirsiniz. Mesela biz yukar\u0131da parametreler ad\u0131n\u0131 tercih ettik. Ama Python d\u00fcnyas\u0131nda * i\u015faretiyle birlikte kullan\u0131lacak parametrenin ad\u0131 geleneksel olarak, arg\u00fcmanlar anlam\u0131nda args 't\u0131r. Yani Python programc\u0131lar\u0131 genellikle yukar\u0131daki gibi bir fonksiyonu \u015f\u00f6yle tan\u0131mlar: def fonksiyon(*args): ... * i\u015fareti ile birlikte kullan\u0131lacak parametrenin ad\u0131n\u0131 args** yapmak bir zorunluluk olmamakla birlikte, ba\u015fka Python programc\u0131lar\u0131n\u0131n kodlar\u0131n\u0131z\u0131 daha kolay anlayabilmesi a\u00e7\u0131s\u0131ndan bu gelene\u011fi devam ettirmenizi tavsiye ederim. Yazd\u0131\u011f\u0131m\u0131z kodlarda Python programlama dilinin geleneklerine ba\u011fl\u0131 kalmak \u00e7o\u011funlukla iyi bir al\u0131\u015fkanl\u0131kt\u0131r. Rastgele Say\u0131da \u0130simli Parametre Belirleme Bir \u00f6nceki b\u00f6l\u00fcmde oludu\u011fu gibi, rastgele say\u0131da isimli parametre belirlemek de m\u00fcmk\u00fcnd\u00fcr. \u00d6rne\u011fin: def fonksiyon(**parametreler): print(parametreler) fonksiyon(isim=\"Ahmet\", soyisim=\"\u00d6z\", meslek=\"M\u00fchendis\", sehir=\"Ankara\") Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda \u015f\u00f6yle bir \u00e7\u0131kt\u0131 al\u0131yoruz: {'sehir': 'Ankara', 'isim': 'Ahmet', 'soyisim': '\u00d6z', 'meslek': 'M\u00fchendis'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonu tan\u0131mlarken parametremizin sol taraf\u0131na yerle\u015ftirdi\u011fimiz ** i\u015fareti, bu fonksiyonu \u00e7a\u011f\u0131r\u0131rken yazd\u0131\u011f\u0131m\u0131z isimli parametrelerin bize bir s\u00f6zl\u00fck olarak verilmesini sa\u011fl\u0131yor. Bu yap\u0131n\u0131n bize bir s\u00f6zl\u00fck verdi\u011fini bildikten sonra, bunu s\u00f6zl\u00fck veri tipinin kurallar\u0131 \u00e7er\u00e7evesinde istedi\u011fimiz \u015fekilde kullanabiliriz. T\u0131pk\u0131 * i\u015faretlerinin betimledi\u011fi parametrenin geleneksel olarak args \u015feklinde adland\u0131r\u0131lmas\u0131 gibi, i\u015faretlerinin betimledi\u011fi parametre de geleneksel olarak kwargs \u015feklinde adland\u0131r\u0131l\u0131r. Dolay\u0131s\u0131yla yukar\u0131daki gibi bir fonksiyonu Python programc\u0131lar\u0131 \u015f\u00f6yle tan\u0131mlar: def kay\u0131t_olustur(**kwargs): ... i\u015faretli parametreler pek \u00e7ok farkl\u0131 durumda i\u015finize yarayabilir veya i\u015finizi kolayla\u015ft\u0131rabilir. Mesela * ve i\u015faretlerini kullanarak \u015f\u00f6yle bir program yazabilirsiniz: def kar\u015f\u0131l\u0131k_bul(*args, **kwargs): for s\u00f6zc\u00fck in args: if s\u00f6zc\u00fck in kwargs: print(\"{} = {}\".format(s\u00f6zc\u00fck, kwargs[s\u00f6zc\u00fck])) else: print(\"{} kelimesi s\u00f6zl\u00fckte yok!\".format(s\u00f6zc\u00fck)) s\u00f6zl\u00fck = {\"kitap\" : \"book\", \"bilgisayar\" : \"computer\", \"programlama\": \"programming\"} kar\u015f\u0131l\u0131k_bul(\"kitap\", \"bilgisayar\", \"programlama\", \"fonksiyon\", **s\u00f6zl\u00fck) Burada tan\u0131mlad\u0131\u011f\u0131m\u0131z kar\u015f\u0131l\u0131k_bul() adl\u0131 fonksiyon, kendisine verilen parametreleri ( args), bir s\u00f6zl\u00fck i\u00e7inde arayarak ( **s\u00f6zl\u00fck) kar\u015f\u0131l\u0131klar\u0131n\u0131 bize \u00e7\u0131kt\u0131 olarak veriyor. E\u011fer verilen parametre s\u00f6zl\u00fckte yoksa, ilgili kelimenin s\u00f6zl\u00fckte bulunmad\u0131\u011f\u0131 konusunda da bizi bilgilendiriyor. kar\u015f\u0131l\u0131k_bul() adl\u0131 fonksiyonu nas\u0131l tan\u0131mlad\u0131\u011f\u0131m\u0131za \u00e7ok dikkat edin. Parametre listesi i\u00e7inde belirtti\u011fimiz args ifadesi sayesinde, fonksiyonu kullanacak ki\u015fiye, istedi\u011fi say\u0131da isimsiz parametre girme imkan\u0131 tan\u0131yoruz. **kwargs parametresi ise kullan\u0131c\u0131ya istedi\u011fi say\u0131da isimli parametre girme olana\u011f\u0131 veriyor. return Deyimi Bu b\u00f6l\u00fcmde return adl\u0131 bir deyimden s\u00f6z edece\u011fiz. \u00d6ncelikle basit bir \u00f6rnek verelim: def ismin_ne(): isim = input(\"ismin ne? \") print(isim) ismin_ne() adl\u0131 fonksiyonun tek g\u00f6revi kullan\u0131c\u0131dan ald\u0131\u011f\u0131 isim bilgisini ekrana basmakt\u0131r. Peki bu fonksiyonu bir de \u015f\u00f6yle tan\u0131mlayal\u0131m: def ismin_ne(): isim = input(\"ismin ne? \") return isim \u015eimdi de bu fonksiyonu \u00e7a\u011f\u0131ral\u0131m: ismin_ne() G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonu \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131zda yaln\u0131zca fonksiyon g\u00f6vdesindeki input() fonksiyonu \u00e7al\u0131\u015ft\u0131, ama bu fonksiyondan gelen veri ekrana \u00e7\u0131kt\u0131 olarak verilmedi. \u00c7\u00fcnk\u00fc biz burada herhangi bir ekrana basma (\u2018print\u2019) i\u015flemi yapmad\u0131k. Yapt\u0131\u011f\u0131m\u0131z tek \u015fey isim adl\u0131 de\u011fi\u015fkeni \u2018d\u00f6nd\u00fcrmek\u2019. Peki bu ne anlama geliyor? return kelimesi \u0130ngilizcede \u2018iade etmek, geri vermek, d\u00f6nd\u00fcrmek\u2019 gibi anlamlar ta\u015f\u0131r. \u0130\u015fte yukar\u0131daki \u00f6rnekte de return deyiminin yapt\u0131\u011f\u0131 i\u015f budur. Yani bu deyim bize fonksiyondan bir de\u011fer \u2018d\u00f6nd\u00fcr\u00fcr\u2019. E\u011fer tan\u0131mlad\u0131\u011f\u0131m\u0131z bir fonksiyonda return deyimini kullanarak herhangi bir de\u011fer d\u00f6nd\u00fcrmezsek, Python fonksiyondan hususi bir de\u011ferin d\u00f6nd\u00fcr\u00fclmedi\u011fini g\u00f6stermek i\u00e7in \u2018None\u2019 adl\u0131 bir de\u011fer d\u00f6nd\u00fcr\u00fcr... \u0130\u015fte yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z ilk ismin_ne() fonksiyonunu print(ismin_ne()) \u015feklinde \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131zda ekranda None de\u011ferinin g\u00f6r\u00fcnmesinin nedeni budur. Peki bir fonksiyon i\u00e7inde herhangi bir veriyi ekrana basmay\u0131p return deyimi yard\u0131m\u0131yla d\u00f6nd\u00fcrmemizin bize ne faydas\u0131 var? Asl\u0131nda bunun cevab\u0131 \u00e7ok a\u00e7\u0131k. Bir fonksiyon i\u00e7inde bir de\u011feri d\u00f6nd\u00fcrmek yerine ekrana bast\u0131\u011f\u0131n\u0131zda o fonksiyonun i\u015flevini alabildi\u011fine k\u0131s\u0131tlam\u0131\u015f oluyorsunuz. Fonksiyonunuzun tek i\u015flevi bir de\u011feri ekrana basmak oluyor. Yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z ismin_ne() fonksiyonu \u015fu \u015fekilde \u00e7a\u011f\u0131ral\u0131m: print(\"Merhaba {}. Nas\u0131ls\u0131n?\".format(ismin_ne())) \u00c7\u0131kt\u0131m\u0131z \u015fu \u015fekilde olacakt\u0131r: ismin ne? F\u0131rat Merhaba F\u0131rat. Nas\u0131ls\u0131n? Geriye de\u011fer d\u00f6nd\u00fcren fonksiyonlarda, fonksiyonun geriye d\u00f6nd\u00fcrm\u00fc\u015f oldu\u011fu de\u011feri istedi\u011fimiz \u015fekilde kullanabiliriz. return deyimiyle ilgili son bir \u015fey daha s\u00f6yleyelim... Bu deyim, i\u00e7inde bulundu\u011fu fonksiyonun \u00e7al\u0131\u015fma s\u00fcrecini kesintiye u\u011frat\u0131r. Yani return deyimini kulland\u0131\u011f\u0131n\u0131z sat\u0131rdan sonra gelen hi\u00e7bir kod \u00e7al\u0131\u015fmaz. Basit bir \u00f6rnek verelim: def fonk(): print(3) return print(5) fonk() Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131zda yaln\u0131zca print(3) sat\u0131r\u0131n\u0131n \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131, print(5) sat\u0131r\u0131na ise hi\u00e7 ula\u015f\u0131lmad\u0131\u011f\u0131n\u0131 g\u00f6receksiniz. \u0130\u015fte bu durumun sebebi, Python\u2019\u0131n kodlar\u0131 return sat\u0131r\u0131ndan itibaren okumay\u0131 b\u0131rakmas\u0131d\u0131r. Fonksiyonlar\u0131n Kapsam\u0131 ve global Deyimi Elimizde \u015f\u00f6yle bir kod oldu\u011funu d\u00fc\u015f\u00fcnelim: x = 0 def fonk(): x = 1 return x Bu kodlarda, fonksiyonun d\u0131\u015f\u0131nda x adl\u0131 bir de\u011fi\u015fken var. Fonksiyonun i\u00e7inde de yine x ad\u0131n\u0131 ta\u015f\u0131yan ba\u015fka bir de\u011fi\u015fken var. Fonksiyonumuzun g\u00f6revi bu x de\u011fi\u015fkenini d\u00f6nd\u00fcrmek. Bu noktada size \u015f\u00f6yle bir soru sormama izin verin: Acaba fonksiyon i\u00e7inde tan\u0131mlad\u0131\u011f\u0131m\u0131z x de\u011fi\u015fkeni, fonksiyon d\u0131\u015f\u0131ndaki x de\u011fi\u015fkeninin de\u011ferini de\u011fi\u015ftiriyor mu? Bu sorunun cevab\u0131n\u0131 \u015fu kodlarla verelim: x = 0 def fonk(): x=1 return x print('fonksiyon i\u00e7indeki x: ', fonk()) print('fonksiyon d\u0131\u015f\u0131ndaki x: ', x) Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda \u015fu \u00e7\u0131kt\u0131y\u0131 alaca\u011f\u0131z: fonksiyon i\u00e7indeki x: 1 fonksiyon d\u0131\u015f\u0131ndaki x: 0 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi fonksiyon i\u00e7indeki ve fonksiyon d\u0131\u015f\u0131ndaki ayn\u0131 adl\u0131 de\u011fi\u015fkenler birbirine kar\u0131\u015fm\u0131yor. Bunun sebebi, Python\u2019daki \u2018isim alan\u0131\u2019 (namespace ) adl\u0131 bir kavramd\u0131r. Peki isim alan\u0131 ne demek? Python\u2019da de\u011fi\u015fkenlerin, fonksiyonlar\u0131n ve daha sonra g\u00f6rece\u011finiz gibi s\u0131n\u0131flar\u0131n bir kapsam\u0131 vard\u0131r. Bu kapsama Python\u2019da \u2018isim alan\u0131\u2019 ad\u0131 verilir. Dolay\u0131s\u0131yla Python\u2019da her nesnenin, ge\u00e7erli ve etkin oldu\u011fu bir isim alan\u0131 bulunur. \u00d6rne\u011fin yukar\u0131daki kodlarda fonksiyon d\u0131\u015f\u0131ndaki x de\u011fi\u015fkeni ana isim alan\u0131nda yer alan \u2018global\u2019 bir de\u011fi\u015fkendir. Fonksiyon i\u00e7indeki x de\u011fi\u015fkeni ise fonk() de\u011fi\u015fkeninin isim alan\u0131 i\u00e7inde yer alan \u2018lokal\u2019 bir de\u011fi\u015fkendir. Bu iki de\u011fi\u015fken, adlar\u0131 ayn\u0131 da olsa, birbirlerinden farkl\u0131 iki nesnedir. Bir de \u015fu \u00f6rne\u011fe bakal\u0131m: x = [] print('x\\'in ilk hali:', x) def de\u011fi\u015ftir(): print('x\\'i de\u011fi\u015ftiriyoruz...') x.append(1) return x de\u011fi\u015ftir() print('x\\'in son hali: ', x) Burada ise daha farkl\u0131 bir durum s\u00f6z konusu. Fonksiyon i\u00e7inde append() metodunu kullanarak yapt\u0131\u011f\u0131m\u0131z ekleme i\u015flemi fonksiyon d\u0131\u015f\u0131ndaki listeyi de etkiledi. Peki ama bu nas\u0131l oluyor? Python herhangi bir nesneye g\u00f6ndermede bulundu\u011fumuzda, yani o nesnenin de\u011ferini talep etti\u011fimizde arad\u0131\u011f\u0131m\u0131z nesneyi ilk \u00f6nce mevcut isim alan\u0131 i\u00e7inde arar. E\u011fer aranan nesneyi mevcut isim alan\u0131 i\u00e7inde bulamazsa yukar\u0131ya do\u011fru b\u00fct\u00fcn isim alanlar\u0131n\u0131 tek tek kontrol eder. \u0130\u015fte Python programlama dili \u00e7\u00f6z\u00fcm olacak bir ara\u00e7 sunar bize. Bu arac\u0131n ad\u0131 global. Gelin isterseniz bu global adl\u0131 deyimin nas\u0131l kullan\u0131laca\u011f\u0131na bakal\u0131m \u00f6nce... \u015eu kodlar\u0131n hata verece\u011fini biliyorsunuz: isim = 'F\u0131rat' def fonk(): isim += ' \u00d6zg\u00fcl' return isim print(fonk()) Ama bu kodlara \u015f\u00f6yle bir ekleme yaparsan\u0131z i\u015fler de\u011fi\u015fir: isim = 'F\u0131rat' def fonk(): global isim isim += ' \u00d6zg\u00fcl' return isim print(fonk()) Burada fonk() adl\u0131 fonksiyonun ilk sat\u0131r\u0131nda \u015f\u00f6yle bir kod g\u00f6r\u00fcyoruz: global isim \u0130\u015fte bu sat\u0131r, isim adl\u0131 de\u011fi\u015fkenin global alana ta\u015f\u0131nmas\u0131n\u0131 sa\u011fl\u0131yor. B\u00f6ylece global alanda bulunan isim adl\u0131 de\u011fi\u015fkeni de\u011fi\u015fikli\u011fe u\u011fratabiliyoruz. global deyimi her ne kadar ilk bak\u0131\u015fta \u00e7ok faydal\u0131 bir ara\u00e7m\u0131\u015f gibi g\u00f6r\u00fcnse de asl\u0131nda programlar\u0131m\u0131zda genellikle bu deyimi kullanmaktan ka\u00e7\u0131nmam\u0131z iyi bir fikir olacakt\u0131r. \u00c7\u00fcnk\u00fc bu deyim asl\u0131nda global alan\u0131 kirletmemize neden oluyor. Global de\u011fi\u015fkenlerin lokal isim alanlar\u0131nda de\u011fi\u015fikli\u011fe u\u011frat\u0131lmas\u0131, e\u011fer dikkatsiz davran\u0131rsan\u0131z programlar\u0131n\u0131z\u0131n hatal\u0131 \u00e7al\u0131\u015fmas\u0131na yol a\u00e7abilir Son G\u00fcncelleme: 25 Aral\u0131k 2019 - \u00c7ar\u015famba","title":"Fonksiyonlar"},{"location":"python/python_fonksiyonlar/#fonksiyonlar","text":"","title":"Fonksiyonlar"},{"location":"python/python_fonksiyonlar/#fonksiyon-nedir-ve-ne-ise-yarar","text":"Fonksiyonlar\u0131n genel g\u00f6r\u00fcn\u00fc\u015f\u00fc ve yap\u0131s\u0131: Her fonksiyonun bir ad\u0131 bulunur ve fonksiyonlar sahip olduklar\u0131 bu adlarla an\u0131l\u0131r. (print fonksiyonu, open fonksiyonu, type fonksiyonu, input fonksiyonu, len fonksiyonu vb.) \u015eekil olarak, her fonksiyonun isminin yan\u0131nda birer parantez i\u015fareti bulunur. (open(), print(), input(), len() vb.) Bu parantez i\u015faretlerinin i\u00e7ine, fonksiyonlara i\u015flevsellik kazand\u0131ran baz\u0131 parametreler yaz\u0131l\u0131r. (open(dosya_ad\u0131), print(\"Merhaba Zalim D\u00fcnya!\"), len(\"kahramanmara\u015f\") vb.) Fonksiyonlar farkl\u0131 say\u0131da parametre alabilir. \u00d6rne\u011fin print() fonksiyonu toplam 256 adet parametre alabilirken, input() fonksiyonu yaln\u0131zca tek bir parametre al\u0131r. Fonksiyonlar\u0131n isimli ve isimsiz parametreleri vard\u0131r. print() fonksiyonundaki sep, end ve file parametreleri isimli parametrelere \u00f6rnekken, mesela print(\"Merhaba D\u00fcnya!\") kodunda Merhaba D\u00fcnya! parametresi isimsiz bir parametredir. Ayn\u0131 \u015fekilde input(\"Ad\u0131n\u0131z: \") gibi bir kodda Ad\u0131n\u0131z: parametresi isimsiz bir parametredir. Fonksiyonlar\u0131n, isimli ve isimsiz parametreleri d\u0131\u015f\u0131nda, bir de varsay\u0131lan de\u011ferli parametreleri vard\u0131r. \u00d6rne\u011fin print() fonksiyonunun sep, end ve file parametreleri varsay\u0131lan de\u011ferli parametrelere birer \u00f6rnektir. E\u011fer bir parametrenin varsay\u0131lan bir de\u011feri varsa, o parametreye herhangi bir de\u011fer vermeden de fonksiyonu kullanabiliriz. Python bu parametrelere, belirli de\u011ferleri \u00f6ntan\u0131ml\u0131 olarak kendisi atayacakt\u0131r. Tabii e\u011fer istersek, varsay\u0131lan de\u011ferli parametrelere kendimiz de ba\u015fka birtak\u0131m de\u011ferler verebiliriz. Fonksiyonlar\u0131n g\u00f6revi, karma\u015f\u0131k i\u015flemleri bir araya toplayarak, bu i\u015flemleri tek ad\u0131mda yapmam\u0131z\u0131 sa\u011flamakt\u0131r. Fonksiyonlar \u00e7o\u011fu zaman, yapmak istedi\u011fimiz i\u015flemler i\u00e7in bir \u015fablon vazifesi g\u00f6r\u00fcr. Fonksiyonlar\u0131 kullanarak, bir veya birka\u00e7 ad\u0131mdan olu\u015fan i\u015flemleri tek bir isim alt\u0131nda toplayabiliriz. Python\u2019daki \u2018fonksiyon\u2019 kavram\u0131 ba\u015fka programlama dillerinde \u2018rutin\u2019 veya \u2018prosed\u00fcr\u2019 olarak adland\u0131r\u0131l\u0131r. Ger\u00e7ekten de fonksiyonlar rutin olarak tekrar edilen g\u00f6revleri veya prosed\u00fcrleri tek bir ad/\u00e7at\u0131 alt\u0131nda toplayan ara\u00e7lard\u0131r. Fonksiyonlar\u0131 daha iyi kavramak i\u00e7in print() fonksiyonunu ele alal\u0131m: Kendisine verilen \u201cPython\u201d ve \"2000\" gibi de\u011ferleri ekrana bas\u0131yor, sep=\u201d \u201c parametresinin etkisiyle, bu parametreler aras\u0131na birer bo\u015fluk ekliyor, end=\u201d\\n\u201d parametresinin etkisiyle, sonuncu parametreyi de ekrana bast\u0131ktan sonra bir alt sat\u0131ra ge\u00e7iyor, file=sys.stdout parametresinin etkisiyle, \u00e7\u0131kt\u0131 konumu olarak komut ekran\u0131n\u0131 kullan\u0131yor. Yani \u00e7\u0131kt\u0131lar\u0131 ekrana veriyor. flush=False parametresinin etkisiyle, \u00e7\u0131kt\u0131lar ekrana g\u00f6nderilmeden \u00f6nce tamponda bekletiliyor.","title":"Fonksiyon Nedir ve Ne \u0130\u015fe Yarar?"},{"location":"python/python_fonksiyonlar/#fonksiyon-tanmlamak-ve-cagrmak","text":"Fonksiyon tan\u0131malama ve \u00e7a\u011f\u0131rma i\u015flemini bir \u00f6rnek \u00fczerinden anlamaya \u00e7al\u0131\u015fal\u0131m. Elimizde bulunan kay\u0131t olu\u015ftur isimli fonksiyon ile ekrana \u015fu \u015fekilde bir \u00e7\u0131kt\u0131 verelim: '-------------------------' isim : Mehmet soyisim : \u00d6ztaban i\u015fletim sistemi: Debian \u015fehir : Ankara '-------------------------' \u0130lk olarak kay\u0131t_olustur() adl\u0131 fonksiyonu kullanabilmek i\u00e7in bu ada sahip fonksiyonu a\u015fa\u011f\u0131daki \u015fekilde tan\u0131mlamal\u0131y\u0131z: def kay\u0131t_olustur(isim, soyisim, isletim, sehir): print(\"-\"*30) print(\"isim : \", isim) print(\"soyisim : \", soyisim) print(\"i\u015fletim sistemi: \", isletim) print(\"\u015fehir : \", sehir) print(\"-\"*30) Fonksiyonumuzu test edelim: kay\u0131t_olustur(\"Abdullah\",\"\u015eahin\",\"Windows\",\"Konya\") ------------------------------ isim : Abdullah soyisim : \u015eahin i\u015fletim sistemi: Windows \u015fehir : Konya ------------------------------ G\u00f6rm\u00fc\u015f oldu\u011funuz gibi yazm\u0131\u015f oldu\u011fumuz fonksiyon \u00e7al\u0131\u015ft\u0131. \u015eimdi yaz\u0131\u011f\u0131m\u0131z yap\u0131y\u0131 irdeleyelim: Kodlar def adl\u0131 bir ifade ile ba\u015flam\u0131\u015f. Bu ifadenin ingilizce olarak a\u00e7\u0131l\u0131m\u0131 definition. Bunun ard\u0131ndan \u2018kay\u0131t_olustur\u2019 ifadesini g\u00f6r\u00fcyoruz. Bu ifadeyi, i\u00e7inde birtak\u0131m kelimeler bar\u0131nd\u0131ran bir parantez \u00e7ifti izliyor. Parantezin i\u00e7inde, isim, soyisim, isletim ve sehir adl\u0131 de\u011ferler var. def ile ba\u015flayan bu sat\u0131r iki nokta \u00fcst \u00fcste i\u015fareti ile son buluyor. \u0130lk sat\u0131r\u0131n ard\u0131ndan gelen k\u0131s\u0131m ilk sat\u0131ra g\u00f6re girintili bir \u015fekilde yaz\u0131lm\u0131\u015f. kay\u0131t_olustur(\"Abdullah\",\"\u015eahin\",\"Windows\",\"Konya\") sat\u0131r\u0131 \u00f6nceki sat\u0131rlara g\u00f6re girintisiz yaz\u0131lm\u0131\u015f. E\u011fer bu kodlara dikkatlice bakacak olursan\u0131z, asl\u0131nda bu kodlar\u0131n topu topu iki par\u00e7adan olu\u015ftu\u011funu g\u00f6receksiniz. \u0130sterseniz yukar\u0131daki yap\u0131y\u0131 biraz sadele\u015ftirelim: def kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4): (...) kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4) Bu yap\u0131n\u0131n ilk par\u00e7as\u0131 \u015fudur: ```python def kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4): (...) ``` \u0130kinci par\u00e7as\u0131 ise \u015fu: kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4) Teknik olarak s\u00f6ylemek gerekirse, ilk par\u00e7aya \u2018fonksiyon tan\u0131m\u0131\u2019 (function definition), ikinci par\u00e7aya ise \u2018fonksiyon \u00e7a\u011fr\u0131s\u0131\u2019 (function call ) ad\u0131 verilir. Dolay\u0131s\u0131yla bir fonksiyonun ya\u015fam d\u00f6ng\u00fcs\u00fc iki a\u015famadan olu\u015fur. Buna g\u00f6re bir fonksiyon \u00f6nce tan\u0131mlan\u0131r; def kay\u0131t_olu\u015ftur(parametre1, parametre2, parametre3, parametre4): (...) ...sonra da \u00e7a\u011fr\u0131l\u0131r. Bir fonksiyon \u00e7a\u011fr\u0131lmadan asla \u00e7al\u0131\u015fmaz. kay\u0131t_olustur(parametre1, parametre2, parametre3, parametre4)","title":"Fonksiyon Tan\u0131mlamak ve \u00c7a\u011f\u0131rmak"},{"location":"python/python_fonksiyonlar/#fonksiyonlarn-yaps","text":"Bir fonksiyonun ilk par\u00e7as\u0131na \u2018fonksiyon tan\u0131m\u0131\u2019 (function definition) ad\u0131 verilir. Bir fonksiyonu tan\u0131mlamak i\u00e7in def adl\u0131 bir par\u00e7ac\u0131ktan yararlan\u0131yoruz. \u00d6rne\u011fin: def bir_fonksiyon(): (...) Burada def par\u00e7ac\u0131\u011f\u0131, tan\u0131mlad\u0131\u011f\u0131m\u0131z \u015feyin bir fonksiyon oldu\u011funu g\u00f6steriyor. bir_fonksiyon ifadesi ise tan\u0131mlad\u0131\u011f\u0131m\u0131z bu fonksiyonun ad\u0131d\u0131r. Fonksiyonu tan\u0131mlad\u0131ktan sonra, \u00e7a\u011f\u0131r\u0131rken bu ad\u0131 kullanaca\u011f\u0131z. def bir_fonksiyon(): ifadesinin sonundaki iki nokta i\u015faretinden de tahmin edebilece\u011finiz gibi, sonraki sat\u0131ra yazaca\u011f\u0131m\u0131z kodlar girintili olacak. Fonksiyon g\u00f6vdesine, def ifadesinden itibaren 4 (d\u00f6rt) bo\u015flukluk bir girinti veriyoruz. def ifadesinden itibaren girintili olarak yazd\u0131\u011f\u0131m\u0131z k\u0131sm\u0131n tamam\u0131 o fonksiyonun g\u00f6vdesini olu\u015fturur ve b\u00fct\u00fcn\u00fcyle o fonksiyona aittir. \u00d6rne\u011fin: def selamla(): print(\"Merhaba D\u00fcnya!\") Fonksiyonlarla ilgili s\u00f6ylediklerimizi toparlayacak olursak \u015f\u00f6yle bir bilgi listesi ortaya \u00e7\u0131karabiliriz: Python\u2019da kabaca iki tip fonksiyon bulunur. Bunlardan biri g\u00f6m\u00fcl\u00fc fonksiyonlar (builtin functions ), \u00f6teki ise \u00f6zel fonksiyonlard\u0131r (custom functions ). Burada \u2018\u00f6zel\u2019 ifadesi, \u2018kullan\u0131c\u0131n\u0131n ihtiya\u00e7lar\u0131na g\u00f6re kullan\u0131c\u0131 taraf\u0131ndan \u00f6zel olarak \u00fcretilmi\u015f\u2019 anlam\u0131na gelir. G\u00f6m\u00fcl\u00fc fonksiyonlar; Python geli\u015ftiricileri taraf\u0131ndan tan\u0131mlan\u0131p dilin i\u00e7ine g\u00f6m\u00fclm\u00fc\u015f olan print(), open(), type(), str(), int() vb. fonksiyonlard\u0131r. Bu fonksiyonlar halihaz\u0131rda tan\u0131mlan\u0131p hizmetimize sunuldu\u011fu i\u00e7in bunlar\u0131 biz herhangi bir tan\u0131mlama i\u015flemi yapmadan do\u011frudan kullanabiliriz. \u00d6zel fonksiyonlar ise, g\u00f6m\u00fcl\u00fc fonksiyonlar\u0131n aksine, Python geli\u015ftiricileri taraf\u0131ndan de\u011fil, bizim taraf\u0131m\u0131zdan tan\u0131mlanm\u0131\u015ft\u0131r. Bu fonksiyonlar dilin bir par\u00e7as\u0131 olmad\u0131\u011f\u0131ndan, bu fonksiyonlar\u0131 kullanabilmek i\u00e7in bunlar\u0131 \u00f6ncelikle tan\u0131mlamam\u0131z gerekir. Python\u2019da bir fonksiyonun ya\u015fam d\u00f6ng\u00fcs\u00fc iki a\u015famadan olu\u015fur: Tan\u0131mlanma ve \u00e7a\u011fr\u0131lma. Bir fonksiyonun \u00e7a\u011fr\u0131labilmesi (yani kullan\u0131labilmesi) i\u00e7in mutlaka birisi taraf\u0131ndan tan\u0131mlanm\u0131\u015f olmas\u0131 gerekir. Fonksiyonu tan\u0131mlayan ki\u015fi Python geli\u015ftiricileri olabilece\u011fi gibi, siz de olabilirsiniz. Ama neticede ortada bir fonksiyon varsa, bir yerlerde o fonksiyonun tan\u0131m\u0131 da vard\u0131r. Fonksiyon tan\u0131mlamak i\u00e7in def adl\u0131 bir ifadeden yararlan\u0131yoruz. Bu ifadeden sonra, tan\u0131mlayaca\u011f\u0131m\u0131z fonksiyonun ad\u0131n\u0131 belirleyip iki nokta \u00fcst \u00fcste i\u015fareti koyuyoruz. \u0130ki nokta \u00fcst \u00fcste i\u015faretinden sonra gelen sat\u0131rlar girintili olarak yaz\u0131l\u0131yor. Daha \u00f6nce \u00f6\u011frendi\u011fimiz b\u00fct\u00fcn girintileme kurallar\u0131 burada da ge\u00e7erlidir. Fonksiyonun ad\u0131n\u0131 belirleyip iki nokta \u00fcst \u00fcste koyduktan sonra, alt sat\u0131rda girintili olarak yazd\u0131\u011f\u0131m\u0131z b\u00fct\u00fcn kodlar fonksiyonun g\u00f6vdesini olu\u015fturur. Do\u011fal olarak, bir fonksiyonun g\u00f6vdesindeki b\u00fct\u00fcn kodlar o fonksiyona aittir. Girintinin d\u0131\u015f\u0131na \u00e7\u0131k\u0131ld\u0131\u011f\u0131 anda fonksiyon tan\u0131m\u0131 da sona erer.","title":"Fonksiyonlar\u0131n Yap\u0131s\u0131"},{"location":"python/python_fonksiyonlar/#fonksiyonlar-ne-ise-yarar","text":"Fonksiyonlar bir program i\u00e7erisinde s\u00fcrekli olarak yapmam\u0131z gereken i\u015flemleri tekrar etmemizi engelleyen yap\u0131lard\u0131r. \u00d6rnek vermek gerekirse, siz program\u0131n\u0131zda kare alma i\u015flemini yapacaks\u0131n\u0131z ve bunu bir\u00e7ok kez kullanman\u0131z gerekecekse bunu fonksiyon haline getirmek i\u015flemlerinizi biraz daha kolayla\u015ft\u0131racakt\u0131r. \u00d6rne\u011fimizi inceleyelim: say\u0131 = 12 \u00e7\u0131kt\u0131 = \"{} say\u0131s\u0131n\u0131n karesi {} say\u0131s\u0131d\u0131r\" print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) 12 say\u0131s\u0131n\u0131n karesi 144 say\u0131s\u0131d\u0131r Bu kodu bir\u00e7ok yerde tekrar etti\u011finizi varsayarsak, \u015fu \u015fekilde bir g\u00f6r\u00fcnt\u00fc olu\u015facak: say\u0131 = 12 \u00e7\u0131kt\u0131 = \"{} say\u0131s\u0131n\u0131n karesi {} say\u0131s\u0131d\u0131r\" print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) ####programla ilgili ba\u015fka kodlar### say\u0131 = 14 print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) ###programla ilgili ba\u015fka kodlar### say\u0131 = 53 print(\u00e7\u0131kt\u0131.format(say\u0131, say\u0131**2)) 12 say\u0131s\u0131n\u0131n karesi 144 say\u0131s\u0131d\u0131r 14 say\u0131s\u0131n\u0131n karesi 196 say\u0131s\u0131d\u0131r 53 say\u0131s\u0131n\u0131n karesi 2809 say\u0131s\u0131d\u0131r G\u00f6rm\u00fc\u015f oldu\u011funuz gibi fazladan zaman harcad\u0131k ve gereksiz bir kod kalabal\u0131\u011f\u0131 olu\u015ftu. Bu i\u015flemi bir fonksiyon ile yapal\u0131m: def kare_bul(sayi): sonuc = \"{} say\u0131s\u0131n\u0131n karesi {} say\u0131s\u0131d\u0131r\" print(sonuc.format(sayi, sayi**2)) \u015eimdide tan\u0131mlad\u0131\u011f\u0131m\u0131z bu fonksiyonu \u00e7a\u011f\u0131ral\u0131m. kare_bul(12) 12 say\u0131s\u0131n\u0131n karesi 144 say\u0131s\u0131d\u0131r kare_bul fonksiyonu ile i\u015flerimiz hem kolayla\u015ft\u0131 hem de kod tekrar\u0131ndan ka\u00e7\u0131nm\u0131\u015f olduk.","title":"Fonksiyonlar Ne \u0130\u015fe Yarar?"},{"location":"python/python_fonksiyonlar/#parametreler-ve-argumanlar","text":"Parametreler fonksiyon tan\u0131mlarken parantez i\u00e7inde belirtti\u011fimiz, fonksiyon g\u00f6vdesinde yap\u0131lan i\u015fin de\u011fi\u015fken \u00f6\u011felerini g\u00f6steren par\u00e7alard\u0131r. Bir fonksiyonu tan\u0131mlarken belirledi\u011fimiz adlara parametre , ayn\u0131 fonksiyonu \u00e7a\u011f\u0131r\u0131rken belirledi\u011fimiz adlara ise arg\u00fcman deniyor. \u00d6rne\u011fin: def kopyala(kaynak_dosya, hedef_dizin): #bu k\u0131s\u0131mda bulunan de\u011ferler parametredir. cikti = \"{} adl\u0131 dosya {} adl\u0131 dizin i\u00e7ine kopyaland\u0131!\" print(cikti.format(kaynak_dosya, hedef_dizin)) kopyala(\"deneme.txt\", \"/home/abdullah/Desktop\") #bu k\u0131s\u0131mda t\u0131rnak i\u00e7inde tan\u0131mlad\u0131klar\u0131m\u0131z ise arg\u00fcmand\u0131r. Burada kopyala() adl\u0131 bir fonksiyon tan\u0131mlad\u0131k. Bu fonksiyon toplam iki adet parametre al\u0131yor: kaynak_dosya ve hedef_dizin . G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bu iki parametre ger\u00e7ekten de fonksiyon g\u00f6vdesinde yap\u0131lan i\u015fin de\u011fi\u015fken \u00f6\u011felerini g\u00f6steriyor. Bu fonksiyonun \u00fcretece\u011fi \u00e7\u0131kt\u0131, fonksiyonu \u00e7a\u011f\u0131ran ki\u015finin bu iki parametreye verece\u011fi de\u011ferlere ba\u011fl\u0131 olarak \u015fekillenecek.","title":"Parametreler ve Arg\u00fcmanlar"},{"location":"python/python_fonksiyonlar/#sral-veya-isimsiz-parametreler","text":"Python\u2019da \u015f\u00f6yle bir fonksiyon tan\u0131mlayabilece\u011fimizi biliyoruz: def kayit_olustur(isim, soyisim, isletim, sehir): print(\"-\"*30) print(\"isim : \", isim) print(\"soyisim : \", soyisim) print(\"i\u015fletim sistemi: \", isletim) print(\"\u015fehir : \", sehir) print(\"-\"*30) Yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z bu fonksiyonu \u015fu \u015fekilde \u00e7a\u011f\u0131rabiliriz: kayit_olustur(\"Ahmet\", \"\u00d6z\", \"Debian\", \"Ankara\") Bu fonksiyonda, yazd\u0131\u011f\u0131m\u0131z parametrelerin s\u0131ras\u0131 b\u00fcy\u00fck \u00f6nem ta\u015f\u0131r. Mesela yukar\u0131daki fonksiyonu \u015f\u00f6yle \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131z\u0131 d\u00fc\u015f\u00fcn\u00fcn: kayit_olustur(\"Debian\", \"Ankara\", \"\u00d6z\", \"Ahmet\") E\u011fer fonksiyon parametrelerini bu s\u0131rayla kullan\u0131rsak ald\u0131\u011f\u0131m\u0131z \u00e7\u0131kt\u0131 hatal\u0131 olacakt\u0131r: '------------------------------' isim : Debian soyisim : Ankara i\u015fletim sistemi: \u00d6z \u015fehir : Ahmet '------------------------------' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, isim, soyisim ve \u00f6teki bilgiler birbirine kar\u0131\u015fm\u0131\u015f. \u0130\u015fte Python\u2019da, verili\u015f s\u0131ras\u0131 \u00f6nem ta\u015f\u0131yan bu t\u00fcr parametrelere \u2018s\u0131ral\u0131 parametreler\u2019 (veya isimsiz parametreler) ad\u0131 verilir.","title":"S\u0131ral\u0131 (veya \u0130simsiz) Parametreler"},{"location":"python/python_fonksiyonlar/#isimli-parametreler","text":"Bir \u00f6nceki b\u00f6l\u00fcmde verdi\u011fimiz \u015fu \u00f6rne\u011fi yeniden ele alal\u0131m: def kay\u0131t_olu\u015ftur(isim, soyisim, isletim, sehir): print(\"-\"*30) print(\"isim : \", isim) print(\"soyisim : \", soyisim) print(\"i\u015fletim sistemi: \", isletim) print(\"\u015fehir : \", sehir) print(\"-\"*30) Bu fonksiyonu \u00e7a\u011f\u0131r\u0131rken parametrelerin s\u0131ras\u0131n\u0131 do\u011fru vermenin, alaca\u011f\u0131m\u0131z \u00e7\u0131kt\u0131n\u0131n d\u00fczg\u00fcn olmas\u0131 bak\u0131m\u0131ndan b\u00fcy\u00fck \u00f6nem ta\u015f\u0131d\u0131\u011f\u0131n\u0131 biliyoruz. Ancak \u00f6zellikle parametre say\u0131s\u0131n\u0131n \u00e7ok oldu\u011fu fonksiyonlarda parametre s\u0131ras\u0131n\u0131 ak\u0131lda tutmak zor olabilir. B\u00f6yle durumlarda parametreleri isimleri ile birlikte kullanmay\u0131 tercih edebiliriz: kayit_olustur(soyisim=\"\u00d6z\", isim=\"Ahmet\", isletim=\"Debian\", sehir= \"Ankara\") B\u00f6ylece fonksiyon parametrelerini istedi\u011fimiz s\u0131ra ile kullanabiliriz. Ancak burada dikkat etmemiz gereken baz\u0131 noktalar var. Python\u2019da isimli bir parametrenin ard\u0131ndan s\u0131ral\u0131 bir parametre gelemez. Yani \u015fu kullan\u0131m yanl\u0131\u015ft\u0131r: kayit_olustur(soyisim=\"\u00d6z\", isim=\"Ahmet\", \"Debian\", \"Ankara\") Bu kodlar bize \u015fu hatay\u0131 verir: File \"<stdin>\", line 1 SyntaxError: non-keyword arg after keyword arg Bu y\u00fczden, e\u011fer isimli parametreler kullanacaksak, isimli parametrelerden sonra s\u0131ral\u0131 parametre kullanmamaya dikkat ediyoruz.","title":"\u0130simli Parametreler"},{"location":"python/python_fonksiyonlar/#varsaylan-degerli-parametreler","text":"Bu durumu print fonksiyonu \u00fczerinden a\u00e7\u0131klamaya \u00e7al\u0131\u015fal\u0131m: print(\"F\u0131rat\", \"\u00d6zg\u00fcl\", sep=\" \", end=\"\\n\", file=sys.stdout, flush=False) Yani biz g\u00f6rmesek de asl\u0131nda her print() \u00e7a\u011fr\u0131s\u0131 sep, end, file ve flush parametrelerini de i\u00e7eriyor. Biz bu \u00f6zel parametreleri kullanmasak da, yazd\u0131\u011f\u0131m\u0131z kod d\u00fczg\u00fcn bir \u015fekilde \u00e7al\u0131\u015f\u0131r. Bunun nedeni, sep, end, file ve flush parametrelerinin \u00f6ntan\u0131ml\u0131 olarak birtak\u0131m de\u011ferlere sahip olmas\u0131d\u0131r. Yani biz bu parametrelere kendimiz bir de\u011fer atamazsak Python bu parametrelere kendi belirledi\u011fi baz\u0131 \u00f6ntan\u0131ml\u0131 de\u011ferleri atayacakt\u0131r. Dolay\u0131s\u0131yla, e\u011fer biz ba\u015fka bir de\u011fer yazmazsak, sep parametresi \u201d \u201c de\u011ferine, end parametresi \u201cn\u201d de\u011ferine, file parametresi sys.stdout de\u011ferine, flush parametresi ise False de\u011ferine sahip olacakt\u0131r. \u0130\u015fte bu t\u00fcr parametrelere Python\u2019da \u2018varsay\u0131lan de\u011ferli parametreler\u2019 ad\u0131 verilir. Peki biz kendimiz varsay\u0131lan de\u011ferli parametreler i\u00e7eren fonksiyonlar\u0131 nas\u0131l tan\u0131mlayabiliriz? \u015eu \u00f6rne\u011fe dikkatlice bak\u0131n: def kur(kurulum_dizini=\"/usr/bin/\"): print(\"Program {} dizinine kuruldu!\".format(kurulum_dizini)) Burada kur() adl\u0131 bir fonksiyon tan\u0131mlad\u0131k. Bu fonksiyonun g\u00f6revi, yazd\u0131\u011f\u0131m\u0131z bir program\u0131, kullan\u0131c\u0131n\u0131n bilgisayar\u0131ndaki bir dizine kurmak ve program\u0131n hangi dizine kuruldu\u011fu konusunda kullan\u0131c\u0131y\u0131 bilgilendirmek. Bu fonksiyonu \u015fu \u015fekilde \u00e7a\u011f\u0131rabiliriz: kur() E\u011fer kur() fonksiyonunu b\u00f6yle \u00e7a\u011f\u0131r\u0131rsak bize \u015fu \u00e7\u0131kt\u0131y\u0131 verecektir: Program /usr/bin/ dizinine kuruldu! G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, kur() fonksiyonunun kurulum_dizini adl\u0131 bir parametresi var. Biz fonksiyonu tan\u0131mlarken, bu parametreye bir varsay\u0131lan de\u011fer atad\u0131k (/usr/bin/). B\u00f6ylece kur() fonksiyonu parametresiz olarak \u00e7a\u011fr\u0131ld\u0131\u011f\u0131nda bu varsay\u0131lan de\u011fer devreye girdi.","title":"Varsay\u0131lan De\u011ferli Parametreler"},{"location":"python/python_fonksiyonlar/#rastgele-sayda-isimsiz-parametre-belirleme","text":"Bir \u00f6rnek \u00fczerinden fonksiyonlar\u0131n rastgele say\u0131da isimsiz parametre alma durumuna bakal\u0131m. def fonksiyon(*parametreler): print(parametreler) fonksiyon(1, 2, 3, 4, 5) Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda \u015fu \u00e7\u0131kt\u0131y\u0131 alaca\u011f\u0131z: (1, 2, 3, 4, 5) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyon tan\u0131m\u0131 i\u00e7inde kulland\u0131\u011f\u0131m\u0131z * i\u015fareti sayesinde fonksiyonumuzun pratik olarak s\u0131n\u0131rs\u0131z say\u0131da parametre kabul etmesini sa\u011flayabiliyoruz. Bu arada, bu t\u00fcr fonksiyonlar\u0131n alabilece\u011fi parametre say\u0131s\u0131, dedi\u011fimiz gibi, pratikte s\u0131n\u0131rs\u0131zd\u0131r, ama teknik olarak bu say\u0131 256 adedi ge\u00e7emez. Peki b\u00f6yle bir fonksiyon tan\u0131mlamak ne i\u015fimize yarar? Mesela bu yap\u0131y\u0131 kullanarak \u015f\u00f6yle bir fonksiyon yazabilirsiniz: def carp(*sayilar): sonuc = 1 for i in sayilar: sonuc *= i print(sonuc) Bu fonksiyon kendisine verilen b\u00fct\u00fcn parametreleri birbiriyle \u00e7arpar. \u00d6rne\u011fin: carp(1, 2, 3, 4) Bu kodun \u00e7\u0131kt\u0131s\u0131 24 olacakt\u0131r. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonumuza istedi\u011fimiz say\u0131da parametre vererek bu say\u0131lar\u0131n birbiriyle \u00e7arp\u0131lmas\u0131n\u0131 sa\u011flayabiliyoruz. Elbette * i\u015faretiyle birlikte kullanaca\u011f\u0131n\u0131z parametrenin ad\u0131 olarak, Python\u2019\u0131n de\u011fi\u015fken adland\u0131rma kurallar\u0131na uygun b\u00fct\u00fcn kelimeleri belirleyebilirsiniz. Mesela biz yukar\u0131da parametreler ad\u0131n\u0131 tercih ettik. Ama Python d\u00fcnyas\u0131nda * i\u015faretiyle birlikte kullan\u0131lacak parametrenin ad\u0131 geleneksel olarak, arg\u00fcmanlar anlam\u0131nda args 't\u0131r. Yani Python programc\u0131lar\u0131 genellikle yukar\u0131daki gibi bir fonksiyonu \u015f\u00f6yle tan\u0131mlar: def fonksiyon(*args): ... * i\u015fareti ile birlikte kullan\u0131lacak parametrenin ad\u0131n\u0131 args** yapmak bir zorunluluk olmamakla birlikte, ba\u015fka Python programc\u0131lar\u0131n\u0131n kodlar\u0131n\u0131z\u0131 daha kolay anlayabilmesi a\u00e7\u0131s\u0131ndan bu gelene\u011fi devam ettirmenizi tavsiye ederim. Yazd\u0131\u011f\u0131m\u0131z kodlarda Python programlama dilinin geleneklerine ba\u011fl\u0131 kalmak \u00e7o\u011funlukla iyi bir al\u0131\u015fkanl\u0131kt\u0131r.","title":"Rastgele Say\u0131da \u0130simsiz Parametre Belirleme"},{"location":"python/python_fonksiyonlar/#rastgele-sayda-isimli-parametre-belirleme","text":"Bir \u00f6nceki b\u00f6l\u00fcmde oludu\u011fu gibi, rastgele say\u0131da isimli parametre belirlemek de m\u00fcmk\u00fcnd\u00fcr. \u00d6rne\u011fin: def fonksiyon(**parametreler): print(parametreler) fonksiyon(isim=\"Ahmet\", soyisim=\"\u00d6z\", meslek=\"M\u00fchendis\", sehir=\"Ankara\") Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda \u015f\u00f6yle bir \u00e7\u0131kt\u0131 al\u0131yoruz: {'sehir': 'Ankara', 'isim': 'Ahmet', 'soyisim': '\u00d6z', 'meslek': 'M\u00fchendis'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonu tan\u0131mlarken parametremizin sol taraf\u0131na yerle\u015ftirdi\u011fimiz ** i\u015fareti, bu fonksiyonu \u00e7a\u011f\u0131r\u0131rken yazd\u0131\u011f\u0131m\u0131z isimli parametrelerin bize bir s\u00f6zl\u00fck olarak verilmesini sa\u011fl\u0131yor. Bu yap\u0131n\u0131n bize bir s\u00f6zl\u00fck verdi\u011fini bildikten sonra, bunu s\u00f6zl\u00fck veri tipinin kurallar\u0131 \u00e7er\u00e7evesinde istedi\u011fimiz \u015fekilde kullanabiliriz. T\u0131pk\u0131 * i\u015faretlerinin betimledi\u011fi parametrenin geleneksel olarak args \u015feklinde adland\u0131r\u0131lmas\u0131 gibi, i\u015faretlerinin betimledi\u011fi parametre de geleneksel olarak kwargs \u015feklinde adland\u0131r\u0131l\u0131r. Dolay\u0131s\u0131yla yukar\u0131daki gibi bir fonksiyonu Python programc\u0131lar\u0131 \u015f\u00f6yle tan\u0131mlar: def kay\u0131t_olustur(**kwargs): ... i\u015faretli parametreler pek \u00e7ok farkl\u0131 durumda i\u015finize yarayabilir veya i\u015finizi kolayla\u015ft\u0131rabilir. Mesela * ve i\u015faretlerini kullanarak \u015f\u00f6yle bir program yazabilirsiniz: def kar\u015f\u0131l\u0131k_bul(*args, **kwargs): for s\u00f6zc\u00fck in args: if s\u00f6zc\u00fck in kwargs: print(\"{} = {}\".format(s\u00f6zc\u00fck, kwargs[s\u00f6zc\u00fck])) else: print(\"{} kelimesi s\u00f6zl\u00fckte yok!\".format(s\u00f6zc\u00fck)) s\u00f6zl\u00fck = {\"kitap\" : \"book\", \"bilgisayar\" : \"computer\", \"programlama\": \"programming\"} kar\u015f\u0131l\u0131k_bul(\"kitap\", \"bilgisayar\", \"programlama\", \"fonksiyon\", **s\u00f6zl\u00fck) Burada tan\u0131mlad\u0131\u011f\u0131m\u0131z kar\u015f\u0131l\u0131k_bul() adl\u0131 fonksiyon, kendisine verilen parametreleri ( args), bir s\u00f6zl\u00fck i\u00e7inde arayarak ( **s\u00f6zl\u00fck) kar\u015f\u0131l\u0131klar\u0131n\u0131 bize \u00e7\u0131kt\u0131 olarak veriyor. E\u011fer verilen parametre s\u00f6zl\u00fckte yoksa, ilgili kelimenin s\u00f6zl\u00fckte bulunmad\u0131\u011f\u0131 konusunda da bizi bilgilendiriyor. kar\u015f\u0131l\u0131k_bul() adl\u0131 fonksiyonu nas\u0131l tan\u0131mlad\u0131\u011f\u0131m\u0131za \u00e7ok dikkat edin. Parametre listesi i\u00e7inde belirtti\u011fimiz args ifadesi sayesinde, fonksiyonu kullanacak ki\u015fiye, istedi\u011fi say\u0131da isimsiz parametre girme imkan\u0131 tan\u0131yoruz. **kwargs parametresi ise kullan\u0131c\u0131ya istedi\u011fi say\u0131da isimli parametre girme olana\u011f\u0131 veriyor.","title":"Rastgele Say\u0131da \u0130simli Parametre Belirleme"},{"location":"python/python_fonksiyonlar/#return-deyimi","text":"Bu b\u00f6l\u00fcmde return adl\u0131 bir deyimden s\u00f6z edece\u011fiz. \u00d6ncelikle basit bir \u00f6rnek verelim: def ismin_ne(): isim = input(\"ismin ne? \") print(isim) ismin_ne() adl\u0131 fonksiyonun tek g\u00f6revi kullan\u0131c\u0131dan ald\u0131\u011f\u0131 isim bilgisini ekrana basmakt\u0131r. Peki bu fonksiyonu bir de \u015f\u00f6yle tan\u0131mlayal\u0131m: def ismin_ne(): isim = input(\"ismin ne? \") return isim \u015eimdi de bu fonksiyonu \u00e7a\u011f\u0131ral\u0131m: ismin_ne() G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonu \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131zda yaln\u0131zca fonksiyon g\u00f6vdesindeki input() fonksiyonu \u00e7al\u0131\u015ft\u0131, ama bu fonksiyondan gelen veri ekrana \u00e7\u0131kt\u0131 olarak verilmedi. \u00c7\u00fcnk\u00fc biz burada herhangi bir ekrana basma (\u2018print\u2019) i\u015flemi yapmad\u0131k. Yapt\u0131\u011f\u0131m\u0131z tek \u015fey isim adl\u0131 de\u011fi\u015fkeni \u2018d\u00f6nd\u00fcrmek\u2019. Peki bu ne anlama geliyor? return kelimesi \u0130ngilizcede \u2018iade etmek, geri vermek, d\u00f6nd\u00fcrmek\u2019 gibi anlamlar ta\u015f\u0131r. \u0130\u015fte yukar\u0131daki \u00f6rnekte de return deyiminin yapt\u0131\u011f\u0131 i\u015f budur. Yani bu deyim bize fonksiyondan bir de\u011fer \u2018d\u00f6nd\u00fcr\u00fcr\u2019. E\u011fer tan\u0131mlad\u0131\u011f\u0131m\u0131z bir fonksiyonda return deyimini kullanarak herhangi bir de\u011fer d\u00f6nd\u00fcrmezsek, Python fonksiyondan hususi bir de\u011ferin d\u00f6nd\u00fcr\u00fclmedi\u011fini g\u00f6stermek i\u00e7in \u2018None\u2019 adl\u0131 bir de\u011fer d\u00f6nd\u00fcr\u00fcr... \u0130\u015fte yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z ilk ismin_ne() fonksiyonunu print(ismin_ne()) \u015feklinde \u00e7a\u011f\u0131rd\u0131\u011f\u0131m\u0131zda ekranda None de\u011ferinin g\u00f6r\u00fcnmesinin nedeni budur. Peki bir fonksiyon i\u00e7inde herhangi bir veriyi ekrana basmay\u0131p return deyimi yard\u0131m\u0131yla d\u00f6nd\u00fcrmemizin bize ne faydas\u0131 var? Asl\u0131nda bunun cevab\u0131 \u00e7ok a\u00e7\u0131k. Bir fonksiyon i\u00e7inde bir de\u011feri d\u00f6nd\u00fcrmek yerine ekrana bast\u0131\u011f\u0131n\u0131zda o fonksiyonun i\u015flevini alabildi\u011fine k\u0131s\u0131tlam\u0131\u015f oluyorsunuz. Fonksiyonunuzun tek i\u015flevi bir de\u011feri ekrana basmak oluyor. Yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z ismin_ne() fonksiyonu \u015fu \u015fekilde \u00e7a\u011f\u0131ral\u0131m: print(\"Merhaba {}. Nas\u0131ls\u0131n?\".format(ismin_ne())) \u00c7\u0131kt\u0131m\u0131z \u015fu \u015fekilde olacakt\u0131r: ismin ne? F\u0131rat Merhaba F\u0131rat. Nas\u0131ls\u0131n? Geriye de\u011fer d\u00f6nd\u00fcren fonksiyonlarda, fonksiyonun geriye d\u00f6nd\u00fcrm\u00fc\u015f oldu\u011fu de\u011feri istedi\u011fimiz \u015fekilde kullanabiliriz. return deyimiyle ilgili son bir \u015fey daha s\u00f6yleyelim... Bu deyim, i\u00e7inde bulundu\u011fu fonksiyonun \u00e7al\u0131\u015fma s\u00fcrecini kesintiye u\u011frat\u0131r. Yani return deyimini kulland\u0131\u011f\u0131n\u0131z sat\u0131rdan sonra gelen hi\u00e7bir kod \u00e7al\u0131\u015fmaz. Basit bir \u00f6rnek verelim: def fonk(): print(3) return print(5) fonk() Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131zda yaln\u0131zca print(3) sat\u0131r\u0131n\u0131n \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131, print(5) sat\u0131r\u0131na ise hi\u00e7 ula\u015f\u0131lmad\u0131\u011f\u0131n\u0131 g\u00f6receksiniz. \u0130\u015fte bu durumun sebebi, Python\u2019\u0131n kodlar\u0131 return sat\u0131r\u0131ndan itibaren okumay\u0131 b\u0131rakmas\u0131d\u0131r.","title":"return Deyimi"},{"location":"python/python_fonksiyonlar/#fonksiyonlarn-kapsam-ve-global-deyimi","text":"Elimizde \u015f\u00f6yle bir kod oldu\u011funu d\u00fc\u015f\u00fcnelim: x = 0 def fonk(): x = 1 return x Bu kodlarda, fonksiyonun d\u0131\u015f\u0131nda x adl\u0131 bir de\u011fi\u015fken var. Fonksiyonun i\u00e7inde de yine x ad\u0131n\u0131 ta\u015f\u0131yan ba\u015fka bir de\u011fi\u015fken var. Fonksiyonumuzun g\u00f6revi bu x de\u011fi\u015fkenini d\u00f6nd\u00fcrmek. Bu noktada size \u015f\u00f6yle bir soru sormama izin verin: Acaba fonksiyon i\u00e7inde tan\u0131mlad\u0131\u011f\u0131m\u0131z x de\u011fi\u015fkeni, fonksiyon d\u0131\u015f\u0131ndaki x de\u011fi\u015fkeninin de\u011ferini de\u011fi\u015ftiriyor mu? Bu sorunun cevab\u0131n\u0131 \u015fu kodlarla verelim: x = 0 def fonk(): x=1 return x print('fonksiyon i\u00e7indeki x: ', fonk()) print('fonksiyon d\u0131\u015f\u0131ndaki x: ', x) Bu kodlar\u0131 \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131zda \u015fu \u00e7\u0131kt\u0131y\u0131 alaca\u011f\u0131z: fonksiyon i\u00e7indeki x: 1 fonksiyon d\u0131\u015f\u0131ndaki x: 0 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi fonksiyon i\u00e7indeki ve fonksiyon d\u0131\u015f\u0131ndaki ayn\u0131 adl\u0131 de\u011fi\u015fkenler birbirine kar\u0131\u015fm\u0131yor. Bunun sebebi, Python\u2019daki \u2018isim alan\u0131\u2019 (namespace ) adl\u0131 bir kavramd\u0131r. Peki isim alan\u0131 ne demek? Python\u2019da de\u011fi\u015fkenlerin, fonksiyonlar\u0131n ve daha sonra g\u00f6rece\u011finiz gibi s\u0131n\u0131flar\u0131n bir kapsam\u0131 vard\u0131r. Bu kapsama Python\u2019da \u2018isim alan\u0131\u2019 ad\u0131 verilir. Dolay\u0131s\u0131yla Python\u2019da her nesnenin, ge\u00e7erli ve etkin oldu\u011fu bir isim alan\u0131 bulunur. \u00d6rne\u011fin yukar\u0131daki kodlarda fonksiyon d\u0131\u015f\u0131ndaki x de\u011fi\u015fkeni ana isim alan\u0131nda yer alan \u2018global\u2019 bir de\u011fi\u015fkendir. Fonksiyon i\u00e7indeki x de\u011fi\u015fkeni ise fonk() de\u011fi\u015fkeninin isim alan\u0131 i\u00e7inde yer alan \u2018lokal\u2019 bir de\u011fi\u015fkendir. Bu iki de\u011fi\u015fken, adlar\u0131 ayn\u0131 da olsa, birbirlerinden farkl\u0131 iki nesnedir. Bir de \u015fu \u00f6rne\u011fe bakal\u0131m: x = [] print('x\\'in ilk hali:', x) def de\u011fi\u015ftir(): print('x\\'i de\u011fi\u015ftiriyoruz...') x.append(1) return x de\u011fi\u015ftir() print('x\\'in son hali: ', x) Burada ise daha farkl\u0131 bir durum s\u00f6z konusu. Fonksiyon i\u00e7inde append() metodunu kullanarak yapt\u0131\u011f\u0131m\u0131z ekleme i\u015flemi fonksiyon d\u0131\u015f\u0131ndaki listeyi de etkiledi. Peki ama bu nas\u0131l oluyor? Python herhangi bir nesneye g\u00f6ndermede bulundu\u011fumuzda, yani o nesnenin de\u011ferini talep etti\u011fimizde arad\u0131\u011f\u0131m\u0131z nesneyi ilk \u00f6nce mevcut isim alan\u0131 i\u00e7inde arar. E\u011fer aranan nesneyi mevcut isim alan\u0131 i\u00e7inde bulamazsa yukar\u0131ya do\u011fru b\u00fct\u00fcn isim alanlar\u0131n\u0131 tek tek kontrol eder. \u0130\u015fte Python programlama dili \u00e7\u00f6z\u00fcm olacak bir ara\u00e7 sunar bize. Bu arac\u0131n ad\u0131 global. Gelin isterseniz bu global adl\u0131 deyimin nas\u0131l kullan\u0131laca\u011f\u0131na bakal\u0131m \u00f6nce... \u015eu kodlar\u0131n hata verece\u011fini biliyorsunuz: isim = 'F\u0131rat' def fonk(): isim += ' \u00d6zg\u00fcl' return isim print(fonk()) Ama bu kodlara \u015f\u00f6yle bir ekleme yaparsan\u0131z i\u015fler de\u011fi\u015fir: isim = 'F\u0131rat' def fonk(): global isim isim += ' \u00d6zg\u00fcl' return isim print(fonk()) Burada fonk() adl\u0131 fonksiyonun ilk sat\u0131r\u0131nda \u015f\u00f6yle bir kod g\u00f6r\u00fcyoruz: global isim \u0130\u015fte bu sat\u0131r, isim adl\u0131 de\u011fi\u015fkenin global alana ta\u015f\u0131nmas\u0131n\u0131 sa\u011fl\u0131yor. B\u00f6ylece global alanda bulunan isim adl\u0131 de\u011fi\u015fkeni de\u011fi\u015fikli\u011fe u\u011fratabiliyoruz. global deyimi her ne kadar ilk bak\u0131\u015fta \u00e7ok faydal\u0131 bir ara\u00e7m\u0131\u015f gibi g\u00f6r\u00fcnse de asl\u0131nda programlar\u0131m\u0131zda genellikle bu deyimi kullanmaktan ka\u00e7\u0131nmam\u0131z iyi bir fikir olacakt\u0131r. \u00c7\u00fcnk\u00fc bu deyim asl\u0131nda global alan\u0131 kirletmemize neden oluyor. Global de\u011fi\u015fkenlerin lokal isim alanlar\u0131nda de\u011fi\u015fikli\u011fe u\u011frat\u0131lmas\u0131, e\u011fer dikkatsiz davran\u0131rsan\u0131z programlar\u0131n\u0131z\u0131n hatal\u0131 \u00e7al\u0131\u015fmas\u0131na yol a\u00e7abilir Son G\u00fcncelleme: 25 Aral\u0131k 2019 - \u00c7ar\u015famba","title":"Fonksiyonlar\u0131n Kapsam\u0131 ve global Deyimi"},{"location":"python/python_format_metodu/","text":"format() Metodu Bu metod kullan\u0131c\u0131ya daha g\u00fczel \u00e7\u0131kt\u0131lar verebilmemiz konusunda i\u015flerimizi kolayla\u015ft\u0131rmaktad\u0131r. Bir \u00f6rnek \u00fczerinden inceleyelim: print(\"{} ve {} iyi bir ikilidir.\".format(\"Django\", \"Python\")) Django ve Python iyi bir ikilidir. Yukar\u0131daki \u00f6rnekte oldu\u011fu gibi istedi\u011fimiz \u015fekilde \u00e7\u0131k\u0131t\u0131y\u0131 ayarlay\u0131p daha sonra \u00e7\u0131kt\u0131da bo\u015fluklara gelmesi gereken yerleri tek tek dolduruyoruz. Peki kullan\u0131c\u0131dan bilgi ald\u0131\u011f\u0131m\u0131z zaman nas\u0131l olacak, bir \u00f6rnek \u00fczerinden bakal\u0131m: deger = input(\"Bir de\u011fer giriniz: \") print(\"Girmi\u015f oldu\u011funuz deger {}, umar\u0131m bu bir say\u0131 de\u011fildir.\".format(deger)) Bir de\u011fer giriniz: kelime Girmi\u015f oldu\u011funuz deger kelime, umar\u0131m bu bir say\u0131 de\u011fildir. Biraz daha karma\u015f\u0131k bir \u00f6rnek \u00fczerinden bakal\u0131m format metoduna: kalk\u0131\u015f = input(\"Kalk\u0131\u015f yeri: \") var\u0131\u015f = input(\"Var\u0131\u015f yeri: \") isim_soyisim = input(\"\u0130sim ve soyisim: \") bilet_say\u0131s\u0131 = input(\"Bilet say\u0131s\u0131: \") print(\"\"\"{} noktas\u0131ndan {} noktas\u0131na, 14:30 hareket saatli sefer i\u00e7in {} ad\u0131na {} adet bilet ayr\u0131lm\u0131\u015ft\u0131r!\"\"\".format(kalk\u0131\u015f, var\u0131\u015f, isim_soyisim, bilet_say\u0131s\u0131)) Kalk\u0131\u015f yeri: Konya Var\u0131\u015f yeri: \u0130stanbul \u0130sim ve soyisim: Abdullah Bilet say\u0131s\u0131: 1 Konya noktas\u0131ndan \u0130stanbul noktas\u0131na, 14:30 hareket saatli sefer i\u00e7in Abdullah ad\u0131na 1 adet bilet ayr\u0131lm\u0131\u015ft\u0131r! E\u011fer istersek \u015fu \u015fekilde bir kullan\u0131mda mevcut: \"{0} {1}\".format(\"Python\", \"Django\") 'Python Django' Bir ba\u015fka kullan\u0131m: \"{1} {0}\".format(\"Python\", \"Django\") 'Django Python' Di\u011fer bir \u00f6rnek: \"{0} {1} ({1} {0})\".format(\"Python\", \"Django\") 'Python Django (Django Python)' Parantez i\u00e7erisinde say\u0131 kullanmak yerine isimde kullanabiliriz. print(\"{dil} ve {web} dersleri\".format(dil=\"python\", web=\"django\")) python ve django dersleri {} i\u015faretleri aras\u0131nda baz\u0131 say\u0131lar kullanarak, karakter dizileri \u00fczerinde hizalama i\u015flemleri de yapabiliriz. \"> sa\u011fa yaslama\" \"< sola yaslama\" \"^ ortalama\" print(\"|{:>15}|\".format(\"python\")) | python| Burada bu > i\u015faret karakterin sa\u011fa yaslanaca\u011f\u0131n\u0131 ve 15 say\u0131s\u0131 ise i\u015flemin 15 karakterlik bir alanda ger\u00e7ekle\u015ftirilece\u011fini belirtmektedir. print(\"|{:<15}|\".format(\"python\")) |python | Bir di\u011fer \u00f6rnek: print(\"|{:^15}|\".format(\"python\")) | python | Bi\u00e7imlendirme Karakterleri format ile birlikte baz\u0131 harfleri kullanabiliriz. s Bu harf karakter dizilerini temsil eder. print(\"{:s} ve {:s} iyi bir ikilidir!\".format(\"Python\", \"Django\")) Python ve Django iyi bir ikilidir! c Bu harf 0 ile 256 aras\u0131 say\u0131lar\u0131n ASCII tablosundaki kar\u015f\u0131l\u0131klar\u0131n\u0131 temsil eder: print(\"{:c}\".format(65)) A d Bu harf say\u0131lar\u0131 temsil eder: print(\"{:d}\".format(1453)) 1453 o Bu harf onlu d\u00fczendeki say\u0131lar\u0131 sekizli d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: print(\"{:o}\".format(1453)) 2655 x Bu harf onlu d\u00fczendeki say\u0131lar\u0131 onalt\u0131l\u0131 d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: print(\"{:x}\".format(1453)) 5ad X T\u0131pk\u0131 x harfinde oldu\u011fu gibi, bu harf de onlu d\u00fczendeki say\u0131lar\u0131 onalt\u0131l\u0131 d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: \"{:X}\".format(1453) '5AD' b Bu i\u015faret, onlu d\u00fczendeki say\u0131lar\u0131 ikili d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: \"{:b}\".format(2) '10' f Bu i\u015faret, karakter dizileri i\u00e7indeki kayan noktal\u0131 say\u0131lar\u0131 temsil etmek i\u00e7in kullan\u0131l\u0131r. print(\"Dolar %f TL olmu\u015f...\" %1.4710) Dolar 1.471000 TL olmu\u015f... Bir ba\u015fka \u00f6rnek: print(\"{:.2f}\".format(50)) 50.00 Son G\u00fcncelleme: 19 Aral\u0131k 2019 - Per\u015fembe","title":"Format Metodu"},{"location":"python/python_format_metodu/#format-metodu","text":"Bu metod kullan\u0131c\u0131ya daha g\u00fczel \u00e7\u0131kt\u0131lar verebilmemiz konusunda i\u015flerimizi kolayla\u015ft\u0131rmaktad\u0131r. Bir \u00f6rnek \u00fczerinden inceleyelim: print(\"{} ve {} iyi bir ikilidir.\".format(\"Django\", \"Python\")) Django ve Python iyi bir ikilidir. Yukar\u0131daki \u00f6rnekte oldu\u011fu gibi istedi\u011fimiz \u015fekilde \u00e7\u0131k\u0131t\u0131y\u0131 ayarlay\u0131p daha sonra \u00e7\u0131kt\u0131da bo\u015fluklara gelmesi gereken yerleri tek tek dolduruyoruz. Peki kullan\u0131c\u0131dan bilgi ald\u0131\u011f\u0131m\u0131z zaman nas\u0131l olacak, bir \u00f6rnek \u00fczerinden bakal\u0131m: deger = input(\"Bir de\u011fer giriniz: \") print(\"Girmi\u015f oldu\u011funuz deger {}, umar\u0131m bu bir say\u0131 de\u011fildir.\".format(deger)) Bir de\u011fer giriniz: kelime Girmi\u015f oldu\u011funuz deger kelime, umar\u0131m bu bir say\u0131 de\u011fildir. Biraz daha karma\u015f\u0131k bir \u00f6rnek \u00fczerinden bakal\u0131m format metoduna: kalk\u0131\u015f = input(\"Kalk\u0131\u015f yeri: \") var\u0131\u015f = input(\"Var\u0131\u015f yeri: \") isim_soyisim = input(\"\u0130sim ve soyisim: \") bilet_say\u0131s\u0131 = input(\"Bilet say\u0131s\u0131: \") print(\"\"\"{} noktas\u0131ndan {} noktas\u0131na, 14:30 hareket saatli sefer i\u00e7in {} ad\u0131na {} adet bilet ayr\u0131lm\u0131\u015ft\u0131r!\"\"\".format(kalk\u0131\u015f, var\u0131\u015f, isim_soyisim, bilet_say\u0131s\u0131)) Kalk\u0131\u015f yeri: Konya Var\u0131\u015f yeri: \u0130stanbul \u0130sim ve soyisim: Abdullah Bilet say\u0131s\u0131: 1 Konya noktas\u0131ndan \u0130stanbul noktas\u0131na, 14:30 hareket saatli sefer i\u00e7in Abdullah ad\u0131na 1 adet bilet ayr\u0131lm\u0131\u015ft\u0131r! E\u011fer istersek \u015fu \u015fekilde bir kullan\u0131mda mevcut: \"{0} {1}\".format(\"Python\", \"Django\") 'Python Django' Bir ba\u015fka kullan\u0131m: \"{1} {0}\".format(\"Python\", \"Django\") 'Django Python' Di\u011fer bir \u00f6rnek: \"{0} {1} ({1} {0})\".format(\"Python\", \"Django\") 'Python Django (Django Python)' Parantez i\u00e7erisinde say\u0131 kullanmak yerine isimde kullanabiliriz. print(\"{dil} ve {web} dersleri\".format(dil=\"python\", web=\"django\")) python ve django dersleri {} i\u015faretleri aras\u0131nda baz\u0131 say\u0131lar kullanarak, karakter dizileri \u00fczerinde hizalama i\u015flemleri de yapabiliriz. \"> sa\u011fa yaslama\" \"< sola yaslama\" \"^ ortalama\" print(\"|{:>15}|\".format(\"python\")) | python| Burada bu > i\u015faret karakterin sa\u011fa yaslanaca\u011f\u0131n\u0131 ve 15 say\u0131s\u0131 ise i\u015flemin 15 karakterlik bir alanda ger\u00e7ekle\u015ftirilece\u011fini belirtmektedir. print(\"|{:<15}|\".format(\"python\")) |python | Bir di\u011fer \u00f6rnek: print(\"|{:^15}|\".format(\"python\")) | python |","title":"format() Metodu"},{"location":"python/python_format_metodu/#bicimlendirme-karakterleri","text":"format ile birlikte baz\u0131 harfleri kullanabiliriz.","title":"Bi\u00e7imlendirme Karakterleri"},{"location":"python/python_format_metodu/#s","text":"Bu harf karakter dizilerini temsil eder. print(\"{:s} ve {:s} iyi bir ikilidir!\".format(\"Python\", \"Django\")) Python ve Django iyi bir ikilidir!","title":"s"},{"location":"python/python_format_metodu/#c","text":"Bu harf 0 ile 256 aras\u0131 say\u0131lar\u0131n ASCII tablosundaki kar\u015f\u0131l\u0131klar\u0131n\u0131 temsil eder: print(\"{:c}\".format(65)) A","title":"c"},{"location":"python/python_format_metodu/#d","text":"Bu harf say\u0131lar\u0131 temsil eder: print(\"{:d}\".format(1453)) 1453","title":"d"},{"location":"python/python_format_metodu/#o","text":"Bu harf onlu d\u00fczendeki say\u0131lar\u0131 sekizli d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: print(\"{:o}\".format(1453)) 2655","title":"o"},{"location":"python/python_format_metodu/#x","text":"Bu harf onlu d\u00fczendeki say\u0131lar\u0131 onalt\u0131l\u0131 d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: print(\"{:x}\".format(1453)) 5ad","title":"x"},{"location":"python/python_format_metodu/#x_1","text":"T\u0131pk\u0131 x harfinde oldu\u011fu gibi, bu harf de onlu d\u00fczendeki say\u0131lar\u0131 onalt\u0131l\u0131 d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: \"{:X}\".format(1453) '5AD'","title":"X"},{"location":"python/python_format_metodu/#b","text":"Bu i\u015faret, onlu d\u00fczendeki say\u0131lar\u0131 ikili d\u00fczendeki kar\u015f\u0131l\u0131klar\u0131na \u00e7evirir: \"{:b}\".format(2) '10'","title":"b"},{"location":"python/python_format_metodu/#f","text":"Bu i\u015faret, karakter dizileri i\u00e7indeki kayan noktal\u0131 say\u0131lar\u0131 temsil etmek i\u00e7in kullan\u0131l\u0131r. print(\"Dolar %f TL olmu\u015f...\" %1.4710) Dolar 1.471000 TL olmu\u015f... Bir ba\u015fka \u00f6rnek: print(\"{:.2f}\".format(50)) 50.00 Son G\u00fcncelleme: 19 Aral\u0131k 2019 - Per\u015fembe","title":"f"},{"location":"python/python_gomulu_fonksiyonlar/","text":"G\u00f6m\u00fcl\u00fc Fonksiyonlar abs() abs() fonksiyonunu bir say\u0131n\u0131n mutlak de\u011ferini elde etmek i\u00e7in kullan\u0131yoruz. \u00d6rne\u011fin: abs(-20) 20 bir ba\u015fka \u00f6rnek: abs(20) 20 bir di\u011fer \u00f6rnek: abs(20.0) 20.0 Mutlak de\u011fer kavram\u0131 yaln\u0131zca tamsay\u0131lar ve kayan noktal\u0131 say\u0131lar i\u00e7in de\u011fil, ayn\u0131 zamanda karma\u015f\u0131k say\u0131lar i\u00e7in de ge\u00e7erlidir. Dolay\u0131s\u0131yla abs() fonksiyonunu kullanarak karma\u015f\u0131k say\u0131lar\u0131n da mutlak de\u011ferini hesaplayabiliriz: abs(20+3j) 20.223748416156685 round() round() fonksiyonu bir say\u0131y\u0131 belli \u00f6l\u00e7\u00fctlere g\u00f6re yukar\u0131 veya a\u015fa\u011f\u0131 do\u011fru yuvarlamam\u0131z\u0131 sa\u011flar. Basit birka\u00e7 \u00f6rnek verelim: round(12.4) 12 burada dikkat etmemiz gereken bir nokta var. \u015eu \u00f6rnekleri bir inceleyelim: round(1.5) 2 round(12.5) 12 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonumuz 1.5 say\u0131s\u0131n\u0131 yukar\u0131 do\u011fru, 12.5 say\u0131s\u0131n\u0131 ise a\u015fa\u011f\u0131 do\u011fru yuvarlad\u0131. Bunun sebebi, kayan noktal\u0131 bir say\u0131n\u0131n \u00fcst ve alt tam say\u0131lara olan uzakl\u0131\u011f\u0131n\u0131n birbirine e\u015fit oldu\u011fu durumlarda Python\u2019\u0131n \u00e7ift say\u0131ya do\u011fru yuvarlama yapmay\u0131 tercih etmesidir. Mesela yukar\u0131daki \u00f6rneklerde 1.5 say\u0131s\u0131 hem 1 say\u0131s\u0131na, hem de 2 say\u0131s\u0131na e\u015fit uzakl\u0131kta bulunuyor. \u0130\u015fte Python bu durumda, bir \u00e7ift say\u0131 olan 2 say\u0131s\u0131na do\u011fru yuvarlamay\u0131 tercih edecektir. round() fonksiyonu toplam iki parametre al\u0131r. \u0130lk parametre, yuvarlanacak say\u0131n\u0131n kendisidir. Yuvarlama hassasiyetini belirlemek i\u00e7in ise ikinci bir parametreden yararlanabiliriz. \u00d6rne\u011fin 22 say\u0131s\u0131n\u0131 7 \u2018ye b\u00f6ld\u00fc\u011f\u00fcm\u00fczde normalde \u015f\u00f6yle bir \u00e7\u0131kt\u0131 elde ederiz: 22/7 3.142857142857143 round() fonksiyonunu tek parametre ile kulland\u0131\u011f\u0131m\u0131zda bu fonksiyon yukar\u0131daki say\u0131y\u0131 \u015fu \u015fekilde yuvarlayacakt\u0131r: round(22/7) 3 \u0130\u015fte biz round() fonksiyonuna ikinci bir parametre daha vererek, yuvarlama hassasiyetini kontrol edebiliriz. A\u015fa\u011f\u0131daki \u00f6rnekleri dikkatlice inceleyin: print(\"round(22/7): \",round(22/7)) print(\"round(22/7, 0): \",round(22/7, 0)) print(\"round(22/7, 1): \",round(22/7, 1)) print(\"round(22/7, 2): \",round(22/7, 2)) print(\"round(22/7, 3): \",round(22/7, 3)) print(\"round(22/7, 4): \",round(22/7, 4)) round(22/7): 3 round(22/7, 0): 3.0 round(22/7, 1): 3.1 round(22/7, 2): 3.14 round(22/7, 3): 3.143 round(22/7, 4): 3.1429 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, round() fonksiyonuna verdi\u011fimiz ikinci parametre, yuvarlama i\u015fleminin ne kadar hassas olaca\u011f\u0131n\u0131 belirliyor. all() all() fonksiyonunun g\u00f6revi, bir dizi i\u00e7inde bulunan b\u00fct\u00fcn de\u011ferler True ise True de\u011feri, e\u011fer bu de\u011ferlerden herhangi biri False ise de False de\u011feri d\u00f6nd\u00fcrmektir. \u00d6rne\u011fin elimizde \u015f\u00f6yle bir liste oldu\u011funu varsayal\u0131m: liste = [1, 2, 3, 4] all(liste) True Bildi\u011finiz gibi, 0 hari\u00e7 b\u00fct\u00fcn say\u0131lar\u0131n bool de\u011feri True\u2018dur. Yukar\u0131daki listede False de\u011feri verebilecek herhangi bir de\u011fer bulunmad\u0131\u011f\u0131ndan, all() fonksiyonu bu liste i\u00e7in True de\u011ferini veriyor. Bir de \u015funa bakal\u0131m: liste = [0, 1, 2, 3, 4] all(liste) False Son bir \u00f6rnek daha verelim: liste = ['ahmet', 'mehmet', ''] all(liste) False Listede False de\u011ferine sahip bir bo\u015f karakter dizisi bulundu\u011fu i\u00e7in all() fonksiyonu False \u00e7\u0131kt\u0131s\u0131 veriyor. any() any() fonksiyonunun g\u00f6revi de, bir dizi i\u00e7indeki b\u00fct\u00fcn de\u011ferlerden en az biri True ise True \u00e7\u0131kt\u0131s\u0131 vermektir. liste = ['ahmet', 'mehmet', ''] any(liste) True any() fonksiyonunun True \u00e7\u0131kt\u0131s\u0131 verebilmesi i\u00e7in listede yaln\u0131zca bir adet True de\u011ferli \u00f6\u011fe olmas\u0131 yeterlidir. Bu fonksiyonun False \u00e7\u0131kt\u0131s\u0131 verebilmesi i\u00e7in dizi i\u00e7indeki b\u00fct\u00fcn \u00f6\u011felerin bool de\u011ferinin False olmas\u0131 gerekir: l = ['', 0, [], (), set(), dict()] any(l) False ascii() Bu fonksiyon, bir nesnenin ekrana bas\u0131labilir halini verir bize. a = 'python' print(ascii(a)) 'python' Bu fonksiyonun, print() fonksiyonundan farkl\u0131 olarak, \u00e7\u0131kt\u0131ya t\u0131rnak i\u015faretlerini de ekledi\u011fine dikkat edin. ascii() fonksiyonunun tam olarak ne yapt\u0131\u011f\u0131n\u0131 daha iyi anlamak i\u00e7in herhalde \u015fu \u00f6rnek daha faydal\u0131 olacakt\u0131r. Dikkatlice bak\u0131n: print('\\n') Bu komutu verdi\u011fimizde, n ka\u00e7\u0131\u015f dizisinin etkisiyle yeni sat\u0131ra ge\u00e7ilece\u011fini biliyorsunuz. Bir de \u015funa bak\u0131n: print(ascii('\\n!')) '\\n!' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, ascii() fonksiyonu, sat\u0131r ba\u015f\u0131 ka\u00e7\u0131\u015f dizisinin g\u00f6revini yapmas\u0131n\u0131 sa\u011flamak yerine bu ka\u00e7\u0131\u015f dizisinin ekrana bas\u0131labilir halini veriyor bize. Ayr\u0131ca bu fonksiyon, karakter dizileri i\u00e7indeki T\u00fcrk\u00e7e karakterlerin de UNICODE temsillerini d\u00f6nd\u00fcr\u00fcr. \u00d6rne\u011fin: a = '\u0131\u015f\u0131k' print(ascii(a)) '\\u0131\\u015f\\u0131k' repr() repr() fonksiyonunun yapt\u0131\u011f\u0131 i\u015f, biraz \u00f6nce g\u00f6rd\u00fc\u011f\u00fcm\u00fcz ascii() fonksiyonunun yapt\u0131\u011f\u0131 i\u015fe \u00e7ok benzer. Bu iki fonksiyon, ASCII olmayan karakterlere muameleleri a\u00e7\u0131s\u0131ndan birbirinden ayr\u0131l\u0131r. Hat\u0131rlarsan\u0131z ascii() fonksiyonu ASCII olmayan karakterlerle kar\u015f\u0131la\u015ft\u0131\u011f\u0131nda bunlar\u0131n UNICODE (veya onalt\u0131l\u0131k) temsillerini g\u00f6steriyordu: ascii('\u015feker') \"'\\\\u015feker'\" repr() fonksiyonu ise ASCII olmayan karakterlerle kar\u015f\u0131la\u015fsa bile, bize \u00e7\u0131kt\u0131 olarak bunlar\u0131n da karakter kar\u015f\u0131l\u0131klar\u0131n\u0131 g\u00f6sterir: repr('\u015feker') \"'\u015feker'\" bool() Bu fonksiyon bir nesnenin bool de\u011ferini verir: print(\"bool(0): \",bool(0)) print(\"bool(1): \",bool(1)) print(\"bool([]): \",bool([])) bool(0): False bool(1): True bool([]): False bin() Bu fonksiyon, bir say\u0131n\u0131n ikili d\u00fczendeki kar\u015f\u0131l\u0131\u011f\u0131n\u0131 verir: bin(12) '0b1100' Bu fonksiyonun verdi\u011fi \u00e7\u0131kt\u0131n\u0131n bir say\u0131 de\u011fil, karakter dizisi oldu\u011funa dikkat etmelisiniz. bytes() Bu fonksiyon bytes t\u00fcr\u00fcnde nesneler olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. Bu fonksiyon, kendisine verilen parametrelerin t\u00fcr\u00fcne ba\u011fl\u0131 olarak birbirinden farkl\u0131 sonu\u00e7lar ortaya \u00e7\u0131kar\u0131r. \u00d6rne\u011fin e\u011fer bu fonksiyona parametre olarak bir tam say\u0131 verecek olursan\u0131z, bu fonksiyon size o tam say\u0131 miktar\u0131nca bir bayt nesnesi verecektir. Gelin isterseniz bu durumu \u00f6rnekler \u00fczerinde g\u00f6stermeye \u00e7al\u0131\u015fal\u0131m: bytes(10) b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' Yukar\u0131daki komut bize, her bir \u00f6\u011fesinin de\u011feri 0 olan 10 baytl\u0131k bir veri d\u00f6nd\u00fcrd\u00fc: a = bytes(10) a b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' print(a[0]) print(a[1]) print(a[2]) 0 0 0 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bytes(10) komutuyla olu\u015fturdu\u011fumuz a de\u011fi\u015fkeni i\u00e7inde toplam 10 adet bayt var ve bu baytlar\u0131n her birinin de\u011feri 0. Yukar\u0131da, bytes() fonksiyonuna bir tam say\u0131 de\u011ferli parametre verdi\u011fimizde nas\u0131l bir sonu\u00e7 alaca\u011f\u0131m\u0131z\u0131 \u00f6\u011frendik. Peki biz bu fonksiyona parametre olarak bir karakter dizisi verirsek ne olur? Hemen g\u00f6relim: bytes(\"python\") --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-29-0f3b72b3b524> in <module> ----> 1 bytes(\"python\") TypeError: string argument without an encoding Bu fonksiyona karakter dizilerini do\u011frudan parametre olarak veremeyiz. bayta d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemi her kod \u00e7\u00f6z\u00fcc\u00fc taraf\u0131ndan farkl\u0131 bi\u00e7imde yap\u0131l\u0131r. \u00d6rne\u011fin: '\u0131\u015f\u0131k'.encode('utf-8') b'\\xc4\\xb1\\xc5\\x9f\\xc4\\xb1k' '\u0131\u015f\u0131k'.encode('cp857') b'\\x8d\\x9f\\x8dk' '\u0131\u015f\u0131k'.encode('cp1254') b'\\xfd\\xfe\\xfdk' Dolay\u0131s\u0131yla, bytes() fonksiyonunun bir karakter dizisini bayta \u00e7evirirken nas\u0131l davranmas\u0131 gerekti\u011fini anlayabilmesi i\u00e7in, bayta d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemini hangi kod \u00e7\u00f6z\u00fcc\u00fc ile yapmak istedi\u011fimizi a\u00e7\u0131k\u00e7a belirtmemiz gerekir: bytes('\u0131\u015f\u0131k', 'utf-8') b'\\xc4\\xb1\\xc5\\x9f\\xc4\\xb1k' bytes('\u0131\u015f\u0131k', 'cp1254') b'\\xfd\\xfe\\xfdk' Bu arada, \u00e7\u0131kt\u0131da g\u00f6r\u00fcnen \u2018b\u2019 harflerinin, elimizdeki verinin bir bayt oldu\u011funu g\u00f6steren bir i\u015faret oldu\u011funu biliyorsunuz. Ayr\u0131ca, bytes() fonksiyonuna verdi\u011fimiz ikinci parametrenin isminin encoding oldu\u011funu ve bu parametreyi isimli bir parametre olarak da kullanabilece\u011fimizi belirtelim: bytes('python', encoding='ascii') b'python' bytes('\u015feker', 'ascii') --------------------------------------------------------------------------- UnicodeEncodeError Traceback (most recent call last) <ipython-input-37-71877b66453f> in <module> ----> 1 bytes('\u015feker', 'ascii') UnicodeEncodeError: 'ascii' codec can't encode character '\\u015f' in position 0: ordinal not in range(128) \u2018\u015f\u2019 harfi \u2018ASCII\u2019 karakter k\u00fcmesinde; \u2018\u20ac\u2019 i\u015fareti ise \u2018CP857\u2019 adl\u0131 karakter k\u00fcmesinde tan\u0131mlanmam\u0131\u015f birer karakter oldu\u011fu i\u00e7in, ilgili kod \u00e7\u00f6z\u00fcc\u00fcler bu karakterleri \u00e7\u00f6z\u00fcp bayta d\u00f6n\u00fc\u015ft\u00fcremiyor. Yazd\u0131\u011f\u0131m\u0131z kodlar\u0131n bu t\u00fcr durumlarda tamamen \u00e7\u00f6kmesini engellemek i\u00e7in, \u00f6nceki derslerimizde de \u00e7e\u015fitli vesilelerle \u00f6\u011frenmi\u015f oldu\u011fumuz errors adl\u0131 bir parametreden yararlanabiliriz: bytes('\u015feker', encoding='ascii', errors='replace') b'?eker' Son olarak, bytes() fonksiyonuna parametre olarak 0-256 aras\u0131 say\u0131lardan olu\u015fan diziler de verebiliriz: bytes([65, 10, 12, 11, 15, 66]) b'A\\n\\x0c\\x0b\\x0fB' bytearray() bytearray() ve bytes() fonksiyonlar\u0131 birbirlerine \u00e7ok benzer. Bu ikisi aras\u0131ndaki tek fark, bytearray() ile olu\u015fturulan veri tipinin, bytes() ile olu\u015fturulan veri tipinin aksine, de\u011fi\u015ftirilebilir nitelikte olmas\u0131d\u0131r: a = bytearray('konya', 'ascii') a bytearray(b'konya') bytearray(b'konya') bytearray(b'konya') a[0] = 65 a bytearray(b'Aonya') chr() Bu fonksiyon, kendisine parametre olarak verilen bir tam say\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr. \u00d6rne\u011fin: chr(10) '\\n' Bildi\u011finiz gibi 10 say\u0131s\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131 sat\u0131r ba\u015f\u0131 karakteridir. Bir de \u015funa bakal\u0131m: chr(65) 'A' 65 say\u0131s\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131 ise \u2018A\u2019 harfidir. Bu fonksiyon say\u0131lar\u0131 karakterlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcrken ASCII sistemini de\u011fil, UNICODE sistemini temel al\u0131r. Dolay\u0131s\u0131yla bu fonksiyon ile 128 (veya 255) \u00fcst\u00fc say\u0131lar\u0131 da d\u00f6n\u00fc\u015ft\u00fcrebiliriz. \u00d6rne\u011fin: chr(305) '\u0131' list() Bu fonksiyon iki farkl\u0131 ama\u00e7 i\u00e7in kullan\u0131labilir: Liste tipinde bir veri olu\u015fturmak Farkl\u0131 veri tiplerini liste adl\u0131 veri tipine d\u00f6n\u00fc\u015ft\u00fcrmek Birinci ama\u00e7 i\u00e7in bu fonksiyonu \u015fu \u015fekilde kullan\u0131yoruz: l = list() ikinc ama\u00e7 i\u00e7in bu fonksiyonu \u015fu \u015fekilde kullan\u0131yoruz: liste = list('python') liste ['p', 'y', 't', 'h', 'o', 'n'] Elbette bu fonksiyonu kullanarak ba\u015fka veri tiplerini de listeye d\u00f6n\u00fc\u015ft\u00fcrebiliriz. \u00d6rne\u011fin bir s\u00f6zl\u00fc\u011f\u00fc, bu fonksiyon yard\u0131m\u0131yla kolayca listeye d\u00f6n\u00fc\u015ft\u00fcrebiliriz: s = {'elma': 44, 'armut': 10, 'erik': 100} list(s) ['elma', 'armut', 'erik'] Bir s\u00f6zl\u00fck listeye d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcrken, elbette s\u00f6zl\u00fc\u011f\u00fcn anahtarlar\u0131 dikkate al\u0131nacakt\u0131r. E\u011fer siz s\u00f6zl\u00fc\u011f\u00fcn anahtarlar\u0131ndan de\u011fil de de\u011ferlerinde bir liste olu\u015fturmak isterseniz \u015f\u00f6yle bir kod yazabilirsiniz: list(s.values()) [44, 10, 100] set() set() fonksiyonu list() fonksiyonuna \u00e7ok benzer. Bu fonksiyon da t\u0131pk\u0131 list() fonksiyonu gibi, veri tipleri aras\u0131nda d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemleri ger\u00e7ekle\u015ftirmek i\u00e7in kullan\u0131labilir. set() fonksiyonunun g\u00f6revi farkl\u0131 veri tiplerini k\u00fcmeye d\u00f6n\u00fc\u015ft\u00fcrmektir: k = set() Burada bo\u015f bir k\u00fcme olu\u015fturduk. \u015eimdi de mesela bir karakter dizisini k\u00fcmeye d\u00f6n\u00fc\u015ft\u00fcrelim: i = 'python' set(i) {'h', 'n', 'o', 'p', 't', 'y'} tuple() tuple() fonksiyonu da, t\u0131pk\u0131 list(), set() ve benzerleri gibi bir d\u00f6n\u00fc\u015ft\u00fcr\u00fcc\u00fc fonksiyondur. Bu fonksiyon farkl\u0131 veri tiplerini demete d\u00f6n\u00fc\u015ft\u00fcr\u00fcr: tuple('a') ('a',) frozenset() Bu fonksiyonu kullanarak farkl\u0131 veri tiplerini dondurulmu\u015f k\u00fcmeye d\u00f6n\u00fc\u015ft\u00fcrebilirsiniz: s = set('istihza') df = frozenset(s) df frozenset({'a', 'h', 'i', 's', 't', 'z'}) complex() Karma\u015f\u0131k say\u0131lar Python\u2019da \u2018complex\u2019 ifadesiyle g\u00f6steriliyor. Mesela \u015fu bir karma\u015f\u0131k say\u0131d\u0131r: 12+0j (12+0j) \u0130\u015fte e\u011fer herhangi bir say\u0131y\u0131 karma\u015f\u0131k say\u0131ya d\u00f6n\u00fc\u015ft\u00fcrmeniz gerekirse complex() adl\u0131 bir fonksiyondan yararlanabilirsiniz. \u00d6rne\u011fin: complex(15) (15+0j) B\u00f6yle bir kod yazd\u0131\u011f\u0131m\u0131zda, verdi\u011fimiz parametre karma\u015f\u0131k say\u0131n\u0131n ger\u00e7ek k\u0131sm\u0131n\u0131 olu\u015fturacak, sanal k\u0131s\u0131m ise 0 olarak kabul edilecektir. Elbette isterseniz sanal k\u0131sm\u0131 kendiniz de belirleyebilirsiniz: complex(15, 2) (15+2j) float() Bu fonksiyonu, say\u0131lar\u0131 veya karakter dizilerini kayan noktal\u0131 say\u0131ya d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in kullan\u0131yoruz: float('134') 134.0 int() Bu fonksiyon birka\u00e7 farkl\u0131 ama\u00e7 i\u00e7in kullan\u0131labilir. int() fonksiyonunun en temel g\u00f6revi, bir karakter dizisi veya kayan noktal\u0131 say\u0131y\u0131 (e\u011fer m\u00fcmk\u00fcnse) tam say\u0131ya d\u00f6n\u00fc\u015ft\u00fcrmektir: int('10') 10 int(12.4) 12 Bunun d\u0131\u015f\u0131nda bu fonksiyonu, herhangi bir sayma sisteminde temsil edilen bir say\u0131y\u0131 onlu sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in de kullanabiliriz. \u00d6rne\u011fin: int('12', 8) 10 Burada, sekizli sayma sistemine ait say\u0131 de\u011ferli bir karakter dizisi olan \u201812\u2019\u2018yi onlu sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrd\u00fck ve b\u00f6ylece \u201810 say\u0131s\u0131n\u0131 elde ettik. int() fonksiyonunu sayma sistemleri aras\u0131nda d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemlerinde kullanabilmek i\u00e7in ilk parametrenin bir karakter dizisi olmas\u0131 gerekti\u011fine dikkat ediyoruz. Bu arada, int(\u201912\u2019, 8) komutununun 12 say\u0131s\u0131n\u0131 sekizli sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrmedi\u011fine dikkat edin. Bu komutun yapt\u0131\u011f\u0131 i\u015f sekizli sayma sistemindeki 12 say\u0131s\u0131n\u0131 onlu sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrmektir. int() fonksiyonunun bu kullan\u0131m\u0131yla ilgili bir \u00f6rnek daha verelim: int('4cf', 16) 1231 Burada da, onalt\u0131l\u0131 sayma sistemine ait bir say\u0131 olan 4cf\u2018yi onlu sayma sistemine \u00e7evirdik ve 1231 say\u0131s\u0131n\u0131 elde ettik. 4cf say\u0131s\u0131n\u0131 int() fonksiyonuna parametre olarak verirken bunu karakter dizisi \u015feklinde yazmay\u0131 unutmuyoruz. Aksi halde Python bize bir hata mesaj\u0131 g\u00f6sterecektir. str() Bu fonksiyonun, farkl\u0131 veri tiplerini karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in kullan\u0131ld\u0131\u011f\u0131n\u0131 biliyorsunuz. \u00d6rne\u011fin: str(12) '12' Burada 12 say\u0131s\u0131n\u0131 bir karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrd\u00fck. \u015eimdi de bir bayt\u0131 karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrelim: bayt = b'python' Bayt nesnemizi tan\u0131mlad\u0131k. \u015eimdi bunu bir karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrelim: kardiz = str(bayt, encoding='utf-8') print(kardiz) python dict() Bu fonksiyon, farkl\u0131 veri tiplerinden s\u00f6zl\u00fckler \u00fcretmemizi sa\u011flar. \u00d6rne\u011fin bu fonksiyonu kullanarak bo\u015f bir s\u00f6zl\u00fck olu\u015fturabiliriz: s = dict() Bu fonksiyon, de\u011fi\u015fkenlerden s\u00f6zl\u00fckler olu\u015fturmam\u0131z\u0131 da sa\u011flar: s = dict(a=1, b=2, c=3) s {'a': 1, 'b': 2, 'c': 3} dict() fonksiyonuna parametre olarak i\u00e7 i\u00e7e ge\u00e7mi\u015f listeler veya demetler vererek de s\u00f6zl\u00fck \u00fcretebiliriz: ogeler = (['a', 1], ['b', 2], ['c', 3]) dict(ogeler) {'a': 1, 'b': 2, 'c': 3} callable() Bu fonksiyon, bir nesnenin \u2018\u00e7a\u011fr\u0131labilir\u2019 olup olmad\u0131\u011f\u0131n\u0131 denetler. Peki hangi nesneler \u00e7a\u011fr\u0131labilir \u00f6zelliktedir. Mesela fonksiyonlar \u00e7a\u011fr\u0131labilir nesnelerdir. De\u011fi\u015fkenler ise \u00e7a\u011fr\u0131labilir nesneler de\u011fildir. Birka\u00e7 \u00f6rnek verelim bununla ilgili: callable(open) True Python\u2019\u0131n open() adl\u0131 bir fonksiyonu oldu\u011fu i\u00e7in, do\u011fal olarak callable() fonksiyonu True \u00e7\u0131kt\u0131s\u0131 veriyor. Bir de \u015funa bakal\u0131m: import sys callable(sys.version) False Burada da sys mod\u00fcl\u00fc i\u00e7indeki version adl\u0131 nesnenin \u00e7a\u011fr\u0131labilir \u00f6zellikte olup olmad\u0131\u011f\u0131n\u0131 sorgulad\u0131k. Daha \u00f6nceki derslerimizde de g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, sys mod\u00fcl\u00fc i\u00e7indeki version adl\u0131 ara\u00e7 bir fonksiyon de\u011fil, de\u011fi\u015fkendir. Dolay\u0131s\u0131yla bu de\u011fi\u015fken callable(sys.version) sorgusuna False yan\u0131t\u0131 verir. ord() u fonksiyon, bir karakterin kar\u015f\u0131l\u0131k geldi\u011fi ondal\u0131k say\u0131y\u0131 verir. \u00d6rne\u011fin: ord('a') 97 ord('\u0131') 305 oct() Bu fonksiyon, bir say\u0131y\u0131 sekizli d\u00fczendeki kar\u015f\u0131l\u0131\u011f\u0131na \u00e7evirmemizi sa\u011flar: oct(10) '0o12' hex() Bu fonksiyon, bir say\u0131y\u0131 onalt\u0131l\u0131 d\u00fczendeki kar\u015f\u0131l\u0131\u011f\u0131na \u00e7evirmemizi sa\u011flar: hex(305) '0x131' Yaln\u0131z hem oct() hem de hex() fonksiyonlar\u0131nda dikkat etmemiz gereken \u015fey, bu fonksiyonlar\u0131n parametre olarak bir say\u0131 al\u0131p, \u00e7\u0131kt\u0131 olarak bir karakter dizisi veriyor olmas\u0131d\u0131r. eval(), exec(), globals(), locals(), compile() Bu b\u00f6l\u00fcmde be\u015f farkl\u0131 fonksiyonu bir arada inceleyece\u011fiz. Bu fonksiyonlar\u0131 birlikte ele almam\u0131z\u0131n nedeni bunlar\u0131n birbiriyle yak\u0131ndan ba\u011flant\u0131l\u0131 olmas\u0131. Burada i\u015fleyece\u011fimiz bu be\u015f fonksiyon \u015funlardan olu\u015fuyor: eval() exec() globals() locals() compile() Ancak bu fonksiyonlardan s\u00f6z etmeye ba\u015flamadan \u00f6nce Python\u2019daki iki \u00f6nemli kavram\u0131 a\u00e7\u0131kl\u0131\u011fa kavu\u015fturmam\u0131z gerekiyor: Bu kavramlar \u015funlar: ifade deyim \u00d6ncelikle \u2018ifade\u2019 kavram\u0131ndan ba\u015flayal\u0131m. \u0130ngilizcede expression denen \u2018ifadeler\u2019, bir de\u011fer \u00fcretmek i\u00e7in kullan\u0131lan kod par\u00e7alar\u0131d\u0131r. Karakter dizileri, say\u0131lar, i\u015fle\u00e7ler, \u00f6teki veri tipleri, liste \u00fcrete\u00e7leri, s\u00f6zl\u00fck \u00fcrete\u00e7leri, k\u00fcme \u00fcrete\u00e7leri, fonksiyonlar hep birer ifadedir. \u00d6rne\u011fin: 5 5 23 + 4 27 len([1, 2, 3]) 3 \u0130ngilizcede statement olarak adland\u0131r\u0131lan \u2018deyimler\u2019 ise ifadeleri de kapsayan daha geni\u015f bir kavramd\u0131r. Buna g\u00f6re b\u00fct\u00fcn ifadeler ayn\u0131 zamanda birer deyimdir. Daha do\u011frusu, ifadelerin bir araya gelmesi ile deyimler olu\u015fturulabilir. Deyimlere birka\u00e7 \u00f6rnek verelim: a = 5 if a: print(a) 5 Python programlama dilinde deyimlerle ifadeleri ay\u0131rt etmenin kolay bir yolu da eval() fonksiyonundan yararlanmakt\u0131r. E\u011fer deyim mi yoksa ifade mi oldu\u011fundan emin olamad\u0131\u011f\u0131n\u0131z bir \u015feyi eval() fonksiyonuna parametre olarak verdi\u011finizde hata alm\u0131yorsan\u0131z o parametre bir ifadedir. E\u011fer hata al\u0131yorsan\u0131z o parametre bir deyimdir. \u00c7\u00fcnk\u00fc eval() fonksiyonuna parametre olarak yaln\u0131zca ifadeler verilebilir. Birka\u00e7 \u00f6rnek verelim: eval('a = 5') Traceback (most recent call last): File \"/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py\", line 3326, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"<ipython-input-85-2f07a5f3d91b>\", line 1, in <module> eval('a = 5') File \"<string>\", line 1 a = 5 ^ SyntaxError: invalid syntax G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, eval() fonksiyonu bize bir hata mesaj\u0131 verdi. \u00c7\u00fcnk\u00fc a = 5 kodu bir deyimdir. Unutmay\u0131n, Python\u2019da b\u00fct\u00fcn de\u011fer atama i\u015flemleri birer deyimdir. Dolay\u0131s\u0131yla eval() fonksiyonu bu deyimi parametre olarak alamaz. Bir de \u015funa bakal\u0131m: eval('5 + 25') 30 Bu defa hata almad\u0131k. \u00c7\u00fcnk\u00fc eval() fonksiyonuna, olmas\u0131 gerekti\u011fi gibi, parametre olarak bir ifade verdik. Bildi\u011finiz gibi, 5 + 25 kodu bir ifadedir. Dedi\u011fimiz gibi, eval() fonksiyonu deyimleri parametre olarak alamaz. Ama exec() fonksiyonu alabilir: exec('a = 5') Bu \u015fekilde, de\u011feri 5 olan a adl\u0131 bir de\u011fi\u015fken olu\u015fturmu\u015f olduk. \u0130sterseniz kontrol edelim: print(a) 5 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, exec() fonksiyonu, mevcut isim alan\u0131 i\u00e7inde a adl\u0131 bir de\u011fi\u015fken olu\u015fturdu. Yaln\u0131z elbette mevcut isim alan\u0131 i\u00e7inde yeni de\u011fi\u015fkenler ve yeni de\u011ferler olu\u015ftururken dikkatli olmam\u0131z gerekti\u011fini biliyorsunuz. Zira mesela yukar\u0131daki komutu vermeden \u00f6nce mevcut isim alan\u0131nda zaten a adl\u0131 bir de\u011fi\u015fken varsa, o de\u011fi\u015fkenin de\u011feri de\u011fi\u015fecektir: a = 20 Elimizde, de\u011feri 20 olan a adl\u0131 bir de\u011fi\u015fken var. \u015eimdi exec() fonksiyonu yard\u0131m\u0131yla a de\u011fi\u015fkeninin de i\u00e7inde yer ald\u0131\u011f\u0131 mevcut isim alan\u0131na m\u00fcdahale ediyoruz: exec('a = 10') B\u00f6ylece a de\u011fi\u015fkeninin eski de\u011ferini silmi\u015f olduk. Kontrol edelim: print(a) 10 Bu t\u00fcr durumlarda, exec() ile olu\u015fturdu\u011funuz de\u011fi\u015fkenleri global isim alan\u0131na de\u011fil de, farkl\u0131 bir isim alan\u0131na g\u00f6ndermeyi tercih edebilirsiniz. Peki ama bunu nas\u0131l yapaca\u011f\u0131z? Python programlama dilinde isim alanlar\u0131 s\u00f6zl\u00fck tipinde bir veridir. \u00d6rne\u011fin global isim alan\u0131 basit bir s\u00f6zl\u00fckten ibarettir. Global isim alan\u0131n\u0131 g\u00f6steren s\u00f6zl\u00fckte hangi anahtar ve de\u011ferlerin oldu\u011funu g\u00f6rmek i\u00e7in globals() adl\u0131 bir fonksiyonu kullanabilirsiniz: # globals() #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. {'__doc__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__name__': '__main__', '__package__': None, '__builtins__': <module 'builtins'>} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, elimizdeki \u015fey ger\u00e7ekten de bir s\u00f6zl\u00fck. Dolay\u0131s\u0131yla bir s\u00f6zl\u00fck ile ne yapabilirsek bu s\u00f6zl\u00fckle de ayn\u0131 \u015feyi yapabiliriz... \u2018globals\u2019 adl\u0131 bu s\u00f6zl\u00fc\u011f\u00fcn i\u00e7eri\u011fi, o anda global isim alan\u0131nda bulunan nesnelere g\u00f6re farkl\u0131l\u0131k g\u00f6sterecektir. \u00d6rne\u011fin: x = 10 \u015feklinde 10 de\u011ferine sahip bir x nesnesi tan\u0131mlad\u0131ktan sonra globals() fonksiyonunu tekrar \u00e7al\u0131\u015ft\u0131r\u0131rsan\u0131z global isim alan\u0131na bu nesnenin de eklenmi\u015f oldu\u011funu g\u00f6r\u00fcrs\u00fcn\u00fcz. Dedi\u011fimiz gibi, globals() fonksiyonundan d\u00f6nen nesne bir s\u00f6zl\u00fckt\u00fcr. Bu s\u00f6zl\u00fc\u011fe, herhangi bir s\u00f6zl\u00fc\u011fe veri ekler gibi de\u011fer de ekleyebilirsiniz: globals()['z'] = 23 Bu \u015fekilde global isim alan\u0131na z adl\u0131 bir de\u011fi\u015fken eklemi\u015f oldunuz: Yaln\u0131z, Python programlama dili bize bu \u015fekilde global isim alan\u0131na nesne ekleme imkan\u0131 verse de, biz mecbur de\u011filsek bu y\u00f6ntemi kullanmaktan ka\u00e7\u0131nmal\u0131y\u0131z. \u00c7\u00fcnk\u00fc bu \u015fekilde s\u0131rad\u0131\u015f\u0131 bir y\u00f6ntemle de\u011fi\u015fken tan\u0131mlad\u0131\u011f\u0131m\u0131z i\u00e7in asl\u0131nda global isim alan\u0131n\u0131, nerden geldi\u011fini kestirmenin g\u00fc\u00e7 oldu\u011fu de\u011ferlerle \u2018kirletmi\u015f\u2019 oluyoruz. Bildi\u011finiz gibi, Python\u2019da global isim alan\u0131 d\u0131\u015f\u0131nda bir de lokal isim alan\u0131 bulunur. Lokal isim alanlar\u0131n\u0131n, fonksiyonlara (ve ileride g\u00f6rece\u011fimiz gibi s\u0131n\u0131flara) ait bir isim alan\u0131 oldu\u011funu biliyorsunuz. \u0130\u015fte bu isim alanlar\u0131na ula\u015fmak i\u00e7in de locals() adl\u0131 bir fonksiyondan yararlanaca\u011f\u0131z: def fonksiyon(param1, param2): x = 10 print(locals()) fonksiyon(10, 20) {'param1': 10, 'param2': 20, 'x': 10} Bu fonksiyonu \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131zda \u015fu \u00e7\u0131kt\u0131y\u0131 alacaks\u0131n\u0131z: G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, locals() fonksiyonu ger\u00e7ekten de bize fonksiyon() adl\u0131 fonksiyon i\u00e7indeki lokal de\u011ferleri veriyor. globals() ve locals() fonksiyonlar\u0131n\u0131n ne i\u015fe yarad\u0131\u011f\u0131n\u0131 inceledi\u011fimize g\u00f6re exec() fonksiyonunu anlat\u0131rken kald\u0131\u011f\u0131m\u0131z yere d\u00f6nebiliriz. Ne diyorduk? Elimizde, de\u011feri 20 olan a adl\u0131 bir de\u011fi\u015fken vard\u0131: a = 20 exec() fonksiyonu yard\u0131m\u0131yla a de\u011fi\u015fkeninin de i\u00e7inde yer ald\u0131\u011f\u0131 mevcut isim alan\u0131na m\u00fcdahale edelim: exec('a = 3') Bu \u015fekilde a de\u011fi\u015fkeninin varolan de\u011ferini silmi\u015f olduk: print(a) 3 Dedi\u011fimiz gibi, bu t\u00fcr durumlarda, exec() ile olu\u015fturdu\u011funuz de\u011fi\u015fkenleri global isim alan\u0131 yerine farkl\u0131 bir isim alan\u0131na g\u00f6ndermeyi tercih etmemiz daha uygun olacakt\u0131r. Python\u2019da isim alanlar\u0131n\u0131n basit bir s\u00f6zl\u00fck oldu\u011funu \u00f6\u011frendi\u011fimize g\u00f6re, exec() ile olu\u015fturdu\u011fumuz de\u011fi\u015fkenleri global isim alan\u0131 yerine nas\u0131l farkl\u0131 bir isim alan\u0131na g\u00f6nderece\u011fimizi g\u00f6rebiliriz. \u00d6nce yeni bir isim alan\u0131 olu\u015ftural\u0131m: ia = {} \u015eimdi exec() ile olu\u015fturaca\u011f\u0131m\u0131z de\u011ferleri bu isim alan\u0131na g\u00f6nderebiliriz: exec('a = 3', ia) B\u00f6ylece global isim alan\u0131ndaki a de\u011fi\u015fkeninin de\u011ferine dokunmam\u0131\u015f olduk: a 3 Yeni olu\u015fturdu\u011fumuz de\u011fer ise ia adl\u0131 yeni isim alan\u0131na gitti: ia['a'] 3 copyright() Bu fonksiyon yard\u0131m\u0131yla Python\u2019\u0131n telif haklar\u0131na ili\u015fkin bilgilere eri\u015febilirsiniz: copyright() Copyright (c) 2001-2019 Python Software Foundation. All Rights Reserved. Copyright (c) 2000 BeOpen.com. All Rights Reserved. Copyright (c) 1995-2001 Corporation for National Research Initiatives. All Rights Reserved. Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam. All Rights Reserved. credits() Bu fonksiyon, Python programlama diline katk\u0131da bulunanlara te\u015fekk\u00fcr i\u00e7eren k\u00fc\u00e7\u00fck bir metni ekrana \u00e7\u0131kt\u0131 olarak verir: credits() Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands for supporting Python development. See www.python.org for more information. license() Bu fonksiyon yard\u0131m\u0131yla Python\u2019\u0131n lisans\u0131na ili\u015fkin epey ayr\u0131nt\u0131l\u0131 metinlere ula\u015fabilirsiniz. license() A. HISTORY OF THE SOFTWARE ========================== Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see http://www.cwi.nl) in the Netherlands as a successor of a language called ABC. Guido remains Python's principal author, although it includes many contributions from others. In 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, see http://www.cnri.reston.va.us) in Reston, Virginia where he released several versions of the software. In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations, which became Zope Corporation. In 2001, the Python Software Foundation (PSF, see https://www.python.org/psf/) was formed, a non-profit organization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring member of the PSF. All Python releases are Open Source (see http://www.opensource.org for the Open Source Definition). Historically, most, but not all, Python Hit Return for more, or q (and Return) to quit: q dir() E\u011fer dir() fonksiyonunu parametresiz olarak kullan\u0131rsak, mevcut isim alan\u0131ndaki \u00f6\u011feleri bir liste halinde elde ederiz: # dir() #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. Bu bak\u0131mdan dir() fonksiyonu globals() ve locals() fonksiyonlar\u0131na benzer. Ancak onlardan fark\u0131, dir() fonksiyonunun \u00e7\u0131kt\u0131 olarak bir liste, globals() ve locals() fonksiyonlar\u0131n\u0131n ise birer s\u00f6zl\u00fck vermesidir. Ayr\u0131ca dir() fonksiyonunu kullanarak nesnelerin metot ve niteliklerini i\u00e7eren bir listeye ula\u015fabilece\u011fimizi de biliyorsunuz. \u00d6rne\u011fin bu fonksiyonu kullanarak farkl\u0131 veri tiplerinin metot ve niteliklerini listeleyebiliriz: # dir('') #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. # dir([]) #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. # dir({}) #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. divmod() Bu fonksiyonun i\u015flevini bir \u00f6rnek \u00fczerinden g\u00f6stermeye \u00e7al\u0131\u015fal\u0131m: divmod(10, 2) (5, 0) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi divmod(10, 2) komutu bize iki \u00f6\u011feli bir demet veriyor. Bu demetin ilk \u00f6\u011fesi, divmod() fonksiyonuna verilen ilk parametrenin ikinci parametreye b\u00f6l\u00fcnmesi i\u015fleminin sonucudur. Demetimizin ikinci \u00f6\u011fesi ise, ilk parametrenin ikinci parametreye b\u00f6l\u00fcnmesi i\u015fleminden kalan say\u0131d\u0131r. Yani demetin ilk parametresi b\u00f6lme i\u015fleminin \u2018b\u00f6l\u00fcm\u2019 k\u0131sm\u0131n\u0131, ikinci \u00f6\u011fesi ise \u2018kalan\u2019 k\u0131sm\u0131n\u0131 verir. Bu fonksiyonun b\u00f6lme i\u015flemininin sonucunu tamsay\u0131 cinsinden verdi\u011fine dikkat ediyoruz: divmod(10, 3) (3, 1) 10 say\u0131s\u0131 3 say\u0131s\u0131na b\u00f6l\u00fcnd\u00fc\u011f\u00fcnde tamsay\u0131 cinsinden sonu\u00e7 3 \u2018t\u00fcr. Bu b\u00f6lme i\u015fleminin kalan\u0131 ise 1 \u2018dir. enumerate() \u0130ngilizcede enumerate kelimesi \u2018numaraland\u0131rmak\u2019 anlam\u0131na gelir. enumerate() fonksiyonunun g\u00f6revi de kelimenin bu anlam\u0131yla ayn\u0131d\u0131r. Yani bu fonksiyonu kullanarak nesneleri numaraland\u0131rabiliriz. Bu fonksiyon bize bir \u2018enumerate\u2019 nesnesi verir: enumerate('python') <enumerate at 0x10e47baa0> Bu nesnenin i\u00e7eri\u011fine nas\u0131l eri\u015febilece\u011fimizi biliyorsunuz: Nesneyi bir listeye \u00e7evirebiliriz: list(enumerate('python')) [(0, 'p'), (1, 'y'), (2, 't'), (3, 'h'), (4, 'o'), (5, 'n')] veya: [i for i in enumerate('python')] [(0, 'p'), (1, 'y'), (2, 't'), (3, 'h'), (4, 'o'), (5, 'n')] print() fonksiyonuna y\u0131ld\u0131zl\u0131 parametre olarak verebiliriz: print(*enumerate('python')) (0, 'p') (1, 'y') (2, 't') (3, 'h') (4, 'o') (5, 'n') veya nesne \u00fczerinde bir d\u00f6ng\u00fc kurabiliriz: for i in enumerate('python'): print(i) (0, 'p') (1, 'y') (2, 't') (3, 'h') (4, 'o') (5, 'n') exit() Bu fonksiyon, o anda \u00e7al\u0131\u015fan programdan \u00e7\u0131kman\u0131z\u0131 sa\u011flar. E\u011fer bu komutu etkile\u015fimli kabukta verirseniz o anda a\u00e7\u0131k olan oturum kapanacakt\u0131r. help() help() fonksiyonu g\u00f6m\u00fcl\u00fc fonksiyonlar i\u00e7inde en faydal\u0131 fonksiyonlar\u0131n ba\u015f\u0131nda gelir. Bu fonksiyonu kullanarak Python programlama diline ait \u00f6\u011felere ili\u015fkin yard\u0131m belgelerine ula\u015fabiliriz. \u00d6rne\u011fin: help(dir) Help on built-in function dir in module builtins: dir(...) dir([object]) -> list of strings If called without an argument, return the names in the current scope. Else, return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it. If the object supplies a method named __dir__, it will be used; otherwise the default dir() logic is used and returns: for a module object: the module's attributes. for a class object: its attributes, and recursively the attributes of its bases. for any other object: its attributes, its class's attributes, and recursively the attributes of its class's base classes. Bu komutu verdi\u011fimizde dir() fonksiyonunun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 g\u00f6steren \u0130ngilizce bir belgeye ula\u015f\u0131r\u0131z. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, hakk\u0131nda bilgi edinmek istedi\u011fimiz \u00f6\u011feyi help() fonksiyonuna parametre olarak vererek ilgili yard\u0131m dosyas\u0131na eri\u015febiliyoruz. E\u011fer bu fonksiyonu parametresiz olarak kullan\u0131rsak \u2018etkile\u015fimli yard\u0131m\u2019 denen ekrana ula\u015f\u0131r\u0131z: help() Welcome to Python 3.7's help utility! If this is your first time using Python, you should definitely check out the tutorial on the Internet at https://docs.python.org/3.7/tutorial/. Enter the name of any module, keyword, or topic to get help on writing Python programs and using Python modules. To quit this help utility and return to the interpreter, just type \"quit\". To get a list of available modules, keywords, symbols, or topics, type \"modules\", \"keywords\", \"symbols\", or \"topics\". Each module also comes with a one-line summary of what it does; to list the modules whose name or summary contain a given string such as \"spam\", type \"modules spam\". help> dir Help on built-in function dir in module builtins: dir(...) dir([object]) -> list of strings If called without an argument, return the names in the current scope. Else, return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it. If the object supplies a method named __dir__, it will be used; otherwise the default dir() logic is used and returns: for a module object: the module's attributes. for a class object: its attributes, and recursively the attributes of its bases. for any other object: its attributes, its class's attributes, and recursively the attributes of its class's base classes. help> q You are now leaving help and returning to the Python interpreter. If you want to ask for help on a particular object directly from the interpreter, you can type \"help(object)\". Executing \"help('string')\" has the same effect as typing a particular string at the help> prompt. Bu ekranda, hakk\u0131nda bilgi edinmek istedi\u011finiz \u00f6\u011feyi help> ibaresinden hemen sonra, bo\u015fluk b\u0131rakmadan yazarak \u00f6\u011feye ili\u015fkin bilgilere ula\u015fabilirsiniz: Etkile\u015fimli yard\u0131m ekran\u0131ndan \u00e7\u0131kmak i\u00e7in \u2018q\u2019 harfine basabilirsiniz. id() Python\u2019da her nesnenin bir kimli\u011finin oldu\u011funu biliyorsunuz. Python\u2019daki her nesnenin kimli\u011fi e\u015f\u015fiz, tek ve benzersizdir. a = 50 id(a) 4491754160 kardiz = \"Merhaba D\u00fcnya\" id(kardiz) 4534630896 input() Bu fonksiyonun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 gayet iyi biliyorsunuz. input() adl\u0131 bu g\u00f6m\u00fcl\u00fc fonksiyonu kullanarak kullan\u0131c\u0131 ile veri al\u0131\u015fveri\u015finde bulunabiliyoruz. format() Bu g\u00f6m\u00fcl\u00fc fonksiyonun g\u00f6revi, daha \u00f6nce karakter dizilerini i\u015flerken, karakter dizilerinin bir metodu olarak \u00f6\u011frendi\u011fimiz format() metodununa benzer bir \u015fekilde, karakter dizilerini bi\u00e7imlendirmektir. Ancak format() fonksiyonu, daha \u00f6nce \u00f6\u011frendi\u011fimiz format() metoduna g\u00f6re daha dar kapsaml\u0131d\u0131r. format() metodunu kullanarak olduk\u00e7a karma\u015f\u0131k karakter dizisi bi\u00e7imlendirme i\u015flemlerini ger\u00e7ekle\u015ftirebiliriz, ama birazdan inceleyece\u011fimiz format() g\u00f6m\u00fcl\u00fc fonksiyonu yaln\u0131zca tek bir de\u011feri bi\u00e7imlendirmek i\u00e7in kullan\u0131l\u0131r. Basit bir \u00f6rnek verelim: format(12, '.2f') '12.00' Yukar\u0131daki ifadeyi daha \u00f6nce g\u00f6rd\u00fc\u011f\u00fcm\u00fcz format() metodu ile \u015fu \u015fekilde yazabiliriz: '{:.2f}'.format(12) '12.00' filter() Bu g\u00f6m\u00fcl\u00fc fonksiyon yard\u0131m\u0131yla dizi niteli\u011fi ta\u015f\u0131yan nesneler i\u00e7indeki \u00f6\u011feler \u00fczerinde belirli bir \u00f6l\u00e7\u00fcte g\u00f6re bir s\u00fczme i\u015flemi uygulayabiliriz. filter() fonksiyonu toplam iki parametre al\u0131r. Bu parametrelerden ilki \u00f6l\u00e7\u00fct\u00fc belirleyen fonksiyon, ikincisi ise bu \u00f6l\u00e7\u00fct\u00fcn uygulanaca\u011f\u0131 \u00f6\u011fedir. Yukar\u0131daki \u00f6rne\u011fe bakt\u0131\u011f\u0131m\u0131zda, tek() adl\u0131 fonksiyonun, l adl\u0131 \u00f6\u011fe \u00fczerine uyguland\u0131\u011f\u0131n\u0131 g\u00f6r\u00fcyoruz. Yukar\u0131daki \u00f6rnekte ilk olarak tek() adl\u0131 bir fonksiyon tan\u0131mlad\u0131k: def tek(say\u0131): return say\u0131 % 2 == 1 Bu fonksiyonun g\u00f6revi, kendisine parametre olarak verilen bir say\u0131n\u0131n tek say\u0131 olup olmad\u0131\u011f\u0131n\u0131 sorgulamak. E\u011fer verilen parametre bir tek say\u0131 ise fonksiyonumuz True de\u011ferini, tek say\u0131 de\u011filse False de\u011ferini d\u00f6nd\u00fcrecektir. \u0130sterseniz fonksiyonumuzu test edelim: print(tek(12)) False 12 say\u0131s\u0131 bir tek say\u0131 olmad\u0131\u011f\u0131 i\u00e7in fonksiyonumuz bize False \u00e7\u0131kt\u0131s\u0131 verir. Bir de \u015funa bakal\u0131m: print(tek(117)) True 117 say\u0131s\u0131 ise bir tek say\u0131d\u0131r. Bu nedenle fonksiyonumuz bize True de\u011ferini verecektir. \u0130\u015fte biz bu fonksiyonu, filter() fonksiyonu yard\u0131m\u0131yla \u015fu liste \u00fczerine uygulayaca\u011f\u0131z: l = [400, 176, 64, 175, 355, 13, 207, 298, 397, 386, 31, 120, 120, 236, 241, 123, 249, 364, 292, 153] Dedi\u011fimiz gibi, filter() fonksiyonu, dizi \u00f6zelli\u011fi ta\u015f\u0131yan nesneler \u00fczerinde belli bir \u00f6l\u00e7\u00fcte g\u00f6re filtreleme i\u015flemi yapmam\u0131z\u0131 sa\u011flar. Biz de biraz \u00f6nce tan\u0131mlad\u0131\u011f\u0131m\u0131z tek() adl\u0131 fonksiyonu l adl\u0131 bu listeye uygulayarak liste i\u00e7indeki tek say\u0131lar\u0131 filtreleyece\u011fiz. filter() fonksiyonunu \u00e7al\u0131\u015ft\u0131ral\u0131m: filter(tek, l) <filter at 0x10e48d6d0> Burada filter() fonksiyonuna ilk parametre olarak tek() fonksiyonunu verdik. \u0130kinci parametremiz ise bu fonksiyonu uygulayaca\u011f\u0131m\u0131z l adl\u0131 liste. Amac\u0131m\u0131z, l adl\u0131 liste \u00fczerine tek() fonksiyonunu uygulayarak, bu liste i\u00e7indeki \u00f6\u011felerden True \u00e7\u0131kt\u0131s\u0131 verenleri (yani tek say\u0131lar\u0131) ay\u0131klamak. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bu fonksiyonu bu \u015fekilde kulland\u0131\u011f\u0131m\u0131zda elde etti\u011fimiz \u015fey bir \u2018filtre nesnesi\u2019. Bu nesne i\u00e7indeki \u00f6\u011feleri g\u00f6rebilmek i\u00e7in ne yapabilece\u011fimizi biliyorsunuz: list(filter(tek, l)) [175, 355, 13, 207, 397, 31, 241, 123, 249, 153] veya: print(*filter(tek, l)) 175 355 13 207 397 31 241 123 249 153 ya da: [i for i in filter(tek, l)] [175, 355, 13, 207, 397, 31, 241, 123, 249, 153] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, ger\u00e7ekten de l adl\u0131 liste i\u00e7indeki b\u00fct\u00fcn tek say\u0131lar s\u00fcz\u00fcld\u00fc. hash() Bu fonksiyon, belirli t\u00fcrdeki nesnelere bir karma de\u011feri vermemizi sa\u011flar. \u00d6rne\u011fin: hash('python') -2102507435354808480 Ancak bu fonksiyonun \u00fcretti\u011fi \u00e7\u0131kt\u0131 ayn\u0131 nesne i\u00e7in b\u00fct\u00fcn sistemlerde ayn\u0131 olmayabilir. Yani \u00f6rne\u011fin yukar\u0131daki hash(\u2019istihza\u2019) komutu 32 bitlik ve 64 bitlik i\u015fletim sistemlerinde birbirinden farkl\u0131 sonu\u00e7lar verebilir. Ayr\u0131ca bu fonksiyonun \u00fcretti\u011fi karma de\u011ferlerinin birbiriyle \u00e7ak\u0131\u015fma ihtimali de y\u00fcksektir. Dolay\u0131s\u0131yla bu fonksiyonu kullanarak, mesela parola giri\u015fleri i\u00e7in karma de\u011feri \u00fcretmek do\u011fru olmaz. isinstance() Bu fonksiyonu \u015f\u00f6yle kullan\u0131yoruz: isinstance('python', str) True G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi \u2019python\u2019 ger\u00e7ekten bir karakter dizisi (str) oldu\u011fu i\u00e7in komutumuz True \u00e7\u0131kt\u0131s\u0131 veriyor. Bir de \u015funa bakal\u0131m: isinstance('python', list) False \u2019python\u2019 bir liste (list) olmad\u0131\u011f\u0131 i\u00e7in komutumuz bu kez False \u00e7\u0131kt\u0131s\u0131 verdi. len() Bu fonksiyon yard\u0131m\u0131yla nesnelerin uzunluklar\u0131n\u0131 hesaplayabilece\u011fimizi biliyorsunuz len('python') 6 len([1, 4, 5, 3, 2, 9, 10]) 7 map() Diyelim ki elimizde \u015f\u00f6yle bir liste var: l = [1, 4, 5, 4, 2, 9, 10] Amac\u0131m\u0131z bu liste i\u00e7indeki her \u00f6\u011fenin karesini hesaplamak. def karesi(n): return n ** 2 Burada bir n say\u0131s\u0131n\u0131n karesini hesaplayan bir fonksiyon tan\u0131mlad\u0131k. \u015eimdi bu fonksiyonu l listesinin b\u00fct\u00fcn \u00f6\u011feleri \u00fczerine uygulayaca\u011f\u0131z: list(map(karesi, l)) [1, 16, 25, 16, 4, 81, 100] max() max() g\u00f6m\u00fcl\u00fc fonksiyonunun g\u00f6revi, bir dizi i\u00e7indeki en b\u00fcy\u00fck \u00f6\u011feyi vermektir. Bu fonksiyon birka\u00e7 farkl\u0131 parametre al\u0131r ve verdi\u011fi \u00e7\u0131kt\u0131, ald\u0131\u011f\u0131 parametrelerin t\u00fcr\u00fcne ve say\u0131s\u0131na ba\u011fl\u0131 olarak de\u011fi\u015fiklik g\u00f6sterebilir. Bu fonksiyonu en basit \u015fu \u015fekilde kullanabilirsiniz: max(1, 2, 3) 3 max() fonksiyonu yukar\u0131da g\u00f6sterildi\u011fi gibi birtak\u0131m isimsiz parametrelerle birlikte key adl\u0131 isimli bir parametre de al\u0131r. Bu parametre yard\u0131m\u0131yla max() fonksiyonunun \u2018en b\u00fcy\u00fck\u2019 kavram\u0131n\u0131 hangi \u00f6l\u00e7\u00fcte g\u00f6re se\u00e7ece\u011fini belirleyebiliriz. \u00d6rne\u011fin: isimler = ['ahmet', 'can', 'mehmet', 'selin', 'abdullah', 'kezban'] max(isimler, key=len) 'abdullah' max() fonksiyonu \u00f6ntan\u0131ml\u0131 olarak, \u2018en b\u00fcy\u00fck\u2019 kavram\u0131n\u0131 say\u0131sal b\u00fcy\u00fckl\u00fck \u00fczerinden de\u011ferlendirir. Yani herhangi bir key parametresi kullan\u0131lmad\u0131\u011f\u0131nda, bu fonksiyon otomatik olarak bir dizi i\u00e7indeki en b\u00fcy\u00fck say\u0131y\u0131 bulur. Ancak e\u011fer biz istersek, yukar\u0131daki \u00f6rnekte oldu\u011fu gibi, \u2018en b\u00fcy\u00fck\u2019 kavram\u0131n\u0131n uzunluk cinsinden de\u011ferlendirilmesini de sa\u011flayabiliriz. min() min() fonksiyonu max() fonksiyonunun tam tersini yapar. Bildi\u011finiz gibi max() fonksiyonu bir dizi i\u00e7indeki en b\u00fcy\u00fck \u00f6\u011feyi buluyordu. \u0130\u015fte min() fonksiyonu da bir dizi i\u00e7indeki en k\u00fc\u00e7\u00fck \u00f6\u011feyi bulur. Bu fonksiyonun kullan\u0131m\u0131 max() ile ayn\u0131d\u0131r. min(-5,1,2,3,4,10) -5 open() Bu fonksiyon herhangi bir dosyay\u0131 a\u00e7mak veya olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. E\u011fer dosyan\u0131n a\u00e7\u0131lmas\u0131 veya olu\u015fturulmas\u0131 esnas\u0131nda bir hata ortaya \u00e7\u0131karsa IOError t\u00fcr\u00fcnde bir hata mesaj\u0131 verilir. pow() Bu fonksiyon \u0130ngilizcedeki power (kuvvet) kelimesinin k\u0131saltmas\u0131ndan olu\u015fur. Ad\u0131n\u0131n anlam\u0131na uygun olarak, bu fonksiyonu bir say\u0131n\u0131n kuvvetlerini hesaplamak i\u00e7in kullan\u0131yoruz. Bu fonksiyon en temel \u015fekilde \u015f\u00f6yle kullan\u0131l\u0131r: pow(2, 3) 8 Bu komutla 2 say\u0131s\u0131n\u0131n 3. kuvvetini hesaplam\u0131\u015f oluyoruz. pow() fonksiyonu toplamda \u00fc\u00e7 farkl\u0131 parametre al\u0131r. \u0130lk iki parametrenin ne oldu\u011funu yukar\u0131da \u00f6rnekledik. \u00dc\u00e7\u00fcnc\u00fc parametre ise kuvvet hesaplamas\u0131 sonucu elde edilen say\u0131n\u0131n mod\u00fcl\u00fcs\u00fcn\u00fc hesaplayabilmemizi sa\u011flar. Yani: pow(2, 3, 2) 0 Burada yapt\u0131\u011f\u0131m\u0131z \u015fey \u015fu: \u00d6ncelikle 2 say\u0131s\u0131n\u0131n 3. kuvvetini hesaplad\u0131k. Elde etti\u011fimiz say\u0131 8. Ard\u0131ndan da bu say\u0131n\u0131n 2 \u2018ye b\u00f6l\u00fcnmesi i\u015fleminden kalan say\u0131y\u0131 elde ettik. Yani 0. print() Bu fonksiyonu, bildi\u011finiz gibi, kullan\u0131c\u0131lar\u0131m\u0131za birtak\u0131m mesajlar g\u00f6stermek i\u00e7in kullan\u0131yoruz. Kullan\u0131m\u0131n\u0131 daha \u00f6nce ayr\u0131nt\u0131l\u0131 bir \u015fekilde anlatm\u0131\u015f oldu\u011fumuz bu fonksiyonu \u015fu \u015fekilde form\u00fcle edebiliriz: print(deg1, deg2, deg3, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Burada; degx \u00c7\u0131kt\u0131 verilecek de\u011ferlerin ne oldu\u011funu belirtir. Buraya 256 adete kadar de\u011fer yazabilirsiniz. sep \u00c7\u0131kt\u0131 verilirken de\u011ferlerin aras\u0131na hangi karakterin yerle\u015ftirilece\u011fini belirtir. Bu de\u011fer \u00f6ntan\u0131ml\u0131 olarak bo\u015fluk karakteridir. end \u00c7\u0131kt\u0131 verilecek son de\u011ferin ard\u0131ndan hangi karakterin ili\u015ftirilece\u011fini belirtir. Bu de\u011fer \u00f6ntan\u0131ml\u0131 olarak sat\u0131r ba\u015f\u0131 (\\n ) karakteridir. file \u00c7\u0131kt\u0131lar\u0131n hangi dosyaya yaz\u0131laca\u011f\u0131n\u0131 belirtir. \u00d6ntan\u0131ml\u0131 olarak bu parametrenin de\u011feri sys.stdout\u2018tur. Yani print() fonksiyonu \u00e7\u0131kt\u0131lar\u0131n\u0131 \u00f6ntan\u0131ml\u0131 olarak standart \u00e7\u0131kt\u0131 konumuna g\u00f6nderir. flush Bildi\u011finiz gibi, herhangi bir dosyaya yazma i\u015flemi s\u0131ras\u0131nda dosyaya yaz\u0131lacak de\u011ferler \u00f6ncelikle tampona al\u0131n\u0131r. \u0130\u015flem tamamland\u0131ktan sonra tampondaki bu de\u011ferler topluca dosyaya aktar\u0131l\u0131r. \u0130\u015fte bu parametre, de\u011ferleri tampona almadan do\u011frudan dosyaya g\u00f6nderebilmemizi sa\u011flar. Bu parametrenin \u00f6ntan\u0131ml\u0131 de\u011feri False\u2018tur. Yani de\u011ferler dosyaya yaz\u0131lmadan \u00f6nce \u00f6ntan\u0131ml\u0131 olarak \u00f6ncelikle tampona gider. Ama e\u011fer biz bu parametrenin de\u011ferini True olarak de\u011fi\u015ftirirsek, de\u011ferler do\u011frudan dosyaya yaz\u0131l\u0131r. quit() Bu fonksiyonu programdan \u00e7\u0131kmak i\u00e7in kullan\u0131yoruz. E\u011fer bu fonksiyonu etkile\u015fimli kabukta verecek olursan\u0131z etkile\u015fimli kabuk kapanacakt\u0131r. range() Bu fonksiyonu belli bir aral\u0131ktaki say\u0131lar\u0131 listelemek i\u00e7in kullan\u0131yoruz. Yani mesela 0 ile 10 aras\u0131 say\u0131lar\u0131n listesini almak istersek \u015f\u00f6yle bir komut yazabiliriz: l = range(0, 10) Ancak burada dikkat etmemiz gereken bir \u00f6zellik var: Bu fonksiyon asl\u0131nda do\u011frudan herhangi bir say\u0131 listesi olu\u015fturmaz. Yukar\u0131da l de\u011fi\u015fkenine atad\u0131\u011f\u0131m\u0131z komutu ekrana yazd\u0131r\u0131rsak bunu daha net g\u00f6rebilirsiniz: print(l) range(0, 10) Bir de bu verinin tipine bakal\u0131m: type(l) range G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, elimizdeki \u015fey asl\u0131nda bir say\u0131 listesi de\u011fil, bir \u2018range\u2019 (aral\u0131k) nesnesidir. Biz bu nesneyi istersek ba\u015fka veri tiplerine d\u00f6n\u00fc\u015ft\u00fcrebiliriz. Mesela bunu bir listeye d\u00f6n\u00fc\u015ft\u00fcrelim: list(l) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] reversed() Bir listedeki isimleri ters \u00e7evirmek i\u00e7in kullan\u0131l\u0131r. isimler = ['ahmet', 'mehmet', 'veli', 'ay\u015fe', '\u00e7i\u011fdem', '\u0131\u015f\u0131k'] reversed(isimler) <list_reverseiterator at 0x10e4819d0> G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, t\u0131pk\u0131 range() fonksiyonunda oldu\u011fu gibi, reversed() fonksiyonu da bize \u00fcretti\u011fi \u00f6\u011felerin kendisi yerine, bir \u2018nesne\u2019 veriyor. Ama tabii ki bu bizim i\u00e7in bir sorun de\u011fil. Biz bu nesnenin i\u00e7eri\u011fini nas\u0131l elde edebilece\u011fimizi gayet iyi biliyoruz: list(reversed(isimler)) ['\u0131\u015f\u0131k', '\u00e7i\u011fdem', 'ay\u015fe', 'veli', 'mehmet', 'ahmet'] sorted() Bu metot, daha \u00f6nceki derslerimizden de bildi\u011finiz gibi, bir dizi i\u00e7indeki \u00f6\u011feleri belirli bir \u00f6l\u00e7\u00fcte g\u00f6re s\u0131raya dizmemizi sa\u011fl\u0131yor. Bununla ilgili \u00e7ok basit bir \u00f6rnek verelim: sorted('ahmet') ['a', 'e', 'h', 'm', 't'] Bu kodlar yard\u0131m\u0131yla ahmet adl\u0131 karakter dizisi i\u00e7indeki harfleri alfabe s\u0131ras\u0131na dizdik. sorted() fonksiyonuna hangi t\u00fcrde bir veri tipi verirseniz verin, ald\u0131\u011f\u0131n\u0131z \u00e7\u0131kt\u0131 her zaman bir liste olacakt\u0131r. Bunu unutmay\u0131n. Bu fonksiyon, T\u00fcrk\u00e7e karakter i\u00e7eren \u00f6\u011feleri d\u00fczg\u00fcn s\u0131ralayamaz. slice() Bildi\u011finiz gibi, birtak\u0131m \u00f6\u011felerden olu\u015fan bir nesnenin yaln\u0131zca belli k\u0131s\u0131mlar\u0131n\u0131 ay\u0131r\u0131p alma i\u015flemine \u2018dilimleme\u2019 ad\u0131 veriliyor. Bu fonksiyon dilimleme yapabilmemiz sa\u011flar. l = ['ahmet', 'mehmet', 'ay\u015fe', 'senem', 'salih'] dl = slice(0, 3) l[dl] ['ahmet', 'mehmet', 'ay\u015fe'] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, slice() fonksiyonunu yukar\u0131da iki parametre ile kulland\u0131k. Tahmin edebilece\u011finiz gibi, bu fonksiyonunu form\u00fcl\u00fc \u015fu \u015fekildedir: slice(ba\u015flang\u0131\u00e7, biti\u015f, atlama) sum() Bu fonksiyonun temel g\u00f6revi, bir dizi i\u00e7indeki de\u011ferlerin toplam\u0131n\u0131 bulmakt\u0131r. \u00d6rne\u011fin: l = [1, 2, 3] sum(l) 6 Bu fonksiyon genellikle yukar\u0131daki gibi tek parametreyle kullan\u0131l\u0131r. Ama asl\u0131nda bu fonksiyon ikinci bir parametre daha al\u0131r. Dikkatlice bak\u0131n: l = [1, 2, 3] sum(l, 10) 16 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, Python sum() fonksiyonuna verilen ikinci parametreyi, birinci parametredeki toplam de\u011ferin \u00fczerine ekliyor. type() type() fonksiyonunun g\u00f6revi bir nesnenin hangi veri tipine ait oldu\u011funu s\u00f6ylemektir. Bu fonksiyonu art\u0131k yak\u0131ndan tan\u0131yorsunuz: type('kiraz') str zip() Gelin isterseniz bu fonksiyonu bir \u00f6rnek \u00fczerinden a\u00e7\u0131klamaya \u00e7al\u0131\u015fal\u0131m. Diyelim ki elimizde \u015f\u00f6yle iki farkl\u0131 liste var: a1 = ['a', 'b', 'c'] a2 = ['d', 'e', 'f'] E\u011fer bu listelerin \u00f6\u011felerini birbirleriyle e\u015fle\u015ftirmek istersek zip() fonksiyonundan yararlanabiliriz. Dikkatlice bak\u0131n: zip(a1, a2) <zip at 0x10e492500> G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, yukar\u0131daki kod bize bir \u2018zip\u2019 nesnesi veriyor. Bu nesnenin \u00f6\u011felerine nas\u0131l ula\u015fabilece\u011finizi biliyorsunuz: print(*zip(a1, a2)) ('a', 'd') ('b', 'e') ('c', 'f') list(zip(a1, a2)) [('a', 'd'), ('b', 'e'), ('c', 'f')] Bu \u00f6zellikten pek \u00e7ok farkl\u0131 \u015fekilde yararlanabilirsiniz. \u00d6rne\u011fin: isimler = ['ahmet', 'mehmet', 'zeynep', 'ilker'] yaslar = [25, 40, 35, 20] for i, y in zip(isimler, yaslar): print('isim: {} / ya\u015f: {}'.format(i, y)) isim: ahmet / ya\u015f: 25 isim: mehmet / ya\u015f: 40 isim: zeynep / ya\u015f: 35 isim: ilker / ya\u015f: 20 vars() Bu fonksiyon, mevcut isim alan\u0131 i\u00e7indeki metot, fonksiyon ve nitelikleri listeler. E\u011fer bu fonksiyonu parametresiz olarak kullan\u0131rsak, daha \u00f6nce g\u00f6rd\u00fc\u011f\u00fcm\u00fcz locals() fonksiyonuyla ayn\u0131 \u00e7\u0131kt\u0131y\u0131 elde ederiz: # vars() #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. {'__builtins__': <module 'builtins' (built-in)>, '__name__': '__main__', '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__doc__': None} Bu fonksiyonu, nesnelerin metotlar\u0131n\u0131 ve niteliklerini \u00f6\u011frenmek i\u00e7in de kullanabilirsiniz: # vars(str) Yukar\u0131da s\u0131ras\u0131yla karakter dizilerinin, listelerin ve s\u00f6zl\u00fcklerin metotlar\u0131n\u0131 listeledik. Bu y\u00f6n\u00fcyle vars() fonksiyonu dir() fonksiyonuna benzer. Son G\u00fcncelleme: 26 Aral\u0131k 2019 - Per\u015fembe","title":"G\u00f6m\u00fcl\u00fc Fonksiyonlar"},{"location":"python/python_gomulu_fonksiyonlar/#gomulu-fonksiyonlar","text":"","title":"G\u00f6m\u00fcl\u00fc Fonksiyonlar"},{"location":"python/python_gomulu_fonksiyonlar/#abs","text":"abs() fonksiyonunu bir say\u0131n\u0131n mutlak de\u011ferini elde etmek i\u00e7in kullan\u0131yoruz. \u00d6rne\u011fin: abs(-20) 20 bir ba\u015fka \u00f6rnek: abs(20) 20 bir di\u011fer \u00f6rnek: abs(20.0) 20.0 Mutlak de\u011fer kavram\u0131 yaln\u0131zca tamsay\u0131lar ve kayan noktal\u0131 say\u0131lar i\u00e7in de\u011fil, ayn\u0131 zamanda karma\u015f\u0131k say\u0131lar i\u00e7in de ge\u00e7erlidir. Dolay\u0131s\u0131yla abs() fonksiyonunu kullanarak karma\u015f\u0131k say\u0131lar\u0131n da mutlak de\u011ferini hesaplayabiliriz: abs(20+3j) 20.223748416156685","title":"abs()"},{"location":"python/python_gomulu_fonksiyonlar/#round","text":"round() fonksiyonu bir say\u0131y\u0131 belli \u00f6l\u00e7\u00fctlere g\u00f6re yukar\u0131 veya a\u015fa\u011f\u0131 do\u011fru yuvarlamam\u0131z\u0131 sa\u011flar. Basit birka\u00e7 \u00f6rnek verelim: round(12.4) 12 burada dikkat etmemiz gereken bir nokta var. \u015eu \u00f6rnekleri bir inceleyelim: round(1.5) 2 round(12.5) 12 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, fonksiyonumuz 1.5 say\u0131s\u0131n\u0131 yukar\u0131 do\u011fru, 12.5 say\u0131s\u0131n\u0131 ise a\u015fa\u011f\u0131 do\u011fru yuvarlad\u0131. Bunun sebebi, kayan noktal\u0131 bir say\u0131n\u0131n \u00fcst ve alt tam say\u0131lara olan uzakl\u0131\u011f\u0131n\u0131n birbirine e\u015fit oldu\u011fu durumlarda Python\u2019\u0131n \u00e7ift say\u0131ya do\u011fru yuvarlama yapmay\u0131 tercih etmesidir. Mesela yukar\u0131daki \u00f6rneklerde 1.5 say\u0131s\u0131 hem 1 say\u0131s\u0131na, hem de 2 say\u0131s\u0131na e\u015fit uzakl\u0131kta bulunuyor. \u0130\u015fte Python bu durumda, bir \u00e7ift say\u0131 olan 2 say\u0131s\u0131na do\u011fru yuvarlamay\u0131 tercih edecektir. round() fonksiyonu toplam iki parametre al\u0131r. \u0130lk parametre, yuvarlanacak say\u0131n\u0131n kendisidir. Yuvarlama hassasiyetini belirlemek i\u00e7in ise ikinci bir parametreden yararlanabiliriz. \u00d6rne\u011fin 22 say\u0131s\u0131n\u0131 7 \u2018ye b\u00f6ld\u00fc\u011f\u00fcm\u00fczde normalde \u015f\u00f6yle bir \u00e7\u0131kt\u0131 elde ederiz: 22/7 3.142857142857143 round() fonksiyonunu tek parametre ile kulland\u0131\u011f\u0131m\u0131zda bu fonksiyon yukar\u0131daki say\u0131y\u0131 \u015fu \u015fekilde yuvarlayacakt\u0131r: round(22/7) 3 \u0130\u015fte biz round() fonksiyonuna ikinci bir parametre daha vererek, yuvarlama hassasiyetini kontrol edebiliriz. A\u015fa\u011f\u0131daki \u00f6rnekleri dikkatlice inceleyin: print(\"round(22/7): \",round(22/7)) print(\"round(22/7, 0): \",round(22/7, 0)) print(\"round(22/7, 1): \",round(22/7, 1)) print(\"round(22/7, 2): \",round(22/7, 2)) print(\"round(22/7, 3): \",round(22/7, 3)) print(\"round(22/7, 4): \",round(22/7, 4)) round(22/7): 3 round(22/7, 0): 3.0 round(22/7, 1): 3.1 round(22/7, 2): 3.14 round(22/7, 3): 3.143 round(22/7, 4): 3.1429 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, round() fonksiyonuna verdi\u011fimiz ikinci parametre, yuvarlama i\u015fleminin ne kadar hassas olaca\u011f\u0131n\u0131 belirliyor.","title":"round()"},{"location":"python/python_gomulu_fonksiyonlar/#all","text":"all() fonksiyonunun g\u00f6revi, bir dizi i\u00e7inde bulunan b\u00fct\u00fcn de\u011ferler True ise True de\u011feri, e\u011fer bu de\u011ferlerden herhangi biri False ise de False de\u011feri d\u00f6nd\u00fcrmektir. \u00d6rne\u011fin elimizde \u015f\u00f6yle bir liste oldu\u011funu varsayal\u0131m: liste = [1, 2, 3, 4] all(liste) True Bildi\u011finiz gibi, 0 hari\u00e7 b\u00fct\u00fcn say\u0131lar\u0131n bool de\u011feri True\u2018dur. Yukar\u0131daki listede False de\u011feri verebilecek herhangi bir de\u011fer bulunmad\u0131\u011f\u0131ndan, all() fonksiyonu bu liste i\u00e7in True de\u011ferini veriyor. Bir de \u015funa bakal\u0131m: liste = [0, 1, 2, 3, 4] all(liste) False Son bir \u00f6rnek daha verelim: liste = ['ahmet', 'mehmet', ''] all(liste) False Listede False de\u011ferine sahip bir bo\u015f karakter dizisi bulundu\u011fu i\u00e7in all() fonksiyonu False \u00e7\u0131kt\u0131s\u0131 veriyor.","title":"all()"},{"location":"python/python_gomulu_fonksiyonlar/#any","text":"any() fonksiyonunun g\u00f6revi de, bir dizi i\u00e7indeki b\u00fct\u00fcn de\u011ferlerden en az biri True ise True \u00e7\u0131kt\u0131s\u0131 vermektir. liste = ['ahmet', 'mehmet', ''] any(liste) True any() fonksiyonunun True \u00e7\u0131kt\u0131s\u0131 verebilmesi i\u00e7in listede yaln\u0131zca bir adet True de\u011ferli \u00f6\u011fe olmas\u0131 yeterlidir. Bu fonksiyonun False \u00e7\u0131kt\u0131s\u0131 verebilmesi i\u00e7in dizi i\u00e7indeki b\u00fct\u00fcn \u00f6\u011felerin bool de\u011ferinin False olmas\u0131 gerekir: l = ['', 0, [], (), set(), dict()] any(l) False","title":"any()"},{"location":"python/python_gomulu_fonksiyonlar/#ascii","text":"Bu fonksiyon, bir nesnenin ekrana bas\u0131labilir halini verir bize. a = 'python' print(ascii(a)) 'python' Bu fonksiyonun, print() fonksiyonundan farkl\u0131 olarak, \u00e7\u0131kt\u0131ya t\u0131rnak i\u015faretlerini de ekledi\u011fine dikkat edin. ascii() fonksiyonunun tam olarak ne yapt\u0131\u011f\u0131n\u0131 daha iyi anlamak i\u00e7in herhalde \u015fu \u00f6rnek daha faydal\u0131 olacakt\u0131r. Dikkatlice bak\u0131n: print('\\n') Bu komutu verdi\u011fimizde, n ka\u00e7\u0131\u015f dizisinin etkisiyle yeni sat\u0131ra ge\u00e7ilece\u011fini biliyorsunuz. Bir de \u015funa bak\u0131n: print(ascii('\\n!')) '\\n!' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, ascii() fonksiyonu, sat\u0131r ba\u015f\u0131 ka\u00e7\u0131\u015f dizisinin g\u00f6revini yapmas\u0131n\u0131 sa\u011flamak yerine bu ka\u00e7\u0131\u015f dizisinin ekrana bas\u0131labilir halini veriyor bize. Ayr\u0131ca bu fonksiyon, karakter dizileri i\u00e7indeki T\u00fcrk\u00e7e karakterlerin de UNICODE temsillerini d\u00f6nd\u00fcr\u00fcr. \u00d6rne\u011fin: a = '\u0131\u015f\u0131k' print(ascii(a)) '\\u0131\\u015f\\u0131k'","title":"ascii()"},{"location":"python/python_gomulu_fonksiyonlar/#repr","text":"repr() fonksiyonunun yapt\u0131\u011f\u0131 i\u015f, biraz \u00f6nce g\u00f6rd\u00fc\u011f\u00fcm\u00fcz ascii() fonksiyonunun yapt\u0131\u011f\u0131 i\u015fe \u00e7ok benzer. Bu iki fonksiyon, ASCII olmayan karakterlere muameleleri a\u00e7\u0131s\u0131ndan birbirinden ayr\u0131l\u0131r. Hat\u0131rlarsan\u0131z ascii() fonksiyonu ASCII olmayan karakterlerle kar\u015f\u0131la\u015ft\u0131\u011f\u0131nda bunlar\u0131n UNICODE (veya onalt\u0131l\u0131k) temsillerini g\u00f6steriyordu: ascii('\u015feker') \"'\\\\u015feker'\" repr() fonksiyonu ise ASCII olmayan karakterlerle kar\u015f\u0131la\u015fsa bile, bize \u00e7\u0131kt\u0131 olarak bunlar\u0131n da karakter kar\u015f\u0131l\u0131klar\u0131n\u0131 g\u00f6sterir: repr('\u015feker') \"'\u015feker'\"","title":"repr()"},{"location":"python/python_gomulu_fonksiyonlar/#bool","text":"Bu fonksiyon bir nesnenin bool de\u011ferini verir: print(\"bool(0): \",bool(0)) print(\"bool(1): \",bool(1)) print(\"bool([]): \",bool([])) bool(0): False bool(1): True bool([]): False","title":"bool()"},{"location":"python/python_gomulu_fonksiyonlar/#bin","text":"Bu fonksiyon, bir say\u0131n\u0131n ikili d\u00fczendeki kar\u015f\u0131l\u0131\u011f\u0131n\u0131 verir: bin(12) '0b1100' Bu fonksiyonun verdi\u011fi \u00e7\u0131kt\u0131n\u0131n bir say\u0131 de\u011fil, karakter dizisi oldu\u011funa dikkat etmelisiniz.","title":"bin()"},{"location":"python/python_gomulu_fonksiyonlar/#bytes","text":"Bu fonksiyon bytes t\u00fcr\u00fcnde nesneler olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. Bu fonksiyon, kendisine verilen parametrelerin t\u00fcr\u00fcne ba\u011fl\u0131 olarak birbirinden farkl\u0131 sonu\u00e7lar ortaya \u00e7\u0131kar\u0131r. \u00d6rne\u011fin e\u011fer bu fonksiyona parametre olarak bir tam say\u0131 verecek olursan\u0131z, bu fonksiyon size o tam say\u0131 miktar\u0131nca bir bayt nesnesi verecektir. Gelin isterseniz bu durumu \u00f6rnekler \u00fczerinde g\u00f6stermeye \u00e7al\u0131\u015fal\u0131m: bytes(10) b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' Yukar\u0131daki komut bize, her bir \u00f6\u011fesinin de\u011feri 0 olan 10 baytl\u0131k bir veri d\u00f6nd\u00fcrd\u00fc: a = bytes(10) a b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' print(a[0]) print(a[1]) print(a[2]) 0 0 0 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bytes(10) komutuyla olu\u015fturdu\u011fumuz a de\u011fi\u015fkeni i\u00e7inde toplam 10 adet bayt var ve bu baytlar\u0131n her birinin de\u011feri 0. Yukar\u0131da, bytes() fonksiyonuna bir tam say\u0131 de\u011ferli parametre verdi\u011fimizde nas\u0131l bir sonu\u00e7 alaca\u011f\u0131m\u0131z\u0131 \u00f6\u011frendik. Peki biz bu fonksiyona parametre olarak bir karakter dizisi verirsek ne olur? Hemen g\u00f6relim: bytes(\"python\") --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-29-0f3b72b3b524> in <module> ----> 1 bytes(\"python\") TypeError: string argument without an encoding Bu fonksiyona karakter dizilerini do\u011frudan parametre olarak veremeyiz. bayta d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemi her kod \u00e7\u00f6z\u00fcc\u00fc taraf\u0131ndan farkl\u0131 bi\u00e7imde yap\u0131l\u0131r. \u00d6rne\u011fin: '\u0131\u015f\u0131k'.encode('utf-8') b'\\xc4\\xb1\\xc5\\x9f\\xc4\\xb1k' '\u0131\u015f\u0131k'.encode('cp857') b'\\x8d\\x9f\\x8dk' '\u0131\u015f\u0131k'.encode('cp1254') b'\\xfd\\xfe\\xfdk' Dolay\u0131s\u0131yla, bytes() fonksiyonunun bir karakter dizisini bayta \u00e7evirirken nas\u0131l davranmas\u0131 gerekti\u011fini anlayabilmesi i\u00e7in, bayta d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemini hangi kod \u00e7\u00f6z\u00fcc\u00fc ile yapmak istedi\u011fimizi a\u00e7\u0131k\u00e7a belirtmemiz gerekir: bytes('\u0131\u015f\u0131k', 'utf-8') b'\\xc4\\xb1\\xc5\\x9f\\xc4\\xb1k' bytes('\u0131\u015f\u0131k', 'cp1254') b'\\xfd\\xfe\\xfdk' Bu arada, \u00e7\u0131kt\u0131da g\u00f6r\u00fcnen \u2018b\u2019 harflerinin, elimizdeki verinin bir bayt oldu\u011funu g\u00f6steren bir i\u015faret oldu\u011funu biliyorsunuz. Ayr\u0131ca, bytes() fonksiyonuna verdi\u011fimiz ikinci parametrenin isminin encoding oldu\u011funu ve bu parametreyi isimli bir parametre olarak da kullanabilece\u011fimizi belirtelim: bytes('python', encoding='ascii') b'python' bytes('\u015feker', 'ascii') --------------------------------------------------------------------------- UnicodeEncodeError Traceback (most recent call last) <ipython-input-37-71877b66453f> in <module> ----> 1 bytes('\u015feker', 'ascii') UnicodeEncodeError: 'ascii' codec can't encode character '\\u015f' in position 0: ordinal not in range(128) \u2018\u015f\u2019 harfi \u2018ASCII\u2019 karakter k\u00fcmesinde; \u2018\u20ac\u2019 i\u015fareti ise \u2018CP857\u2019 adl\u0131 karakter k\u00fcmesinde tan\u0131mlanmam\u0131\u015f birer karakter oldu\u011fu i\u00e7in, ilgili kod \u00e7\u00f6z\u00fcc\u00fcler bu karakterleri \u00e7\u00f6z\u00fcp bayta d\u00f6n\u00fc\u015ft\u00fcremiyor. Yazd\u0131\u011f\u0131m\u0131z kodlar\u0131n bu t\u00fcr durumlarda tamamen \u00e7\u00f6kmesini engellemek i\u00e7in, \u00f6nceki derslerimizde de \u00e7e\u015fitli vesilelerle \u00f6\u011frenmi\u015f oldu\u011fumuz errors adl\u0131 bir parametreden yararlanabiliriz: bytes('\u015feker', encoding='ascii', errors='replace') b'?eker' Son olarak, bytes() fonksiyonuna parametre olarak 0-256 aras\u0131 say\u0131lardan olu\u015fan diziler de verebiliriz: bytes([65, 10, 12, 11, 15, 66]) b'A\\n\\x0c\\x0b\\x0fB'","title":"bytes()"},{"location":"python/python_gomulu_fonksiyonlar/#bytearray","text":"bytearray() ve bytes() fonksiyonlar\u0131 birbirlerine \u00e7ok benzer. Bu ikisi aras\u0131ndaki tek fark, bytearray() ile olu\u015fturulan veri tipinin, bytes() ile olu\u015fturulan veri tipinin aksine, de\u011fi\u015ftirilebilir nitelikte olmas\u0131d\u0131r: a = bytearray('konya', 'ascii') a bytearray(b'konya') bytearray(b'konya') bytearray(b'konya') a[0] = 65 a bytearray(b'Aonya')","title":"bytearray()"},{"location":"python/python_gomulu_fonksiyonlar/#chr","text":"Bu fonksiyon, kendisine parametre olarak verilen bir tam say\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131n\u0131 d\u00f6nd\u00fcr\u00fcr. \u00d6rne\u011fin: chr(10) '\\n' Bildi\u011finiz gibi 10 say\u0131s\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131 sat\u0131r ba\u015f\u0131 karakteridir. Bir de \u015funa bakal\u0131m: chr(65) 'A' 65 say\u0131s\u0131n\u0131n karakter kar\u015f\u0131l\u0131\u011f\u0131 ise \u2018A\u2019 harfidir. Bu fonksiyon say\u0131lar\u0131 karakterlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcrken ASCII sistemini de\u011fil, UNICODE sistemini temel al\u0131r. Dolay\u0131s\u0131yla bu fonksiyon ile 128 (veya 255) \u00fcst\u00fc say\u0131lar\u0131 da d\u00f6n\u00fc\u015ft\u00fcrebiliriz. \u00d6rne\u011fin: chr(305) '\u0131'","title":"chr()"},{"location":"python/python_gomulu_fonksiyonlar/#list","text":"Bu fonksiyon iki farkl\u0131 ama\u00e7 i\u00e7in kullan\u0131labilir: Liste tipinde bir veri olu\u015fturmak Farkl\u0131 veri tiplerini liste adl\u0131 veri tipine d\u00f6n\u00fc\u015ft\u00fcrmek Birinci ama\u00e7 i\u00e7in bu fonksiyonu \u015fu \u015fekilde kullan\u0131yoruz: l = list() ikinc ama\u00e7 i\u00e7in bu fonksiyonu \u015fu \u015fekilde kullan\u0131yoruz: liste = list('python') liste ['p', 'y', 't', 'h', 'o', 'n'] Elbette bu fonksiyonu kullanarak ba\u015fka veri tiplerini de listeye d\u00f6n\u00fc\u015ft\u00fcrebiliriz. \u00d6rne\u011fin bir s\u00f6zl\u00fc\u011f\u00fc, bu fonksiyon yard\u0131m\u0131yla kolayca listeye d\u00f6n\u00fc\u015ft\u00fcrebiliriz: s = {'elma': 44, 'armut': 10, 'erik': 100} list(s) ['elma', 'armut', 'erik'] Bir s\u00f6zl\u00fck listeye d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcrken, elbette s\u00f6zl\u00fc\u011f\u00fcn anahtarlar\u0131 dikkate al\u0131nacakt\u0131r. E\u011fer siz s\u00f6zl\u00fc\u011f\u00fcn anahtarlar\u0131ndan de\u011fil de de\u011ferlerinde bir liste olu\u015fturmak isterseniz \u015f\u00f6yle bir kod yazabilirsiniz: list(s.values()) [44, 10, 100]","title":"list()"},{"location":"python/python_gomulu_fonksiyonlar/#set","text":"set() fonksiyonu list() fonksiyonuna \u00e7ok benzer. Bu fonksiyon da t\u0131pk\u0131 list() fonksiyonu gibi, veri tipleri aras\u0131nda d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemleri ger\u00e7ekle\u015ftirmek i\u00e7in kullan\u0131labilir. set() fonksiyonunun g\u00f6revi farkl\u0131 veri tiplerini k\u00fcmeye d\u00f6n\u00fc\u015ft\u00fcrmektir: k = set() Burada bo\u015f bir k\u00fcme olu\u015fturduk. \u015eimdi de mesela bir karakter dizisini k\u00fcmeye d\u00f6n\u00fc\u015ft\u00fcrelim: i = 'python' set(i) {'h', 'n', 'o', 'p', 't', 'y'}","title":"set()"},{"location":"python/python_gomulu_fonksiyonlar/#tuple","text":"tuple() fonksiyonu da, t\u0131pk\u0131 list(), set() ve benzerleri gibi bir d\u00f6n\u00fc\u015ft\u00fcr\u00fcc\u00fc fonksiyondur. Bu fonksiyon farkl\u0131 veri tiplerini demete d\u00f6n\u00fc\u015ft\u00fcr\u00fcr: tuple('a') ('a',)","title":"tuple()"},{"location":"python/python_gomulu_fonksiyonlar/#frozenset","text":"Bu fonksiyonu kullanarak farkl\u0131 veri tiplerini dondurulmu\u015f k\u00fcmeye d\u00f6n\u00fc\u015ft\u00fcrebilirsiniz: s = set('istihza') df = frozenset(s) df frozenset({'a', 'h', 'i', 's', 't', 'z'})","title":"frozenset()"},{"location":"python/python_gomulu_fonksiyonlar/#complex","text":"Karma\u015f\u0131k say\u0131lar Python\u2019da \u2018complex\u2019 ifadesiyle g\u00f6steriliyor. Mesela \u015fu bir karma\u015f\u0131k say\u0131d\u0131r: 12+0j (12+0j) \u0130\u015fte e\u011fer herhangi bir say\u0131y\u0131 karma\u015f\u0131k say\u0131ya d\u00f6n\u00fc\u015ft\u00fcrmeniz gerekirse complex() adl\u0131 bir fonksiyondan yararlanabilirsiniz. \u00d6rne\u011fin: complex(15) (15+0j) B\u00f6yle bir kod yazd\u0131\u011f\u0131m\u0131zda, verdi\u011fimiz parametre karma\u015f\u0131k say\u0131n\u0131n ger\u00e7ek k\u0131sm\u0131n\u0131 olu\u015fturacak, sanal k\u0131s\u0131m ise 0 olarak kabul edilecektir. Elbette isterseniz sanal k\u0131sm\u0131 kendiniz de belirleyebilirsiniz: complex(15, 2) (15+2j)","title":"complex()"},{"location":"python/python_gomulu_fonksiyonlar/#float","text":"Bu fonksiyonu, say\u0131lar\u0131 veya karakter dizilerini kayan noktal\u0131 say\u0131ya d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in kullan\u0131yoruz: float('134') 134.0","title":"float()"},{"location":"python/python_gomulu_fonksiyonlar/#int","text":"Bu fonksiyon birka\u00e7 farkl\u0131 ama\u00e7 i\u00e7in kullan\u0131labilir. int() fonksiyonunun en temel g\u00f6revi, bir karakter dizisi veya kayan noktal\u0131 say\u0131y\u0131 (e\u011fer m\u00fcmk\u00fcnse) tam say\u0131ya d\u00f6n\u00fc\u015ft\u00fcrmektir: int('10') 10 int(12.4) 12 Bunun d\u0131\u015f\u0131nda bu fonksiyonu, herhangi bir sayma sisteminde temsil edilen bir say\u0131y\u0131 onlu sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in de kullanabiliriz. \u00d6rne\u011fin: int('12', 8) 10 Burada, sekizli sayma sistemine ait say\u0131 de\u011ferli bir karakter dizisi olan \u201812\u2019\u2018yi onlu sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrd\u00fck ve b\u00f6ylece \u201810 say\u0131s\u0131n\u0131 elde ettik. int() fonksiyonunu sayma sistemleri aras\u0131nda d\u00f6n\u00fc\u015ft\u00fcrme i\u015flemlerinde kullanabilmek i\u00e7in ilk parametrenin bir karakter dizisi olmas\u0131 gerekti\u011fine dikkat ediyoruz. Bu arada, int(\u201912\u2019, 8) komutununun 12 say\u0131s\u0131n\u0131 sekizli sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrmedi\u011fine dikkat edin. Bu komutun yapt\u0131\u011f\u0131 i\u015f sekizli sayma sistemindeki 12 say\u0131s\u0131n\u0131 onlu sayma sistemine d\u00f6n\u00fc\u015ft\u00fcrmektir. int() fonksiyonunun bu kullan\u0131m\u0131yla ilgili bir \u00f6rnek daha verelim: int('4cf', 16) 1231 Burada da, onalt\u0131l\u0131 sayma sistemine ait bir say\u0131 olan 4cf\u2018yi onlu sayma sistemine \u00e7evirdik ve 1231 say\u0131s\u0131n\u0131 elde ettik. 4cf say\u0131s\u0131n\u0131 int() fonksiyonuna parametre olarak verirken bunu karakter dizisi \u015feklinde yazmay\u0131 unutmuyoruz. Aksi halde Python bize bir hata mesaj\u0131 g\u00f6sterecektir.","title":"int()"},{"location":"python/python_gomulu_fonksiyonlar/#str","text":"Bu fonksiyonun, farkl\u0131 veri tiplerini karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrmek i\u00e7in kullan\u0131ld\u0131\u011f\u0131n\u0131 biliyorsunuz. \u00d6rne\u011fin: str(12) '12' Burada 12 say\u0131s\u0131n\u0131 bir karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrd\u00fck. \u015eimdi de bir bayt\u0131 karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrelim: bayt = b'python' Bayt nesnemizi tan\u0131mlad\u0131k. \u015eimdi bunu bir karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrelim: kardiz = str(bayt, encoding='utf-8') print(kardiz) python","title":"str()"},{"location":"python/python_gomulu_fonksiyonlar/#dict","text":"Bu fonksiyon, farkl\u0131 veri tiplerinden s\u00f6zl\u00fckler \u00fcretmemizi sa\u011flar. \u00d6rne\u011fin bu fonksiyonu kullanarak bo\u015f bir s\u00f6zl\u00fck olu\u015fturabiliriz: s = dict() Bu fonksiyon, de\u011fi\u015fkenlerden s\u00f6zl\u00fckler olu\u015fturmam\u0131z\u0131 da sa\u011flar: s = dict(a=1, b=2, c=3) s {'a': 1, 'b': 2, 'c': 3} dict() fonksiyonuna parametre olarak i\u00e7 i\u00e7e ge\u00e7mi\u015f listeler veya demetler vererek de s\u00f6zl\u00fck \u00fcretebiliriz: ogeler = (['a', 1], ['b', 2], ['c', 3]) dict(ogeler) {'a': 1, 'b': 2, 'c': 3}","title":"dict()"},{"location":"python/python_gomulu_fonksiyonlar/#callable","text":"Bu fonksiyon, bir nesnenin \u2018\u00e7a\u011fr\u0131labilir\u2019 olup olmad\u0131\u011f\u0131n\u0131 denetler. Peki hangi nesneler \u00e7a\u011fr\u0131labilir \u00f6zelliktedir. Mesela fonksiyonlar \u00e7a\u011fr\u0131labilir nesnelerdir. De\u011fi\u015fkenler ise \u00e7a\u011fr\u0131labilir nesneler de\u011fildir. Birka\u00e7 \u00f6rnek verelim bununla ilgili: callable(open) True Python\u2019\u0131n open() adl\u0131 bir fonksiyonu oldu\u011fu i\u00e7in, do\u011fal olarak callable() fonksiyonu True \u00e7\u0131kt\u0131s\u0131 veriyor. Bir de \u015funa bakal\u0131m: import sys callable(sys.version) False Burada da sys mod\u00fcl\u00fc i\u00e7indeki version adl\u0131 nesnenin \u00e7a\u011fr\u0131labilir \u00f6zellikte olup olmad\u0131\u011f\u0131n\u0131 sorgulad\u0131k. Daha \u00f6nceki derslerimizde de g\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, sys mod\u00fcl\u00fc i\u00e7indeki version adl\u0131 ara\u00e7 bir fonksiyon de\u011fil, de\u011fi\u015fkendir. Dolay\u0131s\u0131yla bu de\u011fi\u015fken callable(sys.version) sorgusuna False yan\u0131t\u0131 verir.","title":"callable()"},{"location":"python/python_gomulu_fonksiyonlar/#ord","text":"u fonksiyon, bir karakterin kar\u015f\u0131l\u0131k geldi\u011fi ondal\u0131k say\u0131y\u0131 verir. \u00d6rne\u011fin: ord('a') 97 ord('\u0131') 305","title":"ord()"},{"location":"python/python_gomulu_fonksiyonlar/#oct","text":"Bu fonksiyon, bir say\u0131y\u0131 sekizli d\u00fczendeki kar\u015f\u0131l\u0131\u011f\u0131na \u00e7evirmemizi sa\u011flar: oct(10) '0o12'","title":"oct()"},{"location":"python/python_gomulu_fonksiyonlar/#hex","text":"Bu fonksiyon, bir say\u0131y\u0131 onalt\u0131l\u0131 d\u00fczendeki kar\u015f\u0131l\u0131\u011f\u0131na \u00e7evirmemizi sa\u011flar: hex(305) '0x131' Yaln\u0131z hem oct() hem de hex() fonksiyonlar\u0131nda dikkat etmemiz gereken \u015fey, bu fonksiyonlar\u0131n parametre olarak bir say\u0131 al\u0131p, \u00e7\u0131kt\u0131 olarak bir karakter dizisi veriyor olmas\u0131d\u0131r.","title":"hex()"},{"location":"python/python_gomulu_fonksiyonlar/#eval-exec-globals-locals-compile","text":"Bu b\u00f6l\u00fcmde be\u015f farkl\u0131 fonksiyonu bir arada inceleyece\u011fiz. Bu fonksiyonlar\u0131 birlikte ele almam\u0131z\u0131n nedeni bunlar\u0131n birbiriyle yak\u0131ndan ba\u011flant\u0131l\u0131 olmas\u0131. Burada i\u015fleyece\u011fimiz bu be\u015f fonksiyon \u015funlardan olu\u015fuyor: eval() exec() globals() locals() compile() Ancak bu fonksiyonlardan s\u00f6z etmeye ba\u015flamadan \u00f6nce Python\u2019daki iki \u00f6nemli kavram\u0131 a\u00e7\u0131kl\u0131\u011fa kavu\u015fturmam\u0131z gerekiyor: Bu kavramlar \u015funlar: ifade deyim \u00d6ncelikle \u2018ifade\u2019 kavram\u0131ndan ba\u015flayal\u0131m. \u0130ngilizcede expression denen \u2018ifadeler\u2019, bir de\u011fer \u00fcretmek i\u00e7in kullan\u0131lan kod par\u00e7alar\u0131d\u0131r. Karakter dizileri, say\u0131lar, i\u015fle\u00e7ler, \u00f6teki veri tipleri, liste \u00fcrete\u00e7leri, s\u00f6zl\u00fck \u00fcrete\u00e7leri, k\u00fcme \u00fcrete\u00e7leri, fonksiyonlar hep birer ifadedir. \u00d6rne\u011fin: 5 5 23 + 4 27 len([1, 2, 3]) 3 \u0130ngilizcede statement olarak adland\u0131r\u0131lan \u2018deyimler\u2019 ise ifadeleri de kapsayan daha geni\u015f bir kavramd\u0131r. Buna g\u00f6re b\u00fct\u00fcn ifadeler ayn\u0131 zamanda birer deyimdir. Daha do\u011frusu, ifadelerin bir araya gelmesi ile deyimler olu\u015fturulabilir. Deyimlere birka\u00e7 \u00f6rnek verelim: a = 5 if a: print(a) 5 Python programlama dilinde deyimlerle ifadeleri ay\u0131rt etmenin kolay bir yolu da eval() fonksiyonundan yararlanmakt\u0131r. E\u011fer deyim mi yoksa ifade mi oldu\u011fundan emin olamad\u0131\u011f\u0131n\u0131z bir \u015feyi eval() fonksiyonuna parametre olarak verdi\u011finizde hata alm\u0131yorsan\u0131z o parametre bir ifadedir. E\u011fer hata al\u0131yorsan\u0131z o parametre bir deyimdir. \u00c7\u00fcnk\u00fc eval() fonksiyonuna parametre olarak yaln\u0131zca ifadeler verilebilir. Birka\u00e7 \u00f6rnek verelim: eval('a = 5') Traceback (most recent call last): File \"/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py\", line 3326, in run_code exec(code_obj, self.user_global_ns, self.user_ns) File \"<ipython-input-85-2f07a5f3d91b>\", line 1, in <module> eval('a = 5') File \"<string>\", line 1 a = 5 ^ SyntaxError: invalid syntax G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, eval() fonksiyonu bize bir hata mesaj\u0131 verdi. \u00c7\u00fcnk\u00fc a = 5 kodu bir deyimdir. Unutmay\u0131n, Python\u2019da b\u00fct\u00fcn de\u011fer atama i\u015flemleri birer deyimdir. Dolay\u0131s\u0131yla eval() fonksiyonu bu deyimi parametre olarak alamaz. Bir de \u015funa bakal\u0131m: eval('5 + 25') 30 Bu defa hata almad\u0131k. \u00c7\u00fcnk\u00fc eval() fonksiyonuna, olmas\u0131 gerekti\u011fi gibi, parametre olarak bir ifade verdik. Bildi\u011finiz gibi, 5 + 25 kodu bir ifadedir. Dedi\u011fimiz gibi, eval() fonksiyonu deyimleri parametre olarak alamaz. Ama exec() fonksiyonu alabilir: exec('a = 5') Bu \u015fekilde, de\u011feri 5 olan a adl\u0131 bir de\u011fi\u015fken olu\u015fturmu\u015f olduk. \u0130sterseniz kontrol edelim: print(a) 5 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, exec() fonksiyonu, mevcut isim alan\u0131 i\u00e7inde a adl\u0131 bir de\u011fi\u015fken olu\u015fturdu. Yaln\u0131z elbette mevcut isim alan\u0131 i\u00e7inde yeni de\u011fi\u015fkenler ve yeni de\u011ferler olu\u015ftururken dikkatli olmam\u0131z gerekti\u011fini biliyorsunuz. Zira mesela yukar\u0131daki komutu vermeden \u00f6nce mevcut isim alan\u0131nda zaten a adl\u0131 bir de\u011fi\u015fken varsa, o de\u011fi\u015fkenin de\u011feri de\u011fi\u015fecektir: a = 20 Elimizde, de\u011feri 20 olan a adl\u0131 bir de\u011fi\u015fken var. \u015eimdi exec() fonksiyonu yard\u0131m\u0131yla a de\u011fi\u015fkeninin de i\u00e7inde yer ald\u0131\u011f\u0131 mevcut isim alan\u0131na m\u00fcdahale ediyoruz: exec('a = 10') B\u00f6ylece a de\u011fi\u015fkeninin eski de\u011ferini silmi\u015f olduk. Kontrol edelim: print(a) 10 Bu t\u00fcr durumlarda, exec() ile olu\u015fturdu\u011funuz de\u011fi\u015fkenleri global isim alan\u0131na de\u011fil de, farkl\u0131 bir isim alan\u0131na g\u00f6ndermeyi tercih edebilirsiniz. Peki ama bunu nas\u0131l yapaca\u011f\u0131z? Python programlama dilinde isim alanlar\u0131 s\u00f6zl\u00fck tipinde bir veridir. \u00d6rne\u011fin global isim alan\u0131 basit bir s\u00f6zl\u00fckten ibarettir. Global isim alan\u0131n\u0131 g\u00f6steren s\u00f6zl\u00fckte hangi anahtar ve de\u011ferlerin oldu\u011funu g\u00f6rmek i\u00e7in globals() adl\u0131 bir fonksiyonu kullanabilirsiniz: # globals() #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. {'__doc__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__name__': '__main__', '__package__': None, '__builtins__': <module 'builtins'>} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, elimizdeki \u015fey ger\u00e7ekten de bir s\u00f6zl\u00fck. Dolay\u0131s\u0131yla bir s\u00f6zl\u00fck ile ne yapabilirsek bu s\u00f6zl\u00fckle de ayn\u0131 \u015feyi yapabiliriz... \u2018globals\u2019 adl\u0131 bu s\u00f6zl\u00fc\u011f\u00fcn i\u00e7eri\u011fi, o anda global isim alan\u0131nda bulunan nesnelere g\u00f6re farkl\u0131l\u0131k g\u00f6sterecektir. \u00d6rne\u011fin: x = 10 \u015feklinde 10 de\u011ferine sahip bir x nesnesi tan\u0131mlad\u0131ktan sonra globals() fonksiyonunu tekrar \u00e7al\u0131\u015ft\u0131r\u0131rsan\u0131z global isim alan\u0131na bu nesnenin de eklenmi\u015f oldu\u011funu g\u00f6r\u00fcrs\u00fcn\u00fcz. Dedi\u011fimiz gibi, globals() fonksiyonundan d\u00f6nen nesne bir s\u00f6zl\u00fckt\u00fcr. Bu s\u00f6zl\u00fc\u011fe, herhangi bir s\u00f6zl\u00fc\u011fe veri ekler gibi de\u011fer de ekleyebilirsiniz: globals()['z'] = 23 Bu \u015fekilde global isim alan\u0131na z adl\u0131 bir de\u011fi\u015fken eklemi\u015f oldunuz: Yaln\u0131z, Python programlama dili bize bu \u015fekilde global isim alan\u0131na nesne ekleme imkan\u0131 verse de, biz mecbur de\u011filsek bu y\u00f6ntemi kullanmaktan ka\u00e7\u0131nmal\u0131y\u0131z. \u00c7\u00fcnk\u00fc bu \u015fekilde s\u0131rad\u0131\u015f\u0131 bir y\u00f6ntemle de\u011fi\u015fken tan\u0131mlad\u0131\u011f\u0131m\u0131z i\u00e7in asl\u0131nda global isim alan\u0131n\u0131, nerden geldi\u011fini kestirmenin g\u00fc\u00e7 oldu\u011fu de\u011ferlerle \u2018kirletmi\u015f\u2019 oluyoruz. Bildi\u011finiz gibi, Python\u2019da global isim alan\u0131 d\u0131\u015f\u0131nda bir de lokal isim alan\u0131 bulunur. Lokal isim alanlar\u0131n\u0131n, fonksiyonlara (ve ileride g\u00f6rece\u011fimiz gibi s\u0131n\u0131flara) ait bir isim alan\u0131 oldu\u011funu biliyorsunuz. \u0130\u015fte bu isim alanlar\u0131na ula\u015fmak i\u00e7in de locals() adl\u0131 bir fonksiyondan yararlanaca\u011f\u0131z: def fonksiyon(param1, param2): x = 10 print(locals()) fonksiyon(10, 20) {'param1': 10, 'param2': 20, 'x': 10} Bu fonksiyonu \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131n\u0131zda \u015fu \u00e7\u0131kt\u0131y\u0131 alacaks\u0131n\u0131z: G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, locals() fonksiyonu ger\u00e7ekten de bize fonksiyon() adl\u0131 fonksiyon i\u00e7indeki lokal de\u011ferleri veriyor. globals() ve locals() fonksiyonlar\u0131n\u0131n ne i\u015fe yarad\u0131\u011f\u0131n\u0131 inceledi\u011fimize g\u00f6re exec() fonksiyonunu anlat\u0131rken kald\u0131\u011f\u0131m\u0131z yere d\u00f6nebiliriz. Ne diyorduk? Elimizde, de\u011feri 20 olan a adl\u0131 bir de\u011fi\u015fken vard\u0131: a = 20 exec() fonksiyonu yard\u0131m\u0131yla a de\u011fi\u015fkeninin de i\u00e7inde yer ald\u0131\u011f\u0131 mevcut isim alan\u0131na m\u00fcdahale edelim: exec('a = 3') Bu \u015fekilde a de\u011fi\u015fkeninin varolan de\u011ferini silmi\u015f olduk: print(a) 3 Dedi\u011fimiz gibi, bu t\u00fcr durumlarda, exec() ile olu\u015fturdu\u011funuz de\u011fi\u015fkenleri global isim alan\u0131 yerine farkl\u0131 bir isim alan\u0131na g\u00f6ndermeyi tercih etmemiz daha uygun olacakt\u0131r. Python\u2019da isim alanlar\u0131n\u0131n basit bir s\u00f6zl\u00fck oldu\u011funu \u00f6\u011frendi\u011fimize g\u00f6re, exec() ile olu\u015fturdu\u011fumuz de\u011fi\u015fkenleri global isim alan\u0131 yerine nas\u0131l farkl\u0131 bir isim alan\u0131na g\u00f6nderece\u011fimizi g\u00f6rebiliriz. \u00d6nce yeni bir isim alan\u0131 olu\u015ftural\u0131m: ia = {} \u015eimdi exec() ile olu\u015fturaca\u011f\u0131m\u0131z de\u011ferleri bu isim alan\u0131na g\u00f6nderebiliriz: exec('a = 3', ia) B\u00f6ylece global isim alan\u0131ndaki a de\u011fi\u015fkeninin de\u011ferine dokunmam\u0131\u015f olduk: a 3 Yeni olu\u015fturdu\u011fumuz de\u011fer ise ia adl\u0131 yeni isim alan\u0131na gitti: ia['a'] 3","title":"eval(), exec(), globals(), locals(), compile()"},{"location":"python/python_gomulu_fonksiyonlar/#copyright","text":"Bu fonksiyon yard\u0131m\u0131yla Python\u2019\u0131n telif haklar\u0131na ili\u015fkin bilgilere eri\u015febilirsiniz: copyright() Copyright (c) 2001-2019 Python Software Foundation. All Rights Reserved. Copyright (c) 2000 BeOpen.com. All Rights Reserved. Copyright (c) 1995-2001 Corporation for National Research Initiatives. All Rights Reserved. Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam. All Rights Reserved.","title":"copyright()"},{"location":"python/python_gomulu_fonksiyonlar/#credits","text":"Bu fonksiyon, Python programlama diline katk\u0131da bulunanlara te\u015fekk\u00fcr i\u00e7eren k\u00fc\u00e7\u00fck bir metni ekrana \u00e7\u0131kt\u0131 olarak verir: credits() Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands for supporting Python development. See www.python.org for more information.","title":"credits()"},{"location":"python/python_gomulu_fonksiyonlar/#license","text":"Bu fonksiyon yard\u0131m\u0131yla Python\u2019\u0131n lisans\u0131na ili\u015fkin epey ayr\u0131nt\u0131l\u0131 metinlere ula\u015fabilirsiniz. license() A. HISTORY OF THE SOFTWARE ========================== Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see http://www.cwi.nl) in the Netherlands as a successor of a language called ABC. Guido remains Python's principal author, although it includes many contributions from others. In 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, see http://www.cnri.reston.va.us) in Reston, Virginia where he released several versions of the software. In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations, which became Zope Corporation. In 2001, the Python Software Foundation (PSF, see https://www.python.org/psf/) was formed, a non-profit organization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring member of the PSF. All Python releases are Open Source (see http://www.opensource.org for the Open Source Definition). Historically, most, but not all, Python Hit Return for more, or q (and Return) to quit: q","title":"license()"},{"location":"python/python_gomulu_fonksiyonlar/#dir","text":"E\u011fer dir() fonksiyonunu parametresiz olarak kullan\u0131rsak, mevcut isim alan\u0131ndaki \u00f6\u011feleri bir liste halinde elde ederiz: # dir() #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. Bu bak\u0131mdan dir() fonksiyonu globals() ve locals() fonksiyonlar\u0131na benzer. Ancak onlardan fark\u0131, dir() fonksiyonunun \u00e7\u0131kt\u0131 olarak bir liste, globals() ve locals() fonksiyonlar\u0131n\u0131n ise birer s\u00f6zl\u00fck vermesidir. Ayr\u0131ca dir() fonksiyonunu kullanarak nesnelerin metot ve niteliklerini i\u00e7eren bir listeye ula\u015fabilece\u011fimizi de biliyorsunuz. \u00d6rne\u011fin bu fonksiyonu kullanarak farkl\u0131 veri tiplerinin metot ve niteliklerini listeleyebiliriz: # dir('') #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. # dir([]) #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. # dir({}) #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz.","title":"dir()"},{"location":"python/python_gomulu_fonksiyonlar/#divmod","text":"Bu fonksiyonun i\u015flevini bir \u00f6rnek \u00fczerinden g\u00f6stermeye \u00e7al\u0131\u015fal\u0131m: divmod(10, 2) (5, 0) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi divmod(10, 2) komutu bize iki \u00f6\u011feli bir demet veriyor. Bu demetin ilk \u00f6\u011fesi, divmod() fonksiyonuna verilen ilk parametrenin ikinci parametreye b\u00f6l\u00fcnmesi i\u015fleminin sonucudur. Demetimizin ikinci \u00f6\u011fesi ise, ilk parametrenin ikinci parametreye b\u00f6l\u00fcnmesi i\u015fleminden kalan say\u0131d\u0131r. Yani demetin ilk parametresi b\u00f6lme i\u015fleminin \u2018b\u00f6l\u00fcm\u2019 k\u0131sm\u0131n\u0131, ikinci \u00f6\u011fesi ise \u2018kalan\u2019 k\u0131sm\u0131n\u0131 verir. Bu fonksiyonun b\u00f6lme i\u015flemininin sonucunu tamsay\u0131 cinsinden verdi\u011fine dikkat ediyoruz: divmod(10, 3) (3, 1) 10 say\u0131s\u0131 3 say\u0131s\u0131na b\u00f6l\u00fcnd\u00fc\u011f\u00fcnde tamsay\u0131 cinsinden sonu\u00e7 3 \u2018t\u00fcr. Bu b\u00f6lme i\u015fleminin kalan\u0131 ise 1 \u2018dir.","title":"divmod()"},{"location":"python/python_gomulu_fonksiyonlar/#enumerate","text":"\u0130ngilizcede enumerate kelimesi \u2018numaraland\u0131rmak\u2019 anlam\u0131na gelir. enumerate() fonksiyonunun g\u00f6revi de kelimenin bu anlam\u0131yla ayn\u0131d\u0131r. Yani bu fonksiyonu kullanarak nesneleri numaraland\u0131rabiliriz. Bu fonksiyon bize bir \u2018enumerate\u2019 nesnesi verir: enumerate('python') <enumerate at 0x10e47baa0> Bu nesnenin i\u00e7eri\u011fine nas\u0131l eri\u015febilece\u011fimizi biliyorsunuz: Nesneyi bir listeye \u00e7evirebiliriz: list(enumerate('python')) [(0, 'p'), (1, 'y'), (2, 't'), (3, 'h'), (4, 'o'), (5, 'n')] veya: [i for i in enumerate('python')] [(0, 'p'), (1, 'y'), (2, 't'), (3, 'h'), (4, 'o'), (5, 'n')] print() fonksiyonuna y\u0131ld\u0131zl\u0131 parametre olarak verebiliriz: print(*enumerate('python')) (0, 'p') (1, 'y') (2, 't') (3, 'h') (4, 'o') (5, 'n') veya nesne \u00fczerinde bir d\u00f6ng\u00fc kurabiliriz: for i in enumerate('python'): print(i) (0, 'p') (1, 'y') (2, 't') (3, 'h') (4, 'o') (5, 'n')","title":"enumerate()"},{"location":"python/python_gomulu_fonksiyonlar/#exit","text":"Bu fonksiyon, o anda \u00e7al\u0131\u015fan programdan \u00e7\u0131kman\u0131z\u0131 sa\u011flar. E\u011fer bu komutu etkile\u015fimli kabukta verirseniz o anda a\u00e7\u0131k olan oturum kapanacakt\u0131r.","title":"exit()"},{"location":"python/python_gomulu_fonksiyonlar/#help","text":"help() fonksiyonu g\u00f6m\u00fcl\u00fc fonksiyonlar i\u00e7inde en faydal\u0131 fonksiyonlar\u0131n ba\u015f\u0131nda gelir. Bu fonksiyonu kullanarak Python programlama diline ait \u00f6\u011felere ili\u015fkin yard\u0131m belgelerine ula\u015fabiliriz. \u00d6rne\u011fin: help(dir) Help on built-in function dir in module builtins: dir(...) dir([object]) -> list of strings If called without an argument, return the names in the current scope. Else, return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it. If the object supplies a method named __dir__, it will be used; otherwise the default dir() logic is used and returns: for a module object: the module's attributes. for a class object: its attributes, and recursively the attributes of its bases. for any other object: its attributes, its class's attributes, and recursively the attributes of its class's base classes. Bu komutu verdi\u011fimizde dir() fonksiyonunun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 g\u00f6steren \u0130ngilizce bir belgeye ula\u015f\u0131r\u0131z. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, hakk\u0131nda bilgi edinmek istedi\u011fimiz \u00f6\u011feyi help() fonksiyonuna parametre olarak vererek ilgili yard\u0131m dosyas\u0131na eri\u015febiliyoruz. E\u011fer bu fonksiyonu parametresiz olarak kullan\u0131rsak \u2018etkile\u015fimli yard\u0131m\u2019 denen ekrana ula\u015f\u0131r\u0131z: help() Welcome to Python 3.7's help utility! If this is your first time using Python, you should definitely check out the tutorial on the Internet at https://docs.python.org/3.7/tutorial/. Enter the name of any module, keyword, or topic to get help on writing Python programs and using Python modules. To quit this help utility and return to the interpreter, just type \"quit\". To get a list of available modules, keywords, symbols, or topics, type \"modules\", \"keywords\", \"symbols\", or \"topics\". Each module also comes with a one-line summary of what it does; to list the modules whose name or summary contain a given string such as \"spam\", type \"modules spam\". help> dir Help on built-in function dir in module builtins: dir(...) dir([object]) -> list of strings If called without an argument, return the names in the current scope. Else, return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it. If the object supplies a method named __dir__, it will be used; otherwise the default dir() logic is used and returns: for a module object: the module's attributes. for a class object: its attributes, and recursively the attributes of its bases. for any other object: its attributes, its class's attributes, and recursively the attributes of its class's base classes. help> q You are now leaving help and returning to the Python interpreter. If you want to ask for help on a particular object directly from the interpreter, you can type \"help(object)\". Executing \"help('string')\" has the same effect as typing a particular string at the help> prompt. Bu ekranda, hakk\u0131nda bilgi edinmek istedi\u011finiz \u00f6\u011feyi help> ibaresinden hemen sonra, bo\u015fluk b\u0131rakmadan yazarak \u00f6\u011feye ili\u015fkin bilgilere ula\u015fabilirsiniz: Etkile\u015fimli yard\u0131m ekran\u0131ndan \u00e7\u0131kmak i\u00e7in \u2018q\u2019 harfine basabilirsiniz.","title":"help()"},{"location":"python/python_gomulu_fonksiyonlar/#id","text":"Python\u2019da her nesnenin bir kimli\u011finin oldu\u011funu biliyorsunuz. Python\u2019daki her nesnenin kimli\u011fi e\u015f\u015fiz, tek ve benzersizdir. a = 50 id(a) 4491754160 kardiz = \"Merhaba D\u00fcnya\" id(kardiz) 4534630896","title":"id()"},{"location":"python/python_gomulu_fonksiyonlar/#input","text":"Bu fonksiyonun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 gayet iyi biliyorsunuz. input() adl\u0131 bu g\u00f6m\u00fcl\u00fc fonksiyonu kullanarak kullan\u0131c\u0131 ile veri al\u0131\u015fveri\u015finde bulunabiliyoruz.","title":"input()"},{"location":"python/python_gomulu_fonksiyonlar/#format","text":"Bu g\u00f6m\u00fcl\u00fc fonksiyonun g\u00f6revi, daha \u00f6nce karakter dizilerini i\u015flerken, karakter dizilerinin bir metodu olarak \u00f6\u011frendi\u011fimiz format() metodununa benzer bir \u015fekilde, karakter dizilerini bi\u00e7imlendirmektir. Ancak format() fonksiyonu, daha \u00f6nce \u00f6\u011frendi\u011fimiz format() metoduna g\u00f6re daha dar kapsaml\u0131d\u0131r. format() metodunu kullanarak olduk\u00e7a karma\u015f\u0131k karakter dizisi bi\u00e7imlendirme i\u015flemlerini ger\u00e7ekle\u015ftirebiliriz, ama birazdan inceleyece\u011fimiz format() g\u00f6m\u00fcl\u00fc fonksiyonu yaln\u0131zca tek bir de\u011feri bi\u00e7imlendirmek i\u00e7in kullan\u0131l\u0131r. Basit bir \u00f6rnek verelim: format(12, '.2f') '12.00' Yukar\u0131daki ifadeyi daha \u00f6nce g\u00f6rd\u00fc\u011f\u00fcm\u00fcz format() metodu ile \u015fu \u015fekilde yazabiliriz: '{:.2f}'.format(12) '12.00'","title":"format()"},{"location":"python/python_gomulu_fonksiyonlar/#filter","text":"Bu g\u00f6m\u00fcl\u00fc fonksiyon yard\u0131m\u0131yla dizi niteli\u011fi ta\u015f\u0131yan nesneler i\u00e7indeki \u00f6\u011feler \u00fczerinde belirli bir \u00f6l\u00e7\u00fcte g\u00f6re bir s\u00fczme i\u015flemi uygulayabiliriz. filter() fonksiyonu toplam iki parametre al\u0131r. Bu parametrelerden ilki \u00f6l\u00e7\u00fct\u00fc belirleyen fonksiyon, ikincisi ise bu \u00f6l\u00e7\u00fct\u00fcn uygulanaca\u011f\u0131 \u00f6\u011fedir. Yukar\u0131daki \u00f6rne\u011fe bakt\u0131\u011f\u0131m\u0131zda, tek() adl\u0131 fonksiyonun, l adl\u0131 \u00f6\u011fe \u00fczerine uyguland\u0131\u011f\u0131n\u0131 g\u00f6r\u00fcyoruz. Yukar\u0131daki \u00f6rnekte ilk olarak tek() adl\u0131 bir fonksiyon tan\u0131mlad\u0131k: def tek(say\u0131): return say\u0131 % 2 == 1 Bu fonksiyonun g\u00f6revi, kendisine parametre olarak verilen bir say\u0131n\u0131n tek say\u0131 olup olmad\u0131\u011f\u0131n\u0131 sorgulamak. E\u011fer verilen parametre bir tek say\u0131 ise fonksiyonumuz True de\u011ferini, tek say\u0131 de\u011filse False de\u011ferini d\u00f6nd\u00fcrecektir. \u0130sterseniz fonksiyonumuzu test edelim: print(tek(12)) False 12 say\u0131s\u0131 bir tek say\u0131 olmad\u0131\u011f\u0131 i\u00e7in fonksiyonumuz bize False \u00e7\u0131kt\u0131s\u0131 verir. Bir de \u015funa bakal\u0131m: print(tek(117)) True 117 say\u0131s\u0131 ise bir tek say\u0131d\u0131r. Bu nedenle fonksiyonumuz bize True de\u011ferini verecektir. \u0130\u015fte biz bu fonksiyonu, filter() fonksiyonu yard\u0131m\u0131yla \u015fu liste \u00fczerine uygulayaca\u011f\u0131z: l = [400, 176, 64, 175, 355, 13, 207, 298, 397, 386, 31, 120, 120, 236, 241, 123, 249, 364, 292, 153] Dedi\u011fimiz gibi, filter() fonksiyonu, dizi \u00f6zelli\u011fi ta\u015f\u0131yan nesneler \u00fczerinde belli bir \u00f6l\u00e7\u00fcte g\u00f6re filtreleme i\u015flemi yapmam\u0131z\u0131 sa\u011flar. Biz de biraz \u00f6nce tan\u0131mlad\u0131\u011f\u0131m\u0131z tek() adl\u0131 fonksiyonu l adl\u0131 bu listeye uygulayarak liste i\u00e7indeki tek say\u0131lar\u0131 filtreleyece\u011fiz. filter() fonksiyonunu \u00e7al\u0131\u015ft\u0131ral\u0131m: filter(tek, l) <filter at 0x10e48d6d0> Burada filter() fonksiyonuna ilk parametre olarak tek() fonksiyonunu verdik. \u0130kinci parametremiz ise bu fonksiyonu uygulayaca\u011f\u0131m\u0131z l adl\u0131 liste. Amac\u0131m\u0131z, l adl\u0131 liste \u00fczerine tek() fonksiyonunu uygulayarak, bu liste i\u00e7indeki \u00f6\u011felerden True \u00e7\u0131kt\u0131s\u0131 verenleri (yani tek say\u0131lar\u0131) ay\u0131klamak. G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bu fonksiyonu bu \u015fekilde kulland\u0131\u011f\u0131m\u0131zda elde etti\u011fimiz \u015fey bir \u2018filtre nesnesi\u2019. Bu nesne i\u00e7indeki \u00f6\u011feleri g\u00f6rebilmek i\u00e7in ne yapabilece\u011fimizi biliyorsunuz: list(filter(tek, l)) [175, 355, 13, 207, 397, 31, 241, 123, 249, 153] veya: print(*filter(tek, l)) 175 355 13 207 397 31 241 123 249 153 ya da: [i for i in filter(tek, l)] [175, 355, 13, 207, 397, 31, 241, 123, 249, 153] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, ger\u00e7ekten de l adl\u0131 liste i\u00e7indeki b\u00fct\u00fcn tek say\u0131lar s\u00fcz\u00fcld\u00fc.","title":"filter()"},{"location":"python/python_gomulu_fonksiyonlar/#hash","text":"Bu fonksiyon, belirli t\u00fcrdeki nesnelere bir karma de\u011feri vermemizi sa\u011flar. \u00d6rne\u011fin: hash('python') -2102507435354808480 Ancak bu fonksiyonun \u00fcretti\u011fi \u00e7\u0131kt\u0131 ayn\u0131 nesne i\u00e7in b\u00fct\u00fcn sistemlerde ayn\u0131 olmayabilir. Yani \u00f6rne\u011fin yukar\u0131daki hash(\u2019istihza\u2019) komutu 32 bitlik ve 64 bitlik i\u015fletim sistemlerinde birbirinden farkl\u0131 sonu\u00e7lar verebilir. Ayr\u0131ca bu fonksiyonun \u00fcretti\u011fi karma de\u011ferlerinin birbiriyle \u00e7ak\u0131\u015fma ihtimali de y\u00fcksektir. Dolay\u0131s\u0131yla bu fonksiyonu kullanarak, mesela parola giri\u015fleri i\u00e7in karma de\u011feri \u00fcretmek do\u011fru olmaz.","title":"hash()"},{"location":"python/python_gomulu_fonksiyonlar/#isinstance","text":"Bu fonksiyonu \u015f\u00f6yle kullan\u0131yoruz: isinstance('python', str) True G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi \u2019python\u2019 ger\u00e7ekten bir karakter dizisi (str) oldu\u011fu i\u00e7in komutumuz True \u00e7\u0131kt\u0131s\u0131 veriyor. Bir de \u015funa bakal\u0131m: isinstance('python', list) False \u2019python\u2019 bir liste (list) olmad\u0131\u011f\u0131 i\u00e7in komutumuz bu kez False \u00e7\u0131kt\u0131s\u0131 verdi.","title":"isinstance()"},{"location":"python/python_gomulu_fonksiyonlar/#len","text":"Bu fonksiyon yard\u0131m\u0131yla nesnelerin uzunluklar\u0131n\u0131 hesaplayabilece\u011fimizi biliyorsunuz len('python') 6 len([1, 4, 5, 3, 2, 9, 10]) 7","title":"len()"},{"location":"python/python_gomulu_fonksiyonlar/#map","text":"Diyelim ki elimizde \u015f\u00f6yle bir liste var: l = [1, 4, 5, 4, 2, 9, 10] Amac\u0131m\u0131z bu liste i\u00e7indeki her \u00f6\u011fenin karesini hesaplamak. def karesi(n): return n ** 2 Burada bir n say\u0131s\u0131n\u0131n karesini hesaplayan bir fonksiyon tan\u0131mlad\u0131k. \u015eimdi bu fonksiyonu l listesinin b\u00fct\u00fcn \u00f6\u011feleri \u00fczerine uygulayaca\u011f\u0131z: list(map(karesi, l)) [1, 16, 25, 16, 4, 81, 100]","title":"map()"},{"location":"python/python_gomulu_fonksiyonlar/#max","text":"max() g\u00f6m\u00fcl\u00fc fonksiyonunun g\u00f6revi, bir dizi i\u00e7indeki en b\u00fcy\u00fck \u00f6\u011feyi vermektir. Bu fonksiyon birka\u00e7 farkl\u0131 parametre al\u0131r ve verdi\u011fi \u00e7\u0131kt\u0131, ald\u0131\u011f\u0131 parametrelerin t\u00fcr\u00fcne ve say\u0131s\u0131na ba\u011fl\u0131 olarak de\u011fi\u015fiklik g\u00f6sterebilir. Bu fonksiyonu en basit \u015fu \u015fekilde kullanabilirsiniz: max(1, 2, 3) 3 max() fonksiyonu yukar\u0131da g\u00f6sterildi\u011fi gibi birtak\u0131m isimsiz parametrelerle birlikte key adl\u0131 isimli bir parametre de al\u0131r. Bu parametre yard\u0131m\u0131yla max() fonksiyonunun \u2018en b\u00fcy\u00fck\u2019 kavram\u0131n\u0131 hangi \u00f6l\u00e7\u00fcte g\u00f6re se\u00e7ece\u011fini belirleyebiliriz. \u00d6rne\u011fin: isimler = ['ahmet', 'can', 'mehmet', 'selin', 'abdullah', 'kezban'] max(isimler, key=len) 'abdullah' max() fonksiyonu \u00f6ntan\u0131ml\u0131 olarak, \u2018en b\u00fcy\u00fck\u2019 kavram\u0131n\u0131 say\u0131sal b\u00fcy\u00fckl\u00fck \u00fczerinden de\u011ferlendirir. Yani herhangi bir key parametresi kullan\u0131lmad\u0131\u011f\u0131nda, bu fonksiyon otomatik olarak bir dizi i\u00e7indeki en b\u00fcy\u00fck say\u0131y\u0131 bulur. Ancak e\u011fer biz istersek, yukar\u0131daki \u00f6rnekte oldu\u011fu gibi, \u2018en b\u00fcy\u00fck\u2019 kavram\u0131n\u0131n uzunluk cinsinden de\u011ferlendirilmesini de sa\u011flayabiliriz.","title":"max()"},{"location":"python/python_gomulu_fonksiyonlar/#min","text":"min() fonksiyonu max() fonksiyonunun tam tersini yapar. Bildi\u011finiz gibi max() fonksiyonu bir dizi i\u00e7indeki en b\u00fcy\u00fck \u00f6\u011feyi buluyordu. \u0130\u015fte min() fonksiyonu da bir dizi i\u00e7indeki en k\u00fc\u00e7\u00fck \u00f6\u011feyi bulur. Bu fonksiyonun kullan\u0131m\u0131 max() ile ayn\u0131d\u0131r. min(-5,1,2,3,4,10) -5","title":"min()"},{"location":"python/python_gomulu_fonksiyonlar/#open","text":"Bu fonksiyon herhangi bir dosyay\u0131 a\u00e7mak veya olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. E\u011fer dosyan\u0131n a\u00e7\u0131lmas\u0131 veya olu\u015fturulmas\u0131 esnas\u0131nda bir hata ortaya \u00e7\u0131karsa IOError t\u00fcr\u00fcnde bir hata mesaj\u0131 verilir.","title":"open()"},{"location":"python/python_gomulu_fonksiyonlar/#pow","text":"Bu fonksiyon \u0130ngilizcedeki power (kuvvet) kelimesinin k\u0131saltmas\u0131ndan olu\u015fur. Ad\u0131n\u0131n anlam\u0131na uygun olarak, bu fonksiyonu bir say\u0131n\u0131n kuvvetlerini hesaplamak i\u00e7in kullan\u0131yoruz. Bu fonksiyon en temel \u015fekilde \u015f\u00f6yle kullan\u0131l\u0131r: pow(2, 3) 8 Bu komutla 2 say\u0131s\u0131n\u0131n 3. kuvvetini hesaplam\u0131\u015f oluyoruz. pow() fonksiyonu toplamda \u00fc\u00e7 farkl\u0131 parametre al\u0131r. \u0130lk iki parametrenin ne oldu\u011funu yukar\u0131da \u00f6rnekledik. \u00dc\u00e7\u00fcnc\u00fc parametre ise kuvvet hesaplamas\u0131 sonucu elde edilen say\u0131n\u0131n mod\u00fcl\u00fcs\u00fcn\u00fc hesaplayabilmemizi sa\u011flar. Yani: pow(2, 3, 2) 0 Burada yapt\u0131\u011f\u0131m\u0131z \u015fey \u015fu: \u00d6ncelikle 2 say\u0131s\u0131n\u0131n 3. kuvvetini hesaplad\u0131k. Elde etti\u011fimiz say\u0131 8. Ard\u0131ndan da bu say\u0131n\u0131n 2 \u2018ye b\u00f6l\u00fcnmesi i\u015fleminden kalan say\u0131y\u0131 elde ettik. Yani 0.","title":"pow()"},{"location":"python/python_gomulu_fonksiyonlar/#print","text":"Bu fonksiyonu, bildi\u011finiz gibi, kullan\u0131c\u0131lar\u0131m\u0131za birtak\u0131m mesajlar g\u00f6stermek i\u00e7in kullan\u0131yoruz. Kullan\u0131m\u0131n\u0131 daha \u00f6nce ayr\u0131nt\u0131l\u0131 bir \u015fekilde anlatm\u0131\u015f oldu\u011fumuz bu fonksiyonu \u015fu \u015fekilde form\u00fcle edebiliriz: print(deg1, deg2, deg3, ..., sep=' ', end='\\n', file=sys.stdout, flush=False) Burada; degx \u00c7\u0131kt\u0131 verilecek de\u011ferlerin ne oldu\u011funu belirtir. Buraya 256 adete kadar de\u011fer yazabilirsiniz. sep \u00c7\u0131kt\u0131 verilirken de\u011ferlerin aras\u0131na hangi karakterin yerle\u015ftirilece\u011fini belirtir. Bu de\u011fer \u00f6ntan\u0131ml\u0131 olarak bo\u015fluk karakteridir. end \u00c7\u0131kt\u0131 verilecek son de\u011ferin ard\u0131ndan hangi karakterin ili\u015ftirilece\u011fini belirtir. Bu de\u011fer \u00f6ntan\u0131ml\u0131 olarak sat\u0131r ba\u015f\u0131 (\\n ) karakteridir. file \u00c7\u0131kt\u0131lar\u0131n hangi dosyaya yaz\u0131laca\u011f\u0131n\u0131 belirtir. \u00d6ntan\u0131ml\u0131 olarak bu parametrenin de\u011feri sys.stdout\u2018tur. Yani print() fonksiyonu \u00e7\u0131kt\u0131lar\u0131n\u0131 \u00f6ntan\u0131ml\u0131 olarak standart \u00e7\u0131kt\u0131 konumuna g\u00f6nderir. flush Bildi\u011finiz gibi, herhangi bir dosyaya yazma i\u015flemi s\u0131ras\u0131nda dosyaya yaz\u0131lacak de\u011ferler \u00f6ncelikle tampona al\u0131n\u0131r. \u0130\u015flem tamamland\u0131ktan sonra tampondaki bu de\u011ferler topluca dosyaya aktar\u0131l\u0131r. \u0130\u015fte bu parametre, de\u011ferleri tampona almadan do\u011frudan dosyaya g\u00f6nderebilmemizi sa\u011flar. Bu parametrenin \u00f6ntan\u0131ml\u0131 de\u011feri False\u2018tur. Yani de\u011ferler dosyaya yaz\u0131lmadan \u00f6nce \u00f6ntan\u0131ml\u0131 olarak \u00f6ncelikle tampona gider. Ama e\u011fer biz bu parametrenin de\u011ferini True olarak de\u011fi\u015ftirirsek, de\u011ferler do\u011frudan dosyaya yaz\u0131l\u0131r.","title":"print()"},{"location":"python/python_gomulu_fonksiyonlar/#quit","text":"Bu fonksiyonu programdan \u00e7\u0131kmak i\u00e7in kullan\u0131yoruz. E\u011fer bu fonksiyonu etkile\u015fimli kabukta verecek olursan\u0131z etkile\u015fimli kabuk kapanacakt\u0131r.","title":"quit()"},{"location":"python/python_gomulu_fonksiyonlar/#range","text":"Bu fonksiyonu belli bir aral\u0131ktaki say\u0131lar\u0131 listelemek i\u00e7in kullan\u0131yoruz. Yani mesela 0 ile 10 aras\u0131 say\u0131lar\u0131n listesini almak istersek \u015f\u00f6yle bir komut yazabiliriz: l = range(0, 10) Ancak burada dikkat etmemiz gereken bir \u00f6zellik var: Bu fonksiyon asl\u0131nda do\u011frudan herhangi bir say\u0131 listesi olu\u015fturmaz. Yukar\u0131da l de\u011fi\u015fkenine atad\u0131\u011f\u0131m\u0131z komutu ekrana yazd\u0131r\u0131rsak bunu daha net g\u00f6rebilirsiniz: print(l) range(0, 10) Bir de bu verinin tipine bakal\u0131m: type(l) range G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, elimizdeki \u015fey asl\u0131nda bir say\u0131 listesi de\u011fil, bir \u2018range\u2019 (aral\u0131k) nesnesidir. Biz bu nesneyi istersek ba\u015fka veri tiplerine d\u00f6n\u00fc\u015ft\u00fcrebiliriz. Mesela bunu bir listeye d\u00f6n\u00fc\u015ft\u00fcrelim: list(l) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","title":"range()"},{"location":"python/python_gomulu_fonksiyonlar/#reversed","text":"Bir listedeki isimleri ters \u00e7evirmek i\u00e7in kullan\u0131l\u0131r. isimler = ['ahmet', 'mehmet', 'veli', 'ay\u015fe', '\u00e7i\u011fdem', '\u0131\u015f\u0131k'] reversed(isimler) <list_reverseiterator at 0x10e4819d0> G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, t\u0131pk\u0131 range() fonksiyonunda oldu\u011fu gibi, reversed() fonksiyonu da bize \u00fcretti\u011fi \u00f6\u011felerin kendisi yerine, bir \u2018nesne\u2019 veriyor. Ama tabii ki bu bizim i\u00e7in bir sorun de\u011fil. Biz bu nesnenin i\u00e7eri\u011fini nas\u0131l elde edebilece\u011fimizi gayet iyi biliyoruz: list(reversed(isimler)) ['\u0131\u015f\u0131k', '\u00e7i\u011fdem', 'ay\u015fe', 'veli', 'mehmet', 'ahmet']","title":"reversed()"},{"location":"python/python_gomulu_fonksiyonlar/#sorted","text":"Bu metot, daha \u00f6nceki derslerimizden de bildi\u011finiz gibi, bir dizi i\u00e7indeki \u00f6\u011feleri belirli bir \u00f6l\u00e7\u00fcte g\u00f6re s\u0131raya dizmemizi sa\u011fl\u0131yor. Bununla ilgili \u00e7ok basit bir \u00f6rnek verelim: sorted('ahmet') ['a', 'e', 'h', 'm', 't'] Bu kodlar yard\u0131m\u0131yla ahmet adl\u0131 karakter dizisi i\u00e7indeki harfleri alfabe s\u0131ras\u0131na dizdik. sorted() fonksiyonuna hangi t\u00fcrde bir veri tipi verirseniz verin, ald\u0131\u011f\u0131n\u0131z \u00e7\u0131kt\u0131 her zaman bir liste olacakt\u0131r. Bunu unutmay\u0131n. Bu fonksiyon, T\u00fcrk\u00e7e karakter i\u00e7eren \u00f6\u011feleri d\u00fczg\u00fcn s\u0131ralayamaz.","title":"sorted()"},{"location":"python/python_gomulu_fonksiyonlar/#slice","text":"Bildi\u011finiz gibi, birtak\u0131m \u00f6\u011felerden olu\u015fan bir nesnenin yaln\u0131zca belli k\u0131s\u0131mlar\u0131n\u0131 ay\u0131r\u0131p alma i\u015flemine \u2018dilimleme\u2019 ad\u0131 veriliyor. Bu fonksiyon dilimleme yapabilmemiz sa\u011flar. l = ['ahmet', 'mehmet', 'ay\u015fe', 'senem', 'salih'] dl = slice(0, 3) l[dl] ['ahmet', 'mehmet', 'ay\u015fe'] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, slice() fonksiyonunu yukar\u0131da iki parametre ile kulland\u0131k. Tahmin edebilece\u011finiz gibi, bu fonksiyonunu form\u00fcl\u00fc \u015fu \u015fekildedir: slice(ba\u015flang\u0131\u00e7, biti\u015f, atlama)","title":"slice()"},{"location":"python/python_gomulu_fonksiyonlar/#sum","text":"Bu fonksiyonun temel g\u00f6revi, bir dizi i\u00e7indeki de\u011ferlerin toplam\u0131n\u0131 bulmakt\u0131r. \u00d6rne\u011fin: l = [1, 2, 3] sum(l) 6 Bu fonksiyon genellikle yukar\u0131daki gibi tek parametreyle kullan\u0131l\u0131r. Ama asl\u0131nda bu fonksiyon ikinci bir parametre daha al\u0131r. Dikkatlice bak\u0131n: l = [1, 2, 3] sum(l, 10) 16 G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, Python sum() fonksiyonuna verilen ikinci parametreyi, birinci parametredeki toplam de\u011ferin \u00fczerine ekliyor.","title":"sum()"},{"location":"python/python_gomulu_fonksiyonlar/#type","text":"type() fonksiyonunun g\u00f6revi bir nesnenin hangi veri tipine ait oldu\u011funu s\u00f6ylemektir. Bu fonksiyonu art\u0131k yak\u0131ndan tan\u0131yorsunuz: type('kiraz') str","title":"type()"},{"location":"python/python_gomulu_fonksiyonlar/#zip","text":"Gelin isterseniz bu fonksiyonu bir \u00f6rnek \u00fczerinden a\u00e7\u0131klamaya \u00e7al\u0131\u015fal\u0131m. Diyelim ki elimizde \u015f\u00f6yle iki farkl\u0131 liste var: a1 = ['a', 'b', 'c'] a2 = ['d', 'e', 'f'] E\u011fer bu listelerin \u00f6\u011felerini birbirleriyle e\u015fle\u015ftirmek istersek zip() fonksiyonundan yararlanabiliriz. Dikkatlice bak\u0131n: zip(a1, a2) <zip at 0x10e492500> G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, yukar\u0131daki kod bize bir \u2018zip\u2019 nesnesi veriyor. Bu nesnenin \u00f6\u011felerine nas\u0131l ula\u015fabilece\u011finizi biliyorsunuz: print(*zip(a1, a2)) ('a', 'd') ('b', 'e') ('c', 'f') list(zip(a1, a2)) [('a', 'd'), ('b', 'e'), ('c', 'f')] Bu \u00f6zellikten pek \u00e7ok farkl\u0131 \u015fekilde yararlanabilirsiniz. \u00d6rne\u011fin: isimler = ['ahmet', 'mehmet', 'zeynep', 'ilker'] yaslar = [25, 40, 35, 20] for i, y in zip(isimler, yaslar): print('isim: {} / ya\u015f: {}'.format(i, y)) isim: ahmet / ya\u015f: 25 isim: mehmet / ya\u015f: 40 isim: zeynep / ya\u015f: 35 isim: ilker / ya\u015f: 20","title":"zip()"},{"location":"python/python_gomulu_fonksiyonlar/#vars","text":"Bu fonksiyon, mevcut isim alan\u0131 i\u00e7indeki metot, fonksiyon ve nitelikleri listeler. E\u011fer bu fonksiyonu parametresiz olarak kullan\u0131rsak, daha \u00f6nce g\u00f6rd\u00fc\u011f\u00fcm\u00fcz locals() fonksiyonuyla ayn\u0131 \u00e7\u0131kt\u0131y\u0131 elde ederiz: # vars() #uzun \u00e7\u0131kt\u0131lar verdi\u011fi i\u00e7in \u00e7al\u0131\u015ft\u0131r\u0131lmam\u0131\u015ft\u0131r, sizler test etmek i\u00e7in \u00e7al\u0131\u015ft\u0131rabilirsiniz. {'__builtins__': <module 'builtins' (built-in)>, '__name__': '__main__', '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__doc__': None} Bu fonksiyonu, nesnelerin metotlar\u0131n\u0131 ve niteliklerini \u00f6\u011frenmek i\u00e7in de kullanabilirsiniz: # vars(str) Yukar\u0131da s\u0131ras\u0131yla karakter dizilerinin, listelerin ve s\u00f6zl\u00fcklerin metotlar\u0131n\u0131 listeledik. Bu y\u00f6n\u00fcyle vars() fonksiyonu dir() fonksiyonuna benzer. Son G\u00fcncelleme: 26 Aral\u0131k 2019 - Per\u015fembe","title":"vars()"},{"location":"python/python_hata_yakalama/","text":"Hata Yakalama Geli\u015ftirdi\u011fimiz programlarda kullan\u0131c\u0131 bazen istenilenin d\u0131\u015f\u0131nda bilgiler girebilir. B\u00f6yle durumlarda hatalar ile kar\u015f\u0131la\u015facakt\u0131r. Bu hatalarda kullan\u0131c\u0131n\u0131n anlayamaca\u011f\u0131n\u0131 \u015fekilde karma\u015f\u0131k \u00e7\u0131kt\u0131lar verebilir. B\u00f6yle olunca bu hatalar ya\u015fanabilece\u011fin i\u00e7in hatalar\u0131 kullan\u0131c\u0131n\u0131n anlayabilece\u011fi ve nerede hata yapt\u0131\u011f\u0131n\u0131 ona a\u00e7\u0131k bir \u015fekilde belirten bir yap\u0131 olu\u015fturmam\u0131z gerekmektedir. Bu k\u0131s\u0131mda bu durumu ayr\u0131nt\u0131l\u0131 bir \u015fekilde inleceyece\u011fiz. Hata T\u00fcrleri Hatalar\u0131 \u00fc\u00e7 farkl\u0131 ba\u015fl\u0131k alt\u0131nda inceleye\u011fiz: Programc\u0131 Hatalar\u0131(Error) Program Kusular\u0131(Bug) \u0130stisnalar(Exception) Programc\u0131 Hatalar\u0131(Error) Ba\u015fl\u0131ktanda anla\u015f\u0131laca\u011f\u0131 \u00fczere programc\u0131n\u0131n yapm\u0131\u015f oldu\u011fu hatalard\u0131r. Bunlar yaz\u0131m hatalar\u0131 ve tan\u0131mlama hatalar\u0131 gibi hatalardan olu\u015furlar. Bir \u00f6rnek ile inceleyelim: print \"Merhaba D\u00fcnya\" File \"<ipython-input-1-267fc15c875c>\", line 1 print \"Merhaba D\u00fcnya\" ^ SyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Merhaba D\u00fcnya\")? Yukar\u0131daki \u00f6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere print fonksiyonu i\u00e7in parantezleri yazmad\u0131\u011f\u0131m\u0131z i\u00e7in hata olu\u015ftu. Bu t\u00fcr hatalar programc\u0131 hatalar\u0131d\u0131r. Program Kusurlar\u0131(Bug) Program kusurlar\u0131 \u00e7o\u011fu zaman hata vermeden \u00e7al\u0131\u015f\u0131r fakat \u00fcretti\u011fi sonu\u00e7lar istedi\u011fimiz gibi de\u011fildir. \u00d6rnek vermek gerekirse form\u00fcl gerektiren bir programda e\u011fer form\u00fcl\u00fc yanl\u0131\u015f yazm\u0131\u015fsan\u0131z program \u00e7al\u0131\u015f\u0131r yaln\u0131z sonu\u00e7 hatal\u0131 olur. Bu durumu bir \u00f6rnek ile inceleyelim. sayi1 = input(\"Toplama i\u015flemi i\u00e7in ilk say\u0131y\u0131 girin: \") sayi2 = input(\"Toplama i\u015flemi i\u00e7in ikinci say\u0131y\u0131 girin: \") print(sayi1, \"+\", sayi2, \"=\", sayi1 + sayi2) Toplama i\u015flemi i\u00e7in ilk say\u0131y\u0131 girin: 1 Toplama i\u015flemi i\u00e7in ikinci say\u0131y\u0131 girin: 2 1 + 2 = 12 Yukar\u0131daki \u00f6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere program iki say\u0131y\u0131 toplamak yerine onlar\u0131 yan yana yazd\u0131rmaktad\u0131r. Biz kullan\u0131c\u0131dan say\u0131lar\u0131 al\u0131rken int t\u00fcr\u00fcne d\u00f6n\u00fc\u015f\u00fcmlerini sa\u011flamad\u0131\u011f\u0131m\u0131z i\u00e7in hata olu\u015ftu. \u0130stisnalar(Exception) \u0130stisnalar, bir program\u0131n \u00e7al\u0131\u015fmas\u0131 s\u0131ras\u0131nda ortaya \u00e7\u0131kan, normalden farkl\u0131, istisnai durumlard\u0131r. Matematiksel bir i\u015flem yap\u0131lmas\u0131 gereken bir yerde kullan\u0131c\u0131 e\u011fer harfsel bir veri girerse hataya sebep olur. Bu durumu inceleyelim: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: a --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-3-5310f8e3b775> in <module> 1 sayi1 = int(input(\"Bir say\u0131 giriniz: \")) ----> 2 sayi2 = int(input(\"Bir say\u0131 giriniz: \")) 3 4 print(\"Sonu\u00e7: \",sayi1 / sayi2) ValueError: invalid literal for int() with base 10: 'a' \u00d6rnektede g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi kullan\u0131c\u0131 say\u0131sal bir veri girmesi gerekirken harfsel bir veri girdi\u011fi i\u00e7in programda hata olu\u015ftu. Bir ba\u015fka \u00f6rnekte matematikte bulunan istisnai durumlar. Say\u0131lar\u0131n 0'a b\u00f6l\u00fcnme durumu bir hatad\u0131r. Bu durumu inceleyelim. sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) <ipython-input-4-5310f8e3b775> in <module> 2 sayi2 = int(input(\"Bir say\u0131 giriniz: \")) 3 ----> 4 print(\"Sonu\u00e7: \",sayi1 / sayi2) ZeroDivisionError: division by zero Program hata olarak division by zero yani s\u0131f\u0131ra b\u00f6l\u00fcnme hatas\u0131 verdi. Bu gibi durumlar\u0131 yakalay\u0131p program\u0131m\u0131z\u0131 bu t\u00fcr hatalardan temizlememiz gerekmektedir. \u015eimdide bunlar\u0131 nas\u0131l yapabilece\u011fimizi g\u00f6relim. try..... except..... Hata T\u00fcrleri k\u0131sm\u0131nda hatalar\u0131n neler oldu\u011fundan bahsettik. Bu b\u00f6l\u00fcmde bu hatalar\u0131n nas\u0131l yakalanaca\u011f\u0131n\u0131 inceleyece\u011fiz. Yukar\u0131da hata ile kar\u015f\u0131la\u015ft\u0131\u011f\u0131m\u0131z programlar\u0131 tek tek d\u00fczeltelim. try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ValueError: print(\"L\u00fctfen sadece say\u0131 giriniz!\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: a L\u00fctfen sadece say\u0131 giriniz! Yukar\u0131da \u00e7\u00f6zd\u00fc\u011f\u00fcm kod par\u00e7as\u0131n\u0131 inceleyelim. try: Bu blo\u011fa hata olmas\u0131 beklenen kodlar\u0131 yazmam\u0131z gerekmektedir. except Hata_adi: Bu blo\u011fa kullan\u0131c\u0131ya g\u00f6sterilmesini istedi\u011fimiz mesaj\u0131 yaz\u0131yoruz. \u015eimdide s\u0131f\u0131ra b\u00f6l\u00fcnme hatas\u0131 durumunu \u00e7\u00f6zelim. try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez. Peki hem s\u0131f\u0131ra b\u00f6l\u00fcnme hatas\u0131 ya\u015fanabilecek hem de de\u011fer hatas\u0131 olabilmesi durumunda ne yapmam\u0131z gerekiyor. Bu durumu iki farkl\u0131 yol ile \u00e7\u00f6zebiliriz: 1. Yol try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") except ValueError: print(\"L\u00fctfen sadece say\u0131 giriniz.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez. 2. Yol try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except (ZeroDivisionError, ValueError): print(\"Bir hata ile kar\u015f\u0131la\u015f\u0131ld\u0131.\") Bir say\u0131 giriniz: a Bir hata ile kar\u015f\u0131la\u015f\u0131ld\u0131. try..... except..... as..... Bu yap\u0131da hatan\u0131n ad\u0131n\u0131 de\u011filde hatan\u0131n tam olarak ne oldu\u011funu hataya dair a\u00e7\u0131klamay\u0131 \u00f6\u011frenebiliyoruz. \u00d6rnek \u00fczerine inceleyelim: try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ValueError as hata: print(hata) Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: a invalid literal for int() with base 10: 'a' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi hatan\u0131n ad\u0131n\u0131 de\u011filde direk hatan\u0131n tam olarak ne oldu\u011funu a\u00e7\u0131klamas\u0131n\u0131 ekranda g\u00f6sterdik. try..... except..... else..... Yazd\u0131\u011f\u0131m\u0131 programlarda bir\u00e7ok farkl\u0131 hata ile kar\u015f\u0131la\u015fabiliriz. Hatalar\u0131 farkl\u0131 bir \u015fekilde kar\u015f\u0131lay\u0131p farkl\u0131 kullan\u0131c\u0131 mesajlar\u0131 vermek isteyebiliriz. Bu durum genelde pek tavsiye edilmez \u00e7\u00fcnk\u00fc kodumuz \u00e7ok par\u00e7al\u0131 olaca\u011f\u0131ndan dolay\u0131. Fakat biz yinede bu durumuda inceleyelim: try: b\u00f6l\u00fcnen = int(input(\"b\u00f6l\u00fcnecek say\u0131: \")) b\u00f6len = int(input(\"b\u00f6len say\u0131: \")) except ValueError: print(\"L\u00fctfen sadece say\u0131 girin!\") else: try: print(b\u00f6l\u00fcnen/b\u00f6len) except ZeroDivisionError: print(\"Bir say\u0131y\u0131 0'a b\u00f6lemezsiniz!\") b\u00f6l\u00fcnecek say\u0131: 1 b\u00f6len say\u0131: 0 Bir say\u0131y\u0131 0'a b\u00f6lemezsiniz! Yukar\u0131daki kod blo\u011fundanda anla\u015f\u0131ld\u0131\u011f\u0131 \u00fczere s\u0131f\u0131ra b\u00f6l\u00fcnme durumunu farkl\u0131 bir alanda yakalay\u0131p kontrol ediyor ve buna uygun bir mesaj veriyoruz kullan\u0131c\u0131ya. Bu durumu kullan\u0131c\u0131 a\u00e7\u0131s\u0131ndan d\u00fc\u015f\u00fcnd\u00fc\u011f\u00fcm\u00fcz zaman g\u00fczel bir \u015fey fakat hatalar birka\u00e7 tane olmad\u0131\u011f\u0131 i\u00e7in b\u00f6yle bir \u015fey yapmam\u0131z kodumuzun \u00e7ok par\u00e7al\u0131 olmas\u0131na ve \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z proje b\u00fcy\u00fcd\u00fck\u00e7e kontrol zorla\u015faca\u011f\u0131 i\u00e7in bu durumu pek tavsiye edilmez. try..... except..... finally..... Bu kod yap\u0131s\u0131nda hata olsun veya olmas\u0131n her daim finally blo\u011fu \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r. Bir \u00f6rnek \u00fczerinden inceleyelim: try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") finally: print(\"Finally her zaman \u00e7al\u0131\u015f\u0131r.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez. Finally her zaman \u00e7al\u0131\u015f\u0131r. raise Bazen yazd\u0131\u011f\u0131m\u0131z programlarda hata olu\u015fmayacak olsa bile biz bu t\u00fcr durumlarda bir hata mesaj\u0131 g\u00f6stermek isteyebiliriz. Bir \u00f6rnek ile inceleyelim: b\u00f6l\u00fcnen = int(input(\"b\u00f6l\u00fcnecek say\u0131: \")) if b\u00f6l\u00fcnen == 5: raise Exception(\"5 say\u0131s\u0131n\u0131 kullanamazs\u0131n\u0131z.\") b\u00f6len = int(input(\"b\u00f6len say\u0131: \")) print(b\u00f6l\u00fcnen/b\u00f6len) b\u00f6l\u00fcnecek say\u0131: 5 --------------------------------------------------------------------------- Exception Traceback (most recent call last) <ipython-input-14-d3500b3eb850> in <module> 1 b\u00f6l\u00fcnen = int(input(\"b\u00f6l\u00fcnecek say\u0131: \")) 2 if b\u00f6l\u00fcnen == 5: ----> 3 raise Exception(\"5 say\u0131s\u0131n\u0131 kullanamazs\u0131n\u0131z.\") 4 5 b\u00f6len = int(input(\"b\u00f6len say\u0131: \")) Exception: 5 say\u0131s\u0131n\u0131 kullanamazs\u0131n\u0131z. Burada raise kelimesinden sonra bulunan Exception anahtar kelimesinin yerine istedi\u011fimizi yazamay\u0131z. Onun yerine sadece Python i\u00e7inde bulunan hata belirten anahtar kelimelerini kullanabiliriz. Bu kelimelere \u00f6rnek vermek gerekirse NameError, TypeError, ZeroDivisionError, vb... B\u00fct\u00fcn Hatalar\u0131 Yakalamak Geli\u015ftirdi\u011fimiz programda bekledi\u011fimiz hatalar\u0131n d\u0131\u015f\u0131nda beklemedi\u011fimiz hatalar ile de kar\u015f\u0131la\u015fabiliriz. Bu durumu \u00f6nlemek i\u00e7in bekledi\u011fimiz hatalar\u0131n d\u0131\u015f\u0131ndan bulunan b\u00fct\u00fcn hatalar\u0131da yakalamam\u0131z gerekmektedir. Bir \u00f6rnek ile inceleyelim: try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") except ValueError: print(\"L\u00fctfen sadece say\u0131 giriniz.\") except: print(\"Bir hata ile kar\u015f\u0131la\u015f\u0131ld\u0131.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 2 Sonu\u00e7: 0.5 Di\u011fer Hatalar Python i\u00e7erisinde bulunan di\u011fer hatalar\u0131n neler oldu\u011funu \u00f6\u011frenmek isterseniz e\u011fer buradan \u00f6\u011frenebilirsiniz. Son G\u00fcncelleme: 17 Aral\u0131k 2019","title":"Hata Yakalama"},{"location":"python/python_hata_yakalama/#hata-yakalama","text":"Geli\u015ftirdi\u011fimiz programlarda kullan\u0131c\u0131 bazen istenilenin d\u0131\u015f\u0131nda bilgiler girebilir. B\u00f6yle durumlarda hatalar ile kar\u015f\u0131la\u015facakt\u0131r. Bu hatalarda kullan\u0131c\u0131n\u0131n anlayamaca\u011f\u0131n\u0131 \u015fekilde karma\u015f\u0131k \u00e7\u0131kt\u0131lar verebilir. B\u00f6yle olunca bu hatalar ya\u015fanabilece\u011fin i\u00e7in hatalar\u0131 kullan\u0131c\u0131n\u0131n anlayabilece\u011fi ve nerede hata yapt\u0131\u011f\u0131n\u0131 ona a\u00e7\u0131k bir \u015fekilde belirten bir yap\u0131 olu\u015fturmam\u0131z gerekmektedir. Bu k\u0131s\u0131mda bu durumu ayr\u0131nt\u0131l\u0131 bir \u015fekilde inleceyece\u011fiz.","title":"Hata Yakalama"},{"location":"python/python_hata_yakalama/#hata-turleri","text":"Hatalar\u0131 \u00fc\u00e7 farkl\u0131 ba\u015fl\u0131k alt\u0131nda inceleye\u011fiz: Programc\u0131 Hatalar\u0131(Error) Program Kusular\u0131(Bug) \u0130stisnalar(Exception)","title":"Hata T\u00fcrleri"},{"location":"python/python_hata_yakalama/#programc-hatalarerror","text":"Ba\u015fl\u0131ktanda anla\u015f\u0131laca\u011f\u0131 \u00fczere programc\u0131n\u0131n yapm\u0131\u015f oldu\u011fu hatalard\u0131r. Bunlar yaz\u0131m hatalar\u0131 ve tan\u0131mlama hatalar\u0131 gibi hatalardan olu\u015furlar. Bir \u00f6rnek ile inceleyelim: print \"Merhaba D\u00fcnya\" File \"<ipython-input-1-267fc15c875c>\", line 1 print \"Merhaba D\u00fcnya\" ^ SyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Merhaba D\u00fcnya\")? Yukar\u0131daki \u00f6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere print fonksiyonu i\u00e7in parantezleri yazmad\u0131\u011f\u0131m\u0131z i\u00e7in hata olu\u015ftu. Bu t\u00fcr hatalar programc\u0131 hatalar\u0131d\u0131r.","title":"Programc\u0131 Hatalar\u0131(Error)"},{"location":"python/python_hata_yakalama/#program-kusurlarbug","text":"Program kusurlar\u0131 \u00e7o\u011fu zaman hata vermeden \u00e7al\u0131\u015f\u0131r fakat \u00fcretti\u011fi sonu\u00e7lar istedi\u011fimiz gibi de\u011fildir. \u00d6rnek vermek gerekirse form\u00fcl gerektiren bir programda e\u011fer form\u00fcl\u00fc yanl\u0131\u015f yazm\u0131\u015fsan\u0131z program \u00e7al\u0131\u015f\u0131r yaln\u0131z sonu\u00e7 hatal\u0131 olur. Bu durumu bir \u00f6rnek ile inceleyelim. sayi1 = input(\"Toplama i\u015flemi i\u00e7in ilk say\u0131y\u0131 girin: \") sayi2 = input(\"Toplama i\u015flemi i\u00e7in ikinci say\u0131y\u0131 girin: \") print(sayi1, \"+\", sayi2, \"=\", sayi1 + sayi2) Toplama i\u015flemi i\u00e7in ilk say\u0131y\u0131 girin: 1 Toplama i\u015flemi i\u00e7in ikinci say\u0131y\u0131 girin: 2 1 + 2 = 12 Yukar\u0131daki \u00f6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere program iki say\u0131y\u0131 toplamak yerine onlar\u0131 yan yana yazd\u0131rmaktad\u0131r. Biz kullan\u0131c\u0131dan say\u0131lar\u0131 al\u0131rken int t\u00fcr\u00fcne d\u00f6n\u00fc\u015f\u00fcmlerini sa\u011flamad\u0131\u011f\u0131m\u0131z i\u00e7in hata olu\u015ftu.","title":"Program Kusurlar\u0131(Bug)"},{"location":"python/python_hata_yakalama/#istisnalarexception","text":"\u0130stisnalar, bir program\u0131n \u00e7al\u0131\u015fmas\u0131 s\u0131ras\u0131nda ortaya \u00e7\u0131kan, normalden farkl\u0131, istisnai durumlard\u0131r. Matematiksel bir i\u015flem yap\u0131lmas\u0131 gereken bir yerde kullan\u0131c\u0131 e\u011fer harfsel bir veri girerse hataya sebep olur. Bu durumu inceleyelim: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: a --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-3-5310f8e3b775> in <module> 1 sayi1 = int(input(\"Bir say\u0131 giriniz: \")) ----> 2 sayi2 = int(input(\"Bir say\u0131 giriniz: \")) 3 4 print(\"Sonu\u00e7: \",sayi1 / sayi2) ValueError: invalid literal for int() with base 10: 'a' \u00d6rnektede g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi kullan\u0131c\u0131 say\u0131sal bir veri girmesi gerekirken harfsel bir veri girdi\u011fi i\u00e7in programda hata olu\u015ftu. Bir ba\u015fka \u00f6rnekte matematikte bulunan istisnai durumlar. Say\u0131lar\u0131n 0'a b\u00f6l\u00fcnme durumu bir hatad\u0131r. Bu durumu inceleyelim. sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) <ipython-input-4-5310f8e3b775> in <module> 2 sayi2 = int(input(\"Bir say\u0131 giriniz: \")) 3 ----> 4 print(\"Sonu\u00e7: \",sayi1 / sayi2) ZeroDivisionError: division by zero Program hata olarak division by zero yani s\u0131f\u0131ra b\u00f6l\u00fcnme hatas\u0131 verdi. Bu gibi durumlar\u0131 yakalay\u0131p program\u0131m\u0131z\u0131 bu t\u00fcr hatalardan temizlememiz gerekmektedir. \u015eimdide bunlar\u0131 nas\u0131l yapabilece\u011fimizi g\u00f6relim.","title":"\u0130stisnalar(Exception)"},{"location":"python/python_hata_yakalama/#try-except","text":"Hata T\u00fcrleri k\u0131sm\u0131nda hatalar\u0131n neler oldu\u011fundan bahsettik. Bu b\u00f6l\u00fcmde bu hatalar\u0131n nas\u0131l yakalanaca\u011f\u0131n\u0131 inceleyece\u011fiz. Yukar\u0131da hata ile kar\u015f\u0131la\u015ft\u0131\u011f\u0131m\u0131z programlar\u0131 tek tek d\u00fczeltelim. try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ValueError: print(\"L\u00fctfen sadece say\u0131 giriniz!\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: a L\u00fctfen sadece say\u0131 giriniz! Yukar\u0131da \u00e7\u00f6zd\u00fc\u011f\u00fcm kod par\u00e7as\u0131n\u0131 inceleyelim. try: Bu blo\u011fa hata olmas\u0131 beklenen kodlar\u0131 yazmam\u0131z gerekmektedir. except Hata_adi: Bu blo\u011fa kullan\u0131c\u0131ya g\u00f6sterilmesini istedi\u011fimiz mesaj\u0131 yaz\u0131yoruz. \u015eimdide s\u0131f\u0131ra b\u00f6l\u00fcnme hatas\u0131 durumunu \u00e7\u00f6zelim. try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez. Peki hem s\u0131f\u0131ra b\u00f6l\u00fcnme hatas\u0131 ya\u015fanabilecek hem de de\u011fer hatas\u0131 olabilmesi durumunda ne yapmam\u0131z gerekiyor. Bu durumu iki farkl\u0131 yol ile \u00e7\u00f6zebiliriz: 1. Yol try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") except ValueError: print(\"L\u00fctfen sadece say\u0131 giriniz.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez. 2. Yol try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except (ZeroDivisionError, ValueError): print(\"Bir hata ile kar\u015f\u0131la\u015f\u0131ld\u0131.\") Bir say\u0131 giriniz: a Bir hata ile kar\u015f\u0131la\u015f\u0131ld\u0131.","title":"try..... except....."},{"location":"python/python_hata_yakalama/#try-except-as","text":"Bu yap\u0131da hatan\u0131n ad\u0131n\u0131 de\u011filde hatan\u0131n tam olarak ne oldu\u011funu hataya dair a\u00e7\u0131klamay\u0131 \u00f6\u011frenebiliyoruz. \u00d6rnek \u00fczerine inceleyelim: try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ValueError as hata: print(hata) Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: a invalid literal for int() with base 10: 'a' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi hatan\u0131n ad\u0131n\u0131 de\u011filde direk hatan\u0131n tam olarak ne oldu\u011funu a\u00e7\u0131klamas\u0131n\u0131 ekranda g\u00f6sterdik.","title":"try..... except..... as....."},{"location":"python/python_hata_yakalama/#try-except-else","text":"Yazd\u0131\u011f\u0131m\u0131 programlarda bir\u00e7ok farkl\u0131 hata ile kar\u015f\u0131la\u015fabiliriz. Hatalar\u0131 farkl\u0131 bir \u015fekilde kar\u015f\u0131lay\u0131p farkl\u0131 kullan\u0131c\u0131 mesajlar\u0131 vermek isteyebiliriz. Bu durum genelde pek tavsiye edilmez \u00e7\u00fcnk\u00fc kodumuz \u00e7ok par\u00e7al\u0131 olaca\u011f\u0131ndan dolay\u0131. Fakat biz yinede bu durumuda inceleyelim: try: b\u00f6l\u00fcnen = int(input(\"b\u00f6l\u00fcnecek say\u0131: \")) b\u00f6len = int(input(\"b\u00f6len say\u0131: \")) except ValueError: print(\"L\u00fctfen sadece say\u0131 girin!\") else: try: print(b\u00f6l\u00fcnen/b\u00f6len) except ZeroDivisionError: print(\"Bir say\u0131y\u0131 0'a b\u00f6lemezsiniz!\") b\u00f6l\u00fcnecek say\u0131: 1 b\u00f6len say\u0131: 0 Bir say\u0131y\u0131 0'a b\u00f6lemezsiniz! Yukar\u0131daki kod blo\u011fundanda anla\u015f\u0131ld\u0131\u011f\u0131 \u00fczere s\u0131f\u0131ra b\u00f6l\u00fcnme durumunu farkl\u0131 bir alanda yakalay\u0131p kontrol ediyor ve buna uygun bir mesaj veriyoruz kullan\u0131c\u0131ya. Bu durumu kullan\u0131c\u0131 a\u00e7\u0131s\u0131ndan d\u00fc\u015f\u00fcnd\u00fc\u011f\u00fcm\u00fcz zaman g\u00fczel bir \u015fey fakat hatalar birka\u00e7 tane olmad\u0131\u011f\u0131 i\u00e7in b\u00f6yle bir \u015fey yapmam\u0131z kodumuzun \u00e7ok par\u00e7al\u0131 olmas\u0131na ve \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z proje b\u00fcy\u00fcd\u00fck\u00e7e kontrol zorla\u015faca\u011f\u0131 i\u00e7in bu durumu pek tavsiye edilmez.","title":"try..... except..... else....."},{"location":"python/python_hata_yakalama/#try-except-finally","text":"Bu kod yap\u0131s\u0131nda hata olsun veya olmas\u0131n her daim finally blo\u011fu \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r. Bir \u00f6rnek \u00fczerinden inceleyelim: try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") finally: print(\"Finally her zaman \u00e7al\u0131\u015f\u0131r.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 0 Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez. Finally her zaman \u00e7al\u0131\u015f\u0131r.","title":"try..... except..... finally....."},{"location":"python/python_hata_yakalama/#raise","text":"Bazen yazd\u0131\u011f\u0131m\u0131z programlarda hata olu\u015fmayacak olsa bile biz bu t\u00fcr durumlarda bir hata mesaj\u0131 g\u00f6stermek isteyebiliriz. Bir \u00f6rnek ile inceleyelim: b\u00f6l\u00fcnen = int(input(\"b\u00f6l\u00fcnecek say\u0131: \")) if b\u00f6l\u00fcnen == 5: raise Exception(\"5 say\u0131s\u0131n\u0131 kullanamazs\u0131n\u0131z.\") b\u00f6len = int(input(\"b\u00f6len say\u0131: \")) print(b\u00f6l\u00fcnen/b\u00f6len) b\u00f6l\u00fcnecek say\u0131: 5 --------------------------------------------------------------------------- Exception Traceback (most recent call last) <ipython-input-14-d3500b3eb850> in <module> 1 b\u00f6l\u00fcnen = int(input(\"b\u00f6l\u00fcnecek say\u0131: \")) 2 if b\u00f6l\u00fcnen == 5: ----> 3 raise Exception(\"5 say\u0131s\u0131n\u0131 kullanamazs\u0131n\u0131z.\") 4 5 b\u00f6len = int(input(\"b\u00f6len say\u0131: \")) Exception: 5 say\u0131s\u0131n\u0131 kullanamazs\u0131n\u0131z. Burada raise kelimesinden sonra bulunan Exception anahtar kelimesinin yerine istedi\u011fimizi yazamay\u0131z. Onun yerine sadece Python i\u00e7inde bulunan hata belirten anahtar kelimelerini kullanabiliriz. Bu kelimelere \u00f6rnek vermek gerekirse NameError, TypeError, ZeroDivisionError, vb...","title":"raise"},{"location":"python/python_hata_yakalama/#butun-hatalar-yakalamak","text":"Geli\u015ftirdi\u011fimiz programda bekledi\u011fimiz hatalar\u0131n d\u0131\u015f\u0131nda beklemedi\u011fimiz hatalar ile de kar\u015f\u0131la\u015fabiliriz. Bu durumu \u00f6nlemek i\u00e7in bekledi\u011fimiz hatalar\u0131n d\u0131\u015f\u0131ndan bulunan b\u00fct\u00fcn hatalar\u0131da yakalamam\u0131z gerekmektedir. Bir \u00f6rnek ile inceleyelim: try: sayi1 = int(input(\"Bir say\u0131 giriniz: \")) sayi2 = int(input(\"Bir say\u0131 giriniz: \")) print(\"Sonu\u00e7: \",sayi1 / sayi2) except ZeroDivisionError: print(\"Herhangi bir say\u0131 s\u0131f\u0131ra b\u00f6l\u00fcnemez.\") except ValueError: print(\"L\u00fctfen sadece say\u0131 giriniz.\") except: print(\"Bir hata ile kar\u015f\u0131la\u015f\u0131ld\u0131.\") Bir say\u0131 giriniz: 1 Bir say\u0131 giriniz: 2 Sonu\u00e7: 0.5","title":"B\u00fct\u00fcn Hatalar\u0131 Yakalamak"},{"location":"python/python_hata_yakalama/#diger-hatalar","text":"Python i\u00e7erisinde bulunan di\u011fer hatalar\u0131n neler oldu\u011funu \u00f6\u011frenmek isterseniz e\u011fer buradan \u00f6\u011frenebilirsiniz. Son G\u00fcncelleme: 17 Aral\u0131k 2019","title":"Di\u011fer Hatalar"},{"location":"python/python_ileri_duzey_fonksiyonlar/","text":"\u0130leri D\u00fczey Fonksiyonlar Lambda Fonksiyonlar\u0131 Bu fonksiyonu tan\u0131mlamam\u0131za yarayan ifade def ifadesinden farkl\u0131 olarak lambda oldu\u011fu i\u00e7in bu fonksiyonlar\u0131 ad\u0131 lambda fonksiyonlar\u0131d\u0131r. lambda fonksiyonu i\u00e7in bir \u00f6rnek verelim: fonk = lambda param1, param2: param1 + param2 Tan\u0131mlad\u0131\u011f\u0131m\u0131z fonksiyon iki say\u0131y\u0131 toplama i\u015flemini yapmaktad\u0131r. lambda fonksiyonlar\u0131n\u0131 def ifadesi ile tan\u0131mlad\u0131\u011f\u0131m\u0131z fonksiyonlar gibi kullanabiliriz: fonk(2, 4) 6 Lambda fonksiyonlar\u0131n\u0131, bir fonksiyonun i\u015flevselli\u011fine ihtiya\u00e7 duydu\u011fumuz, ama konum olarak bir fonksiyon tan\u0131mlayamayaca\u011f\u0131m\u0131z veya fonksiyon tan\u0131mlaman\u0131n zor ya da me\u015fakkatli oldu\u011fu durumlarda kullanabiliriz. Diyelim ki bir say\u0131n\u0131n \u00e7ift say\u0131 olup olmad\u0131\u011f\u0131n\u0131 denetleyen bir fonksiyon yazmak istiyorsunuz. Bunun i\u00e7in \u015f\u00f6yle bir fonksiyon tan\u0131mlayabilece\u011fimizi biliyorsunuz: def cift_mi(sayi): return sayi % 2 == 0 E\u011fer cift_mi() fonksiyonuna parametre olarak verilen bir say\u0131 \u00e7ift ise fonksiyonumuz True \u00e7\u0131kt\u0131s\u0131 verecektir: print(cift_mi(100)) True Aksi halde False \u00e7\u0131kt\u0131s\u0131 al\u0131r\u0131z: print(cift_mi(99)) False \u0130\u015fte yukar\u0131daki etkiyi lambda fonksiyonlar\u0131 yard\u0131m\u0131yla da elde edebiliriz. Dikkatlice bak\u0131n: cift_mi_2 = lambda sayi: sayi % 2 == 0 cift_mi_2(100) True cift_mi_2(99) False S\u00f6z\u00fcn \u00f6z\u00fc, mesela \u015fu kod: lambda x: x + 10 T\u00fcrk\u00e7ede \u015fu anlama gelir: 'x' adl\u0131 bir parametre alan bir lambda fonksiyonu tan\u0131mla. Bu fonksiyon, bu 'x parametresine 10 say\u0131s\u0131n\u0131 eklesin. Biz yukar\u0131daki \u00f6rneklerde lambda fonksiyonunu tek bir parametre ile tan\u0131mlad\u0131k. Ama elbette lambda fonksiyonlar\u0131n\u0131n birden fazla parametre de alabilece\u011fini de biliyorsunuz. \u00d6rne\u011fin: birlestir = lambda ifade, birlestirici: birlestirici.join(ifade.split()) Burada lambda fonksiyonumuz toplam iki farkl\u0131 parametre al\u0131yor: Bunlardan ilki ifade, ikincisi ise birle\u015ftirici. Fonksiyonumuzun g\u00f6vdesinde ifade parametresine split() metodunu uygulad\u0131ktan sonra, elde etti\u011fimiz par\u00e7alar\u0131 birle\u015ftirici parametresinin de\u011ferini kullanarak birbirleriyle birle\u015ftiriyoruz. Yani: birlestir('Python Programlama Dili', '-') 'Python-Programlama-Dili' \u00d6zyinelemeli (Recursive) Fonksiyonlar Bu fonksiyonlara, \u2018kendi kendilerini yineleyen\u2019 , veya daha teknik bir dille ifade etmek gerekirse \u2018\u00f6zyinelemeli\u2019 (recursive ) fonksiyonlar ad\u0131 verilir. \u00d6zyinelemeli fonksiyonlar i\u00e7in a\u015fa\u011f\u0131da \u00f6rne\u011fi inceleyelim: def azalt(s): if len(s) < 1: return s else: print(s) return azalt(s[1:]) print(azalt('python')) python ython thon hon on n Fonksiyonumuzu yaz\u0131p \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131za ve bu fonksiyonun bize nas\u0131l bir \u00e7\u0131kt\u0131 verdi\u011fini g\u00f6rd\u00fc\u011f\u00fcm\u00fcze g\u00f6re fonksiyonu a\u00e7\u0131klamaya ge\u00e7ebiliriz. Bu fonksiyon ilk bak\u0131\u015fta daha \u00f6nce \u00f6\u011frendi\u011fimiz fonksiyonlardan \u00e7ok da farkl\u0131 g\u00f6r\u00fcnm\u00fcyor asl\u0131nda. Ama e\u011fer fonksiyonun son k\u0131sm\u0131na bakacak olursan\u0131z, bu fonksiyonu daha \u00f6nce \u00f6\u011frendi\u011fimiz fonksiyonlardan ay\u0131ran \u015fu sat\u0131r\u0131 g\u00f6r\u00fcrs\u00fcn\u00fcz: return azalt(s[1:]) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, burada azalt() fonksiyonu i\u00e7inde yine azalt() fonksiyonunu \u00e7a\u011f\u0131r\u0131yoruz. B\u00f6ylece fonksiyonumuz s\u00fcrekli olarak kendi kendini yineliyor. Yani ayn\u0131 fonksiyonu tekrar tekrar uyguluyor. Son G\u00fcncelleme: 27 Aral\u0131k 2019 - Cuma","title":"\u0130leri D\u00fczey Fonksiyonlar"},{"location":"python/python_ileri_duzey_fonksiyonlar/#ileri-duzey-fonksiyonlar","text":"","title":"\u0130leri D\u00fczey Fonksiyonlar"},{"location":"python/python_ileri_duzey_fonksiyonlar/#lambda-fonksiyonlar","text":"Bu fonksiyonu tan\u0131mlamam\u0131za yarayan ifade def ifadesinden farkl\u0131 olarak lambda oldu\u011fu i\u00e7in bu fonksiyonlar\u0131 ad\u0131 lambda fonksiyonlar\u0131d\u0131r. lambda fonksiyonu i\u00e7in bir \u00f6rnek verelim: fonk = lambda param1, param2: param1 + param2 Tan\u0131mlad\u0131\u011f\u0131m\u0131z fonksiyon iki say\u0131y\u0131 toplama i\u015flemini yapmaktad\u0131r. lambda fonksiyonlar\u0131n\u0131 def ifadesi ile tan\u0131mlad\u0131\u011f\u0131m\u0131z fonksiyonlar gibi kullanabiliriz: fonk(2, 4) 6 Lambda fonksiyonlar\u0131n\u0131, bir fonksiyonun i\u015flevselli\u011fine ihtiya\u00e7 duydu\u011fumuz, ama konum olarak bir fonksiyon tan\u0131mlayamayaca\u011f\u0131m\u0131z veya fonksiyon tan\u0131mlaman\u0131n zor ya da me\u015fakkatli oldu\u011fu durumlarda kullanabiliriz. Diyelim ki bir say\u0131n\u0131n \u00e7ift say\u0131 olup olmad\u0131\u011f\u0131n\u0131 denetleyen bir fonksiyon yazmak istiyorsunuz. Bunun i\u00e7in \u015f\u00f6yle bir fonksiyon tan\u0131mlayabilece\u011fimizi biliyorsunuz: def cift_mi(sayi): return sayi % 2 == 0 E\u011fer cift_mi() fonksiyonuna parametre olarak verilen bir say\u0131 \u00e7ift ise fonksiyonumuz True \u00e7\u0131kt\u0131s\u0131 verecektir: print(cift_mi(100)) True Aksi halde False \u00e7\u0131kt\u0131s\u0131 al\u0131r\u0131z: print(cift_mi(99)) False \u0130\u015fte yukar\u0131daki etkiyi lambda fonksiyonlar\u0131 yard\u0131m\u0131yla da elde edebiliriz. Dikkatlice bak\u0131n: cift_mi_2 = lambda sayi: sayi % 2 == 0 cift_mi_2(100) True cift_mi_2(99) False S\u00f6z\u00fcn \u00f6z\u00fc, mesela \u015fu kod: lambda x: x + 10 T\u00fcrk\u00e7ede \u015fu anlama gelir: 'x' adl\u0131 bir parametre alan bir lambda fonksiyonu tan\u0131mla. Bu fonksiyon, bu 'x parametresine 10 say\u0131s\u0131n\u0131 eklesin. Biz yukar\u0131daki \u00f6rneklerde lambda fonksiyonunu tek bir parametre ile tan\u0131mlad\u0131k. Ama elbette lambda fonksiyonlar\u0131n\u0131n birden fazla parametre de alabilece\u011fini de biliyorsunuz. \u00d6rne\u011fin: birlestir = lambda ifade, birlestirici: birlestirici.join(ifade.split()) Burada lambda fonksiyonumuz toplam iki farkl\u0131 parametre al\u0131yor: Bunlardan ilki ifade, ikincisi ise birle\u015ftirici. Fonksiyonumuzun g\u00f6vdesinde ifade parametresine split() metodunu uygulad\u0131ktan sonra, elde etti\u011fimiz par\u00e7alar\u0131 birle\u015ftirici parametresinin de\u011ferini kullanarak birbirleriyle birle\u015ftiriyoruz. Yani: birlestir('Python Programlama Dili', '-') 'Python-Programlama-Dili'","title":"Lambda Fonksiyonlar\u0131"},{"location":"python/python_ileri_duzey_fonksiyonlar/#ozyinelemeli-recursive-fonksiyonlar","text":"Bu fonksiyonlara, \u2018kendi kendilerini yineleyen\u2019 , veya daha teknik bir dille ifade etmek gerekirse \u2018\u00f6zyinelemeli\u2019 (recursive ) fonksiyonlar ad\u0131 verilir. \u00d6zyinelemeli fonksiyonlar i\u00e7in a\u015fa\u011f\u0131da \u00f6rne\u011fi inceleyelim: def azalt(s): if len(s) < 1: return s else: print(s) return azalt(s[1:]) print(azalt('python')) python ython thon hon on n Fonksiyonumuzu yaz\u0131p \u00e7al\u0131\u015ft\u0131rd\u0131\u011f\u0131m\u0131za ve bu fonksiyonun bize nas\u0131l bir \u00e7\u0131kt\u0131 verdi\u011fini g\u00f6rd\u00fc\u011f\u00fcm\u00fcze g\u00f6re fonksiyonu a\u00e7\u0131klamaya ge\u00e7ebiliriz. Bu fonksiyon ilk bak\u0131\u015fta daha \u00f6nce \u00f6\u011frendi\u011fimiz fonksiyonlardan \u00e7ok da farkl\u0131 g\u00f6r\u00fcnm\u00fcyor asl\u0131nda. Ama e\u011fer fonksiyonun son k\u0131sm\u0131na bakacak olursan\u0131z, bu fonksiyonu daha \u00f6nce \u00f6\u011frendi\u011fimiz fonksiyonlardan ay\u0131ran \u015fu sat\u0131r\u0131 g\u00f6r\u00fcrs\u00fcn\u00fcz: return azalt(s[1:]) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, burada azalt() fonksiyonu i\u00e7inde yine azalt() fonksiyonunu \u00e7a\u011f\u0131r\u0131yoruz. B\u00f6ylece fonksiyonumuz s\u00fcrekli olarak kendi kendini yineliyor. Yani ayn\u0131 fonksiyonu tekrar tekrar uyguluyor. Son G\u00fcncelleme: 27 Aral\u0131k 2019 - Cuma","title":"\u00d6zyinelemeli (Recursive) Fonksiyonlar"},{"location":"python/python_karakter_dizileri/","text":"Karakter Dizileri Karakter Dizilerinin \u00d6\u011felerine Eri\u015fmek Karakter dizileri \u00e7ok s\u0131k kullanaca\u011f\u0131m\u0131z yap\u0131lard\u0131r. \u00d6nceki b\u00f6l\u00fcmlerde karakter dizileri \u00fczerinde i\u015flemler yapm\u0131\u015ft\u0131k. Bu b\u00f6l\u00fcmde daha ayr\u0131nt\u0131l\u0131 olarak inceleyece\u011fiz. Karakter dizilerine birka\u00e7 farkl\u0131 yol ile eri\u015febiliriz. \u00d6rne\u011fin: karakter = \"karakter\" print(karakter) karakter Yukar\u0131da g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi karakter isimli de\u011fi\u015fkene print fonksiyonu ile eri\u015fmi\u015f olduk ve i\u00e7erisinde bulunan de\u011ferin tamam\u0131n\u0131 ekrana yazd\u0131rd\u0131k. Bir ba\u015fka yol olarakta kullan\u0131c\u0131dan alabiliriz de\u011feri. karakter = input(\"Bir kelime giriniz: \") print(karakter) Bir kelime giriniz: kelime kelime Ayn\u0131 zamanda for d\u00f6ng\u00fcs\u00fc ile karakter dizisinin b\u00fct\u00fcn de\u011ferlerine tek tek eri\u015febiliriz. \u00d6rne\u011fin: for deger in karakter: print(deger) k e l i m e Yukar\u0131daki i\u015flemi print fonsiyonu ile de yapabiliriz. print(*karakter, sep=\"\\n\") k e l i m e Ayn\u0131 zamanda karakter dizine \u015fu \u015fekildede eri\u015febiliriz. nesne[\u00f6ge_s\u0131ras\u0131], \u00f6rnek ile inceleyelim bu durumu: karakter[0] 'k' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi karakter nesnesinin ilk eleman\u0131na eri\u015fmek i\u00e7in s\u0131f\u0131r yazd\u0131m yani burada ba\u015flang\u0131\u00e7 her daim s\u0131f\u0131r olmaktad\u0131r. E\u011fer bir yazm\u0131\u015f olsayd\u0131m ikinci karaktere ula\u015fm\u0131\u015f olurdum. karakter[1] 'e' Peki b\u00fcy\u00fck bir rakam yazarsam ne ile kar\u015f\u0131la\u015f\u0131r\u0131m, hemen bakal\u0131m: karakter[10] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-7-ad38375bdd41> in <module> ----> 1 karakter[10] IndexError: string index out of range G\u00f6rm\u00fc\u015f oldu\u011funuz gibi karakter de\u011fi\u015fkeninin uzunlu\u011funun d\u0131\u015f\u0131na \u00e7\u0131km\u0131\u015f oldum. Yukar\u0131da verilen hata string index out of range bir nesnenin var olan uzunlu\u011funun d\u0131\u015f\u0131na \u00e7\u0131k\u0131ld\u0131\u011f\u0131 zaman olu\u015fmaktad\u0131r. Peki karakter de\u011fi\u015fkenimizin uzunlu\u011funu nas\u0131l \u00f6\u011frenebiliriz. Bunun daha \u00f6nce \u00f6\u011frendi\u011fimiz len() fonksiyonu ile yapabiliriz. len(karakter) 6 karakter de\u011fi\u015fkenimizin i\u00e7inde kelime yazmaktad\u0131r. Bu de\u011ferin uzunlu\u011fu alt\u0131d\u0131r. Fakat biz alt\u0131nc\u0131 karaktere eri\u015fmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z zaman hata ile kar\u015f\u0131laca\u011f\u0131z: karakter[6] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-9-3c6610cc998a> in <module> ----> 1 karakter[6] IndexError: string index out of range G\u00f6rm\u00fc\u015f oldu\u011funuz gibi alt\u0131nc\u0131 karaktere eri\u015fmek istedi\u011fimiz zaman hata verdi \u00e7\u00fcnk\u00fc karakter dizilerine eri\u015firken s\u0131f\u0131r ile ba\u015flar\u0131z. Normalde saymaya birden ba\u015flar\u0131z ama burada saymaya s\u0131f\u0131rdan ba\u015fl\u0131yoruz. Bu fark\u0131 her daim hat\u0131rlayal\u0131m. karakter[5] 'e' karakter isimli de\u011fi\u015fkenimizin elemanlar\u0131na tek tek eri\u015felim. karakter[0] 'k' karakter[1] 'e' karakter[2] 'l' karakter[3] 'i' karakter[4] 'm' karakter[5] 'e' Yukar\u0131da belirtti\u011fimiz \u00f6\u011fe_s\u0131ras\u0131 yazan yere eksi de\u011ferli bir de\u011ferde girebiliriz. E\u011fer -1 de\u011ferini girersek bize de\u011fi\u015fkenimizin en sonda bulunan de\u011ferini getirecektir. E\u011fer -2 de\u011ferini girersek sondan bir \u00f6nceki de\u011feri getirecektir. karakter[-1] 'e' karakter[-2] 'm' karakter[-3] 'i' Bu \u015fekilde eksi de\u011ferlerde girebiliriz. Peki for d\u00f6ng\u00fcs\u00fcn\u00fc ve bu yap\u0131y\u0131 kullanarak eri\u015febilir miyiz? Tabiki de, hemen bir \u00f6rnek ile bakal\u0131m: for deger in range(len(karakter)): print(karakter[deger]) k e l i m e Farkl\u0131 bir \u015fekilde ekranda g\u00f6sterelim: for i in range(len(karakter)): print(\"De\u011fi\u015fkenimizin {}. harfi: {}\".format(i, karakter[i])) De\u011fi\u015fkenimizin 0. harfi: k De\u011fi\u015fkenimizin 1. harfi: e De\u011fi\u015fkenimizin 2. harfi: l De\u011fi\u015fkenimizin 3. harfi: i De\u011fi\u015fkenimizin 4. harfi: m De\u011fi\u015fkenimizin 5. harfi: e Karakter Dizilerini Dilimlemek Karakter dizilerine par\u00e7a par\u00e7ada eri\u015febiliriz yani onlar\u0131 meyve dilimler gibi dilimleyebiliriz. Hemen bir \u00f6rnek \u00fczerinden inceleyelim: karakter_dizisi = \"Bu bir karakter dizisidir.\" karakter_dizisi[0:2] 'Bu' Yukar\u0131daki \u00f6rnekte karakter_dizisi de\u011fi\u015fkenimizin sadece ilk iki de\u011ferini getirdik. karakter_dizisi[2:7] ' bir ' Peki burada da eksi de\u011ferli de\u011ferler kullanabilir miyiz? Tabiki de, hemen bir \u00f6rnek ile inceleyelim: karakter_dizisi[-4:] 'dir.' Burada nas\u0131l bir y\u00f6ntem izleyiyoruz. Nesnelere bu \u015fekilde eri\u015febiliyoruz: karakter_dizisi[al\u0131nacak_ilk_\u00f6\u011fenin_s\u0131ras\u0131:al\u0131nacak_son_\u00f6\u011fenin_s\u0131ras\u0131n\u0131n_bir_fazlas\u0131] . E\u011fer istersek ilk nesneyi yazmad\u0131\u011f\u0131m\u0131z zaman ba\u015ftan ba\u015flay\u0131p bizim belirledi\u011fimiz de\u011fere kadar eri\u015fir. karakter_dizisi[:4] 'Bu b' Yukar\u0131da yazd\u0131\u011f\u0131m\u0131z kod ile ayn\u0131 i\u015fe yapan kod ise: karakter_dizisi[0:4] 'Bu b' Karakter Dizilerini Ters \u00c7evirmek Bir de\u011fi\u015fkenin bar\u0131nd\u0131rd\u0131\u011f\u0131 karakter dizisini ters \u00e7evirmek istedi\u011fimiz zaman \u015funu yapmam\u0131z gerekmektedir: karakter_dizisi[::-1] '.ridisizid retkarak rib uB' Peki sadece belirli aral\u0131klarla ilerlemek istedi\u011fimiz zaman ne yapmal\u0131y\u0131z? karakter_dizisi[0:7:2] 'B i ' karakter_dizisi[ilk_karakter:son_karakter:atlama_say\u0131s\u0131]. Burada atlama say\u0131s\u0131 yazan yere ka\u00e7 adet karakter atlaya atlaya ilerlemek istiyorsan\u0131z onu yazmal\u0131s\u0131n\u0131z. Karakter dizisini ters \u00e7evirmek i\u00e7in kullanabilece\u011fimiz daha pratik bir fonksiyon mevcut o da, reversed(). Hemen bir \u00f6rnek ile inceyelim: reversed(karakter_dizisi) <reversed at 0x11200d290> reversed fonksiyonunu tek ba\u015f\u0131na kulland\u0131\u011f\u0131m\u0131z zaman bizlere bu \u015fekilde bir de\u011fer d\u00f6nd\u00fcr\u00fcyor. Bu fonksiyonu for d\u00f6ng\u00fcs\u00fc veya print fonksiyonu ile kullanmam\u0131z gerekmektedir. for i in reversed(karakter_dizisi): print(i, end=\"\") .ridisizid retkarak rib uB print(*reversed(karakter_dizisi), sep=\"\") .ridisizid retkarak rib uB Karakter Dizilerini Alfabe S\u0131ras\u0131na Dizmek Python'da sorted() fonksiyonu ile karakter dizisini alfabetik s\u0131raya g\u00f6re dizmek m\u00fcmk\u00fcn. karakter_dizisi = \"zebra\" sorted(karakter_dizisi) ['a', 'b', 'e', 'r', 'z'] Yukar\u0131da ald\u0131\u011f\u0131m\u0131z \u00e7\u0131kt\u0131y\u0131 iki farkl\u0131 yollada alabiliriz. Yol print(*sorted(karakter_dizisi), sep=\"\") aberz Yol for i in sorted(karakter_dizisi): print(i, end=\"\") aberz Sorted() fonksiyonu T\u00fcrk\u00e7e karakterlerde do\u011fru bir \u015fekilde \u00e7al\u0131\u015fmamaktad\u0131r. Bu durumu \u00e7\u00f6zmek m\u00fcmk\u00fcn lakin \"i\" harfi i\u00e7in elimizle d\u00fczeltmemiz gerekmektedir \u00e7\u00fcnk\u00fc \u0131 ve i harflerini birbirinden ay\u0131ramamaktad\u0131r. Bu duruma dikkat etmekte fayda var. Karakter Dizileri \u00dczerinde De\u011fi\u015fiklik Yapmak Bu k\u0131s\u0131mda karakter dizilerinde istedi\u011fimiz adet karakteri de\u011fi\u015ftirmekten tutunda, ba\u015f harfi b\u00fcy\u00fctmeye kadar farkl\u0131 konular\u0131 inceleyece\u011fiz. karakter_dizisi = \"elma\" Elimizde bulunan karakter_dizisi de\u011fi\u015fkenin ba\u015f harfini b\u00fcy\u00fctmek istiyoruz diyelim: karakter_dizisi = \"E\" + karakter_dizisi[1:] print(karakter_dizisi) Elma Peki karakter_dizisi i\u00e7erisinden istedi\u011fimiz k\u0131sm\u0131 \u00e7\u0131kar\u0131p yerine ba\u015fka bir kelime ekleyelim. karakter_dizisi = karakter_dizisi[0:2] + \"kart\" print(karakter_dizisi) Elkart \u00dc\u00e7 \u00d6nemli Fonksiyon Python'da i\u015flerimizi kolayla\u015ft\u0131ran veya unuttu\u011fumuz bilgileri hat\u0131rlamam\u0131z\u0131 sa\u011flayan baz\u0131 fonksiyonlar \u015fimdi bunlar\u0131 \u00f6\u011frenelim. dir() Bu fonksiyon bizlere Python'da bulunan nesneler hakk\u0131nda bilgi vermektedir. Bu fonksiyon arac\u0131l\u0131\u011f\u0131 ile karakter dizileri(str) hakk\u0131nda bilgi alal\u0131m. dir(str) ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] dir() fonksiyonu karakter dizileri ile beraber kullanabilece\u011fimiz fonksiyonlar\u0131 bizlere g\u00f6stermektedir. Ayn\u0131 \u015fekilde int t\u00fcr\u00fcndekiler i\u00e7inde bakabiliriz. dir(int) ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] dir() ile kullanaca\u011f\u0131n\u0131z bir yap\u0131n\u0131n ne t\u00fcr yap\u0131larla beraber kullan\u0131labildi\u011fini \u00f6\u011frenebilirsiniz. enumerate() Enumerate ingilizcede \"numaralamak, numaraland\u0131rmak\" olarak ge\u00e7mektedir. Yani bir karakter dizisinin de\u011ferlerini numaraland\u0131rmam\u0131za yaramaktad\u0131r. print(*enumerate(karakter_dizisi)) (0, 'E') (1, 'l') (2, 'k') (3, 'a') (4, 'r') (5, 't') Bir de\u011fi\u015fkenin i\u00e7erisinde bar\u0131nd\u0131rd\u0131\u011f\u0131 de\u011ferleri tek tek numaraland\u0131rabilmemizi sa\u011fl\u0131yor. E\u011fer b\u00f6yle bir ihtiyac\u0131n\u0131z olursa bu fonksiyon i\u015finizi h\u0131zl\u0131 bir \u015fekilde yapabilmenizi sa\u011flar. help() Herhangi bir fonksiyon, metot veya nesne hakk\u0131nda interneti kullanmadan h\u0131zl\u0131 bir \u015fekilde ingilizce olarak bilgi almak isterseniz bu fonksiyon i\u015finizi g\u00f6recektir. \u00d6rne\u011fin: help(len) Help on built-in function len in module builtins: len(obj, /) Return the number of items in a container. G\u00f6rm\u00fc\u015f oldu\u011funuz gibi help fonksiyonu bizlere len fonksiyonunun ne oldu\u011funu ve nas\u0131l kullan\u0131labildi\u011fini g\u00f6stermektedir. Son G\u00fcncelleme: 18 Aral\u0131k 2019 - \u00c7ar\u015famba","title":"Karakter Dizileri(str)"},{"location":"python/python_karakter_dizileri/#karakter-dizileri","text":"","title":"Karakter Dizileri"},{"location":"python/python_karakter_dizileri/#karakter-dizilerinin-ogelerine-erismek","text":"Karakter dizileri \u00e7ok s\u0131k kullanaca\u011f\u0131m\u0131z yap\u0131lard\u0131r. \u00d6nceki b\u00f6l\u00fcmlerde karakter dizileri \u00fczerinde i\u015flemler yapm\u0131\u015ft\u0131k. Bu b\u00f6l\u00fcmde daha ayr\u0131nt\u0131l\u0131 olarak inceleyece\u011fiz. Karakter dizilerine birka\u00e7 farkl\u0131 yol ile eri\u015febiliriz. \u00d6rne\u011fin: karakter = \"karakter\" print(karakter) karakter Yukar\u0131da g\u00f6r\u00fcld\u00fc\u011f\u00fc gibi karakter isimli de\u011fi\u015fkene print fonksiyonu ile eri\u015fmi\u015f olduk ve i\u00e7erisinde bulunan de\u011ferin tamam\u0131n\u0131 ekrana yazd\u0131rd\u0131k. Bir ba\u015fka yol olarakta kullan\u0131c\u0131dan alabiliriz de\u011feri. karakter = input(\"Bir kelime giriniz: \") print(karakter) Bir kelime giriniz: kelime kelime Ayn\u0131 zamanda for d\u00f6ng\u00fcs\u00fc ile karakter dizisinin b\u00fct\u00fcn de\u011ferlerine tek tek eri\u015febiliriz. \u00d6rne\u011fin: for deger in karakter: print(deger) k e l i m e Yukar\u0131daki i\u015flemi print fonsiyonu ile de yapabiliriz. print(*karakter, sep=\"\\n\") k e l i m e Ayn\u0131 zamanda karakter dizine \u015fu \u015fekildede eri\u015febiliriz. nesne[\u00f6ge_s\u0131ras\u0131], \u00f6rnek ile inceleyelim bu durumu: karakter[0] 'k' G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi karakter nesnesinin ilk eleman\u0131na eri\u015fmek i\u00e7in s\u0131f\u0131r yazd\u0131m yani burada ba\u015flang\u0131\u00e7 her daim s\u0131f\u0131r olmaktad\u0131r. E\u011fer bir yazm\u0131\u015f olsayd\u0131m ikinci karaktere ula\u015fm\u0131\u015f olurdum. karakter[1] 'e' Peki b\u00fcy\u00fck bir rakam yazarsam ne ile kar\u015f\u0131la\u015f\u0131r\u0131m, hemen bakal\u0131m: karakter[10] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-7-ad38375bdd41> in <module> ----> 1 karakter[10] IndexError: string index out of range G\u00f6rm\u00fc\u015f oldu\u011funuz gibi karakter de\u011fi\u015fkeninin uzunlu\u011funun d\u0131\u015f\u0131na \u00e7\u0131km\u0131\u015f oldum. Yukar\u0131da verilen hata string index out of range bir nesnenin var olan uzunlu\u011funun d\u0131\u015f\u0131na \u00e7\u0131k\u0131ld\u0131\u011f\u0131 zaman olu\u015fmaktad\u0131r. Peki karakter de\u011fi\u015fkenimizin uzunlu\u011funu nas\u0131l \u00f6\u011frenebiliriz. Bunun daha \u00f6nce \u00f6\u011frendi\u011fimiz len() fonksiyonu ile yapabiliriz. len(karakter) 6 karakter de\u011fi\u015fkenimizin i\u00e7inde kelime yazmaktad\u0131r. Bu de\u011ferin uzunlu\u011fu alt\u0131d\u0131r. Fakat biz alt\u0131nc\u0131 karaktere eri\u015fmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z zaman hata ile kar\u015f\u0131laca\u011f\u0131z: karakter[6] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-9-3c6610cc998a> in <module> ----> 1 karakter[6] IndexError: string index out of range G\u00f6rm\u00fc\u015f oldu\u011funuz gibi alt\u0131nc\u0131 karaktere eri\u015fmek istedi\u011fimiz zaman hata verdi \u00e7\u00fcnk\u00fc karakter dizilerine eri\u015firken s\u0131f\u0131r ile ba\u015flar\u0131z. Normalde saymaya birden ba\u015flar\u0131z ama burada saymaya s\u0131f\u0131rdan ba\u015fl\u0131yoruz. Bu fark\u0131 her daim hat\u0131rlayal\u0131m. karakter[5] 'e' karakter isimli de\u011fi\u015fkenimizin elemanlar\u0131na tek tek eri\u015felim. karakter[0] 'k' karakter[1] 'e' karakter[2] 'l' karakter[3] 'i' karakter[4] 'm' karakter[5] 'e' Yukar\u0131da belirtti\u011fimiz \u00f6\u011fe_s\u0131ras\u0131 yazan yere eksi de\u011ferli bir de\u011ferde girebiliriz. E\u011fer -1 de\u011ferini girersek bize de\u011fi\u015fkenimizin en sonda bulunan de\u011ferini getirecektir. E\u011fer -2 de\u011ferini girersek sondan bir \u00f6nceki de\u011feri getirecektir. karakter[-1] 'e' karakter[-2] 'm' karakter[-3] 'i' Bu \u015fekilde eksi de\u011ferlerde girebiliriz. Peki for d\u00f6ng\u00fcs\u00fcn\u00fc ve bu yap\u0131y\u0131 kullanarak eri\u015febilir miyiz? Tabiki de, hemen bir \u00f6rnek ile bakal\u0131m: for deger in range(len(karakter)): print(karakter[deger]) k e l i m e Farkl\u0131 bir \u015fekilde ekranda g\u00f6sterelim: for i in range(len(karakter)): print(\"De\u011fi\u015fkenimizin {}. harfi: {}\".format(i, karakter[i])) De\u011fi\u015fkenimizin 0. harfi: k De\u011fi\u015fkenimizin 1. harfi: e De\u011fi\u015fkenimizin 2. harfi: l De\u011fi\u015fkenimizin 3. harfi: i De\u011fi\u015fkenimizin 4. harfi: m De\u011fi\u015fkenimizin 5. harfi: e","title":"Karakter Dizilerinin \u00d6\u011felerine Eri\u015fmek"},{"location":"python/python_karakter_dizileri/#karakter-dizilerini-dilimlemek","text":"Karakter dizilerine par\u00e7a par\u00e7ada eri\u015febiliriz yani onlar\u0131 meyve dilimler gibi dilimleyebiliriz. Hemen bir \u00f6rnek \u00fczerinden inceleyelim: karakter_dizisi = \"Bu bir karakter dizisidir.\" karakter_dizisi[0:2] 'Bu' Yukar\u0131daki \u00f6rnekte karakter_dizisi de\u011fi\u015fkenimizin sadece ilk iki de\u011ferini getirdik. karakter_dizisi[2:7] ' bir ' Peki burada da eksi de\u011ferli de\u011ferler kullanabilir miyiz? Tabiki de, hemen bir \u00f6rnek ile inceleyelim: karakter_dizisi[-4:] 'dir.' Burada nas\u0131l bir y\u00f6ntem izleyiyoruz. Nesnelere bu \u015fekilde eri\u015febiliyoruz: karakter_dizisi[al\u0131nacak_ilk_\u00f6\u011fenin_s\u0131ras\u0131:al\u0131nacak_son_\u00f6\u011fenin_s\u0131ras\u0131n\u0131n_bir_fazlas\u0131] . E\u011fer istersek ilk nesneyi yazmad\u0131\u011f\u0131m\u0131z zaman ba\u015ftan ba\u015flay\u0131p bizim belirledi\u011fimiz de\u011fere kadar eri\u015fir. karakter_dizisi[:4] 'Bu b' Yukar\u0131da yazd\u0131\u011f\u0131m\u0131z kod ile ayn\u0131 i\u015fe yapan kod ise: karakter_dizisi[0:4] 'Bu b'","title":"Karakter Dizilerini Dilimlemek"},{"location":"python/python_karakter_dizileri/#karakter-dizilerini-ters-cevirmek","text":"Bir de\u011fi\u015fkenin bar\u0131nd\u0131rd\u0131\u011f\u0131 karakter dizisini ters \u00e7evirmek istedi\u011fimiz zaman \u015funu yapmam\u0131z gerekmektedir: karakter_dizisi[::-1] '.ridisizid retkarak rib uB' Peki sadece belirli aral\u0131klarla ilerlemek istedi\u011fimiz zaman ne yapmal\u0131y\u0131z? karakter_dizisi[0:7:2] 'B i ' karakter_dizisi[ilk_karakter:son_karakter:atlama_say\u0131s\u0131]. Burada atlama say\u0131s\u0131 yazan yere ka\u00e7 adet karakter atlaya atlaya ilerlemek istiyorsan\u0131z onu yazmal\u0131s\u0131n\u0131z. Karakter dizisini ters \u00e7evirmek i\u00e7in kullanabilece\u011fimiz daha pratik bir fonksiyon mevcut o da, reversed(). Hemen bir \u00f6rnek ile inceyelim: reversed(karakter_dizisi) <reversed at 0x11200d290> reversed fonksiyonunu tek ba\u015f\u0131na kulland\u0131\u011f\u0131m\u0131z zaman bizlere bu \u015fekilde bir de\u011fer d\u00f6nd\u00fcr\u00fcyor. Bu fonksiyonu for d\u00f6ng\u00fcs\u00fc veya print fonksiyonu ile kullanmam\u0131z gerekmektedir. for i in reversed(karakter_dizisi): print(i, end=\"\") .ridisizid retkarak rib uB print(*reversed(karakter_dizisi), sep=\"\") .ridisizid retkarak rib uB","title":"Karakter Dizilerini Ters \u00c7evirmek"},{"location":"python/python_karakter_dizileri/#karakter-dizilerini-alfabe-srasna-dizmek","text":"Python'da sorted() fonksiyonu ile karakter dizisini alfabetik s\u0131raya g\u00f6re dizmek m\u00fcmk\u00fcn. karakter_dizisi = \"zebra\" sorted(karakter_dizisi) ['a', 'b', 'e', 'r', 'z'] Yukar\u0131da ald\u0131\u011f\u0131m\u0131z \u00e7\u0131kt\u0131y\u0131 iki farkl\u0131 yollada alabiliriz. Yol print(*sorted(karakter_dizisi), sep=\"\") aberz Yol for i in sorted(karakter_dizisi): print(i, end=\"\") aberz Sorted() fonksiyonu T\u00fcrk\u00e7e karakterlerde do\u011fru bir \u015fekilde \u00e7al\u0131\u015fmamaktad\u0131r. Bu durumu \u00e7\u00f6zmek m\u00fcmk\u00fcn lakin \"i\" harfi i\u00e7in elimizle d\u00fczeltmemiz gerekmektedir \u00e7\u00fcnk\u00fc \u0131 ve i harflerini birbirinden ay\u0131ramamaktad\u0131r. Bu duruma dikkat etmekte fayda var.","title":"Karakter Dizilerini Alfabe S\u0131ras\u0131na Dizmek"},{"location":"python/python_karakter_dizileri/#karakter-dizileri-uzerinde-degisiklik-yapmak","text":"Bu k\u0131s\u0131mda karakter dizilerinde istedi\u011fimiz adet karakteri de\u011fi\u015ftirmekten tutunda, ba\u015f harfi b\u00fcy\u00fctmeye kadar farkl\u0131 konular\u0131 inceleyece\u011fiz. karakter_dizisi = \"elma\" Elimizde bulunan karakter_dizisi de\u011fi\u015fkenin ba\u015f harfini b\u00fcy\u00fctmek istiyoruz diyelim: karakter_dizisi = \"E\" + karakter_dizisi[1:] print(karakter_dizisi) Elma Peki karakter_dizisi i\u00e7erisinden istedi\u011fimiz k\u0131sm\u0131 \u00e7\u0131kar\u0131p yerine ba\u015fka bir kelime ekleyelim. karakter_dizisi = karakter_dizisi[0:2] + \"kart\" print(karakter_dizisi) Elkart","title":"Karakter Dizileri \u00dczerinde De\u011fi\u015fiklik Yapmak"},{"location":"python/python_karakter_dizileri/#uc-onemli-fonksiyon","text":"Python'da i\u015flerimizi kolayla\u015ft\u0131ran veya unuttu\u011fumuz bilgileri hat\u0131rlamam\u0131z\u0131 sa\u011flayan baz\u0131 fonksiyonlar \u015fimdi bunlar\u0131 \u00f6\u011frenelim.","title":"\u00dc\u00e7 \u00d6nemli Fonksiyon"},{"location":"python/python_karakter_dizileri/#dir","text":"Bu fonksiyon bizlere Python'da bulunan nesneler hakk\u0131nda bilgi vermektedir. Bu fonksiyon arac\u0131l\u0131\u011f\u0131 ile karakter dizileri(str) hakk\u0131nda bilgi alal\u0131m. dir(str) ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] dir() fonksiyonu karakter dizileri ile beraber kullanabilece\u011fimiz fonksiyonlar\u0131 bizlere g\u00f6stermektedir. Ayn\u0131 \u015fekilde int t\u00fcr\u00fcndekiler i\u00e7inde bakabiliriz. dir(int) ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] dir() ile kullanaca\u011f\u0131n\u0131z bir yap\u0131n\u0131n ne t\u00fcr yap\u0131larla beraber kullan\u0131labildi\u011fini \u00f6\u011frenebilirsiniz.","title":"dir()"},{"location":"python/python_karakter_dizileri/#enumerate","text":"Enumerate ingilizcede \"numaralamak, numaraland\u0131rmak\" olarak ge\u00e7mektedir. Yani bir karakter dizisinin de\u011ferlerini numaraland\u0131rmam\u0131za yaramaktad\u0131r. print(*enumerate(karakter_dizisi)) (0, 'E') (1, 'l') (2, 'k') (3, 'a') (4, 'r') (5, 't') Bir de\u011fi\u015fkenin i\u00e7erisinde bar\u0131nd\u0131rd\u0131\u011f\u0131 de\u011ferleri tek tek numaraland\u0131rabilmemizi sa\u011fl\u0131yor. E\u011fer b\u00f6yle bir ihtiyac\u0131n\u0131z olursa bu fonksiyon i\u015finizi h\u0131zl\u0131 bir \u015fekilde yapabilmenizi sa\u011flar.","title":"enumerate()"},{"location":"python/python_karakter_dizileri/#help","text":"Herhangi bir fonksiyon, metot veya nesne hakk\u0131nda interneti kullanmadan h\u0131zl\u0131 bir \u015fekilde ingilizce olarak bilgi almak isterseniz bu fonksiyon i\u015finizi g\u00f6recektir. \u00d6rne\u011fin: help(len) Help on built-in function len in module builtins: len(obj, /) Return the number of items in a container. G\u00f6rm\u00fc\u015f oldu\u011funuz gibi help fonksiyonu bizlere len fonksiyonunun ne oldu\u011funu ve nas\u0131l kullan\u0131labildi\u011fini g\u00f6stermektedir. Son G\u00fcncelleme: 18 Aral\u0131k 2019 - \u00c7ar\u015famba","title":"help()"},{"location":"python/python_karakter_dizilerinin_metotlari/","text":"Karakter Dizilerinin Metotlar\u0131 replace() Bu metot karakter dizisi i\u00e7erisinde de\u011fi\u015fiklikler yapabilmemizi sa\u011flar. Kullan\u0131m \u015fekli: karakter_dizisi.replace(eski_karakter_dizisi, yeni_karakter_dizisi). \u00d6rne\u011fin: kelime = \"elma\" kelime 'elma' kelime.replace(\"e\",\"E\") 'Elma' Bu fonksiyon ile karakter dizileri \u00fczerinde bir\u00e7ok de\u011fi\u015fiklik yapabilirsiniz. split() Bu metot karakter dizisi i\u00e7erisinde par\u00e7alama yapabilmemizi sa\u011flar. meyveler = \"Elma, Armut, Karpuz, Kiraz\" meyveler.split() ['Elma,', 'Armut,', 'Karpuz,', 'Kiraz'] meyveler de\u011fi\u015fkeninde bulunan i\u00e7eri\u011fi bo\u015flu\u011fa par\u00e7alad\u0131 fakat verdi\u011fi \u00e7\u0131kt\u0131 biraz problemli. Yani her i\u00e7erik virg\u00fcl ile beraber gelmi\u015f. Split fonksiyonuna neye g\u00f6re par\u00e7alamas\u0131n\u0131 s\u00f6ylersek onu baz alarak par\u00e7alama i\u015flemini yapar. meyveler.split(\",\") ['Elma', ' Armut', ' Karpuz', ' Kiraz'] veya bir harfe g\u00f6re par\u00e7alatabiliriz. meyveler.split(\"a\") ['Elm', ', Armut, K', 'rpuz, Kir', 'z'] split fonksiyonu ayn\u0131 zamanda ka\u00e7 kere b\u00f6lmesi gerekti\u011finide almaktad\u0131r. \u00d6rne\u011fin: meyveler.split(\",\",2) ['Elma', ' Armut', ' Karpuz, Kiraz'] rsplit() rsplit() metodunun split() metodundan fark\u0131 sa\u011fdan sola do\u011fru okumas\u0131d\u0131r. \u00d6rne\u011fin: meyveler.rsplit(\",\",2) ['Elma, Armut', ' Karpuz', ' Kiraz'] rsplit() metodu karakter dizisini b\u00f6lmeye sa\u011fdan ba\u015flad\u0131 ve sola do\u011fru gitti, split() metodundan fark\u0131 bu. splitlines() Bu metot veriyi sat\u0131r sat\u0131r b\u00f6le bilmemizi sa\u011flamaktad\u0131r. \u00d6rne\u011fin: lorem = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus nec magna nulla. Sed interdum diam at sem ultrices, nec suscipit massa lobortis. Fusce in leo finibus risus lacinia viverra. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam eget lorem ornare libero consequat tempus. Pellentesque sed odio at magna fringilla euismod a at enim. Fusce aliquet malesuada neque sit amet hendrerit.\"\"\" print(lorem.splitlines()) ['Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus nec magna nulla. ', 'Sed interdum diam at sem ultrices, nec suscipit massa lobortis. ', 'Fusce in leo finibus risus lacinia viverra. ', 'Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. ', 'Nam eget lorem ornare libero consequat tempus. ', 'Pellentesque sed odio at magna fringilla euismod a at enim. Fusce aliquet malesuada neque sit amet hendrerit.'] \u00d6rnekte oldu\u011fu gibi splitlines() metodu de\u011ferleri sat\u0131r sat\u0131r par\u00e7alad\u0131. lower() Bu metot de\u011fi\u015fkenin tuttu\u011fu de\u011ferlerin tamam\u0131n\u0131n k\u00fc\u00e7\u00fck harfe d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesini sa\u011fl\u0131yor. degisken = input(\"Bir kelime yaz\u0131n\u0131z: \") print(degisken.lower()) Bir kelime yaz\u0131n\u0131z: MERHABA merhaba Bu fonksiyonun k\u00fc\u00e7\u00fck bir problemi var. T\u00fcrk\u00e7e karakter duyarl\u0131l\u0131\u011f\u0131 yoktur. Bu durumu bilmekte fayda var. iller = \"ISPARTA, ADIYAMAN, D\u0130YARBAKIR, AYDIN, BALIKES\u0130R, A\u011eRI\" iller = iller.replace(\"I\", \"\u0131\").replace(\"\u0130\", \"i\").lower() print(iller) \u0131sparta, ad\u0131yaman, diyarbak\u0131r, ayd\u0131n, bal\u0131kesir, a\u011fr\u0131 upper() Bu metot de\u011fi\u015fkenin tuttu\u011fu de\u011ferlerin tamam\u0131n\u0131n b\u00fcy\u00fck harfe d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesini sa\u011fl\u0131yor. degisken = \"oku\" print(degisken.upper()) OKU Bu metodunda ayn\u0131 \u015fekilde T\u00fcrk\u00e7e karakter duyarl\u0131l\u0131\u011f\u0131 yoktur. Bu durumu bilmekte fayda var. iller = \"istanbul, izmir, siirt, mersin\" iller = iller.replace(\"i\", \"\u0130\").upper() print(iller) \u0130STANBUL, \u0130ZM\u0130R, S\u0130\u0130RT, MERS\u0130N islower() Bu metot bir de\u011fi\u015fkenin tuttu\u011fu de\u011ferin k\u00fc\u00e7\u00fck olup olmad\u0131\u011f\u0131n\u0131 kontrol ediyor. deger = \"Deger\" deger.islower() False deger = \"deger\" deger.islower() True isupper() Bu metot bir de\u011fi\u015fkenin tuttu\u011fu de\u011ferin b\u00fcy\u00fck olup olmad\u0131\u011f\u0131n\u0131 kontrol ediyor. deger = \"Deger\" deger.isupper() False deger = \"DEGER\" deger.isupper() True endswith() Bu metot yard\u0131m\u0131yla bir karakter dizisinin hangi karakter dizisi ile bitti\u011fini sorgulayabiliyoruz. \u00d6rne\u011fin: deger = \"deger\" deger.endswith(\"r\") True startswith() Bu metot yard\u0131m\u0131yla bir karakter dizisinin hangi karakter dizisi ile ba\u015flad\u0131\u011f\u0131n\u0131 sorgulayabiliyoruz. \u00d6rne\u011fin: deger = \"Deger\" deger.startswith(\"D\") True capitalize() Bu metot yard\u0131m\u0131yla bir karakter dizisinin sadece ilk harfini b\u00fcy\u00fctebiliriz. deger = \"deger\" deger.capitalize() 'Deger' title() Bu metot yard\u0131m\u0131yla bir karakter dizisinin ilk harflerini b\u00fcy\u00fctmektedir. deger = \"python programlama dili\" deger.title() 'Python Programlama Dili' swapcase() Bu metot bir karakter dizisi i\u00e7indeki b\u00fcy\u00fck harfleri k\u00fc\u00e7\u00fck harfe; k\u00fc\u00e7\u00fck harfleri de b\u00fcy\u00fck harfe d\u00f6n\u00fc\u015ft\u00fcr\u00fcr. \u00d6rne\u011fin: deger = \"PythoN\" deger.swapcase() 'pYTHOn' casefold() Bu metot lower() metoduna benzerdir. deger = \"DeGer\" deger.casefold() 'deger' strip() Bu metot karakter dizilerinde bulunan bo\u015fluklar\u0131 silmektedir. Ayn\u0131 zamanda bo\u015flu\u011fun haricinde bizim belirtti\u011fimiz de\u011fere g\u00f6re silme i\u015flemini yapmaktad\u0131r. deger = \"deger \" deger.strip() 'deger' strip() metodunun \u00f6n tan\u0131ml\u0131 olarak k\u0131rpt\u0131\u011f\u0131 karakterler: \u2018\u2018 bo\u015fluk karakteri \\t sekme (TAB) olu\u015fturan ka\u00e7\u0131\u015f dizisi \\n sat\u0131r ba\u015f\u0131na ge\u00e7iren ka\u00e7\u0131\u015f dizisi \\r imleci ayn\u0131 sat\u0131r\u0131n ba\u015f\u0131na d\u00f6nd\u00fcren ka\u00e7\u0131\u015f dizisi \\v d\u00fc\u015fey sekme olu\u015fturan ka\u00e7\u0131\u015f dizisi \\f yeni bir sayfaya ge\u00e7iren ka\u00e7\u0131\u015f dizisi E\u011fer istersek bizim verdi\u011fimi de\u011fere g\u00f6rede k\u0131rpma i\u015flemini ger\u00e7ekle\u015ftirebilir. \u00d6rne\u011fin: deger = \"Python\" deger.strip(\"P\") 'ython' lstrip() Bu metot strip() metodu ile ayn\u0131 i\u015flemi yapmaktad\u0131r. Fakat farkl\u0131 olarak sol tarafta bulunan gereksiz karakterleri siler. deger = \" Python \" deger.lstrip() 'Python ' Bir ba\u015fka \u00f6rnek: deger = \"Python P\" deger.lstrip(\"P\") 'ython P' rstrip() Bu metot strip() metodu ile ayn\u0131 i\u015flemi yapmaktad\u0131r. Fakat farkl\u0131 olarak sa\u011f tarafta bulunan gereksiz karakterleri siler. deger = \" Python \" deger.rstrip() ' Python' Bir ba\u015fka \u00f6rnek: deger = \"Python P\" deger.rstrip(\"P\") 'Python ' join() Bu metot karakter dizilerini birle\u015ftirmemize yarar. karakter = \"Python Programlama Dili\" bolunmus = karakter.split() print(bolunmus) ['Python', 'Programlama', 'Dili'] \u015eimdi tekrar birle\u015ftirelim. \" \".join(bolunmus) 'Python Programlama Dili' Burada bo\u015fluk karakterini kulland\u0131k. E\u011fer isterseniz daha farkl\u0131 karakterler kullanabilirsiniz. count() Bu metodun g\u00f6revi bir karakter dizisi i\u00e7inde belli bir karakterin ka\u00e7 kez ge\u00e7ti\u011fini sorgulamakt\u0131r deger = \"Fatih Sultan Mehmet 1453 y\u0131l\u0131nda \u0130stanbul'u fethetti.\" deger.count(\"a\") 4 Bu metot bir parametre daha almaktad\u0131r. Bu parametrede ka\u00e7\u0131nc\u0131 s\u0131radan ba\u015flayaca\u011f\u0131n\u0131 g\u00f6steriyor. deger.count(\"a\", 5) 3 index() Bu metot karakter dizisinde bulunan bir de\u011ferin ka\u00e7\u0131nc\u0131 indekste oldu\u011funu \u00f6\u011frenebilmemize yarar. deger = \"Fatih\" deger.index(\"F\") 0 index metodu ikinci bir parametre almaktad\u0131r. Bu parametre ka\u00e7\u0131nc\u0131 s\u0131radan aramaya ba\u015flayaca\u011f\u0131n\u0131 g\u00f6stermektedir. deger.index(\"i\",1) 3 Bu metot \u00fc\u00e7\u00fcnc\u00fc bir parametre daha almaktad\u0131r. Bu parametrede bir \u00f6nceki parametre ile dilimleme yap\u0131p, dilimlemenin yap\u0131ld\u0131\u011f\u0131 aral\u0131kta aramas\u0131n\u0131 belirtti\u011fimiz de\u011feri aramaktad\u0131r. deger.index(\"i\",1,4) 3 rindex() Bu metot karakter dizisini sa\u011fdan sola do\u011fru okur. deger.rindex(\"h\") 4 find() Bu metot index() metodu ile ayn\u0131 i\u015fi yapmaktad\u0131r. deger.find(\"i\") 3 rfind() Bu metot rindex() metodu ile ayn\u0131 i\u015fi yapmaktad\u0131r. deger.rfind(\"h\") 4 center() Bu metot karakter dizisini merkezde tutmam\u0131za yarar. deger = \"python\" deger.center(10) ' python ' Bu metot ikinci bir parametre almaktad\u0131r. Bu parametrede bo\u015flu\u011fun haricinde farkl\u0131 karakterlerde kullanabilmemizi sa\u011flamaktad\u0131r. deger.center(20,\"-\") '-------python-------' rjust() Bu metot bir karakter dizisini sa\u011fa yaslar. deger = \"python\" deger.rjust(10,\"-\") '----python' ljust() Bu metot bir dizisini sola yaslar. deger = \"python\" deger.ljust(10,\"-\") 'python----' zfill() Bu metot yard\u0131m\u0131yla karakter dizisinin sol taraf\u0131na istedi\u011fimiz say\u0131da s\u0131f\u0131r ekleyebiliriz. deger = \"python\" deger.zfill(10) '0000python' partition() Bu metot yard\u0131m\u0131yla karakter dizisini belli bir \u00f6l\u00e7\u00fcte g\u00f6re \u00fc\u00e7e ay\u0131r\u0131yoruz. deger = \"istanbul\" deger.partition(\"an\") ('ist', 'an', 'bul') rpartition() Bu metot yard\u0131m\u0131yla karakter dizisini sa\u011fdan sola do\u011fru belli bir \u00f6l\u00e7\u00fcte g\u00f6re \u00fc\u00e7e ay\u0131r\u0131yoruz. deger = \"adana\" deger.rpartition(\"a\") ('adan', 'a', '') encode() Bu metot yard\u0131m\u0131yla karakter dizilerimizi istedi\u011fimiz kodlama sistemine g\u00f6re kodlayabiliriz. \"fatih\".encode(\"cp1254\") b'fatih' expandtabs() Bu metot yard\u0131m\u0131yla karakter dizisi i\u00e7indeki sekme bo\u015fluklar\u0131n\u0131 geni\u015fletebiliyoruz. deger = \"elma\\tbir\\tmeyvedir\" deger.expandtabs(10) 'elma bir meyvedir' str.maketrans(), translate() Bu metotlar genelde beraber kullan\u0131ld\u0131\u011f\u0131 i\u00e7in buradada beraber kullanaca\u011f\u0131z. \u015eu \u015fekilde bir durum oldu\u011funu d\u00fc\u015f\u00fcnelim, internette bazen T\u00fcrk\u00e7e karakter kullanmamam\u0131z\u0131 gerektiren durumlar oluyor. B\u00f6yle bir durumu bu metodlar ile \u00e7\u00f6zece\u011fiz ve yazd\u0131\u011f\u0131m\u0131z T\u00fcrk\u00e7e karakter bar\u0131nd\u0131ran bir c\u00fcmleyi T\u00fcrk\u00e7e karakter bar\u0131nd\u0131rmayan bir hale getirecek. kaynak = \"\u015f\u00e7\u00f6\u011f\u00fc\u0131\u015e\u00c7\u00d6\u011e\u00dc\u0130\" hedef = \"scoguiSCOGUI\" \u00e7eviri_tablosu = str.maketrans(kaynak, hedef) metin = \"Bildi\u011finiz gibi, internet \u00fczerinde bazen T\u00fcrk\u00e7e karakterleri kullanam\u0131yoruz.\" print(metin.translate(\u00e7eviri_tablosu)) Bildiginiz gibi, internet uzerinde bazen Turkce karakterleri kullanamiyoruz. isalpha() Bu metot yard\u0131m\u0131 ile bir karakter dizisinin alfabetik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"a\u011fa\u00e7\" deger.isalpha() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: deger = \"A\u011fa\u00e71\" deger.isalpha() False isdigit() Bu metot yard\u0131m\u0131 ile bir karakter dizisinin n\u00fcmerik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"12345\" deger.isdigit() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: deger = \"A1\" deger.isdigit() False isalnum() Bu metot yard\u0131m\u0131 ile bir karakter dizisinin alfan\u00fcmerik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"a1\" deger.isalnum() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: deger = \"a1>\" deger.isalnum() False isdecimal() Bu metot yard\u0131m\u0131 ile bir karakter dizisinin ondal\u0131k say\u0131 cinsinden olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"123\" deger.isdecimal() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \"123.4\".isdecimal() False isidentifier() Bu metot ile neyin tan\u0131mlay\u0131c\u0131 olup neyin tan\u0131mlay\u0131c\u0131 olamayaca\u011f\u0131n\u0131 denetleyebiliriz. \"1a\".isidentifier() False Python'da de\u011fi\u015fkenler rakam ile ba\u015flayamaz bu y\u00fczden bu metod bizlere False de\u011ferini verdi. isnumeric() Bu metot ile bir karakter dizisinin n\u00fcmerik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. \"12\".isnumeric() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \"ad\".isnumeric() False isspace() Bu metot ile bir karakter dizisinin tamamen bo\u015fluklardan olu\u015fup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. \"Bu bir bo\u015fluk de\u011fil.\".isspace() False Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \" \".isspace() True isprintable() Bu metot ile bir karakterin bas\u0131labilen bir karakter mi yoksa bas\u0131lmayan bir karakter mi oldu\u011funu denetleyebiliriz. \"ahmet\".isprintable() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \"\\n\".isprintable() False Son G\u00fcncelleme: 18 Aral\u0131k 2019 - \u00c7ar\u015famba","title":"Karakter Dizilerinin Metotlar\u0131"},{"location":"python/python_karakter_dizilerinin_metotlari/#karakter-dizilerinin-metotlar","text":"","title":"Karakter Dizilerinin Metotlar\u0131"},{"location":"python/python_karakter_dizilerinin_metotlari/#replace","text":"Bu metot karakter dizisi i\u00e7erisinde de\u011fi\u015fiklikler yapabilmemizi sa\u011flar. Kullan\u0131m \u015fekli: karakter_dizisi.replace(eski_karakter_dizisi, yeni_karakter_dizisi). \u00d6rne\u011fin: kelime = \"elma\" kelime 'elma' kelime.replace(\"e\",\"E\") 'Elma' Bu fonksiyon ile karakter dizileri \u00fczerinde bir\u00e7ok de\u011fi\u015fiklik yapabilirsiniz.","title":"replace()"},{"location":"python/python_karakter_dizilerinin_metotlari/#split","text":"Bu metot karakter dizisi i\u00e7erisinde par\u00e7alama yapabilmemizi sa\u011flar. meyveler = \"Elma, Armut, Karpuz, Kiraz\" meyveler.split() ['Elma,', 'Armut,', 'Karpuz,', 'Kiraz'] meyveler de\u011fi\u015fkeninde bulunan i\u00e7eri\u011fi bo\u015flu\u011fa par\u00e7alad\u0131 fakat verdi\u011fi \u00e7\u0131kt\u0131 biraz problemli. Yani her i\u00e7erik virg\u00fcl ile beraber gelmi\u015f. Split fonksiyonuna neye g\u00f6re par\u00e7alamas\u0131n\u0131 s\u00f6ylersek onu baz alarak par\u00e7alama i\u015flemini yapar. meyveler.split(\",\") ['Elma', ' Armut', ' Karpuz', ' Kiraz'] veya bir harfe g\u00f6re par\u00e7alatabiliriz. meyveler.split(\"a\") ['Elm', ', Armut, K', 'rpuz, Kir', 'z'] split fonksiyonu ayn\u0131 zamanda ka\u00e7 kere b\u00f6lmesi gerekti\u011finide almaktad\u0131r. \u00d6rne\u011fin: meyveler.split(\",\",2) ['Elma', ' Armut', ' Karpuz, Kiraz']","title":"split()"},{"location":"python/python_karakter_dizilerinin_metotlari/#rsplit","text":"rsplit() metodunun split() metodundan fark\u0131 sa\u011fdan sola do\u011fru okumas\u0131d\u0131r. \u00d6rne\u011fin: meyveler.rsplit(\",\",2) ['Elma, Armut', ' Karpuz', ' Kiraz'] rsplit() metodu karakter dizisini b\u00f6lmeye sa\u011fdan ba\u015flad\u0131 ve sola do\u011fru gitti, split() metodundan fark\u0131 bu.","title":"rsplit()"},{"location":"python/python_karakter_dizilerinin_metotlari/#splitlines","text":"Bu metot veriyi sat\u0131r sat\u0131r b\u00f6le bilmemizi sa\u011flamaktad\u0131r. \u00d6rne\u011fin: lorem = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus nec magna nulla. Sed interdum diam at sem ultrices, nec suscipit massa lobortis. Fusce in leo finibus risus lacinia viverra. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam eget lorem ornare libero consequat tempus. Pellentesque sed odio at magna fringilla euismod a at enim. Fusce aliquet malesuada neque sit amet hendrerit.\"\"\" print(lorem.splitlines()) ['Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus nec magna nulla. ', 'Sed interdum diam at sem ultrices, nec suscipit massa lobortis. ', 'Fusce in leo finibus risus lacinia viverra. ', 'Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. ', 'Nam eget lorem ornare libero consequat tempus. ', 'Pellentesque sed odio at magna fringilla euismod a at enim. Fusce aliquet malesuada neque sit amet hendrerit.'] \u00d6rnekte oldu\u011fu gibi splitlines() metodu de\u011ferleri sat\u0131r sat\u0131r par\u00e7alad\u0131.","title":"splitlines()"},{"location":"python/python_karakter_dizilerinin_metotlari/#lower","text":"Bu metot de\u011fi\u015fkenin tuttu\u011fu de\u011ferlerin tamam\u0131n\u0131n k\u00fc\u00e7\u00fck harfe d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesini sa\u011fl\u0131yor. degisken = input(\"Bir kelime yaz\u0131n\u0131z: \") print(degisken.lower()) Bir kelime yaz\u0131n\u0131z: MERHABA merhaba Bu fonksiyonun k\u00fc\u00e7\u00fck bir problemi var. T\u00fcrk\u00e7e karakter duyarl\u0131l\u0131\u011f\u0131 yoktur. Bu durumu bilmekte fayda var. iller = \"ISPARTA, ADIYAMAN, D\u0130YARBAKIR, AYDIN, BALIKES\u0130R, A\u011eRI\" iller = iller.replace(\"I\", \"\u0131\").replace(\"\u0130\", \"i\").lower() print(iller) \u0131sparta, ad\u0131yaman, diyarbak\u0131r, ayd\u0131n, bal\u0131kesir, a\u011fr\u0131","title":"lower()"},{"location":"python/python_karakter_dizilerinin_metotlari/#upper","text":"Bu metot de\u011fi\u015fkenin tuttu\u011fu de\u011ferlerin tamam\u0131n\u0131n b\u00fcy\u00fck harfe d\u00f6n\u00fc\u015ft\u00fcr\u00fclmesini sa\u011fl\u0131yor. degisken = \"oku\" print(degisken.upper()) OKU Bu metodunda ayn\u0131 \u015fekilde T\u00fcrk\u00e7e karakter duyarl\u0131l\u0131\u011f\u0131 yoktur. Bu durumu bilmekte fayda var. iller = \"istanbul, izmir, siirt, mersin\" iller = iller.replace(\"i\", \"\u0130\").upper() print(iller) \u0130STANBUL, \u0130ZM\u0130R, S\u0130\u0130RT, MERS\u0130N","title":"upper()"},{"location":"python/python_karakter_dizilerinin_metotlari/#islower","text":"Bu metot bir de\u011fi\u015fkenin tuttu\u011fu de\u011ferin k\u00fc\u00e7\u00fck olup olmad\u0131\u011f\u0131n\u0131 kontrol ediyor. deger = \"Deger\" deger.islower() False deger = \"deger\" deger.islower() True","title":"islower()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isupper","text":"Bu metot bir de\u011fi\u015fkenin tuttu\u011fu de\u011ferin b\u00fcy\u00fck olup olmad\u0131\u011f\u0131n\u0131 kontrol ediyor. deger = \"Deger\" deger.isupper() False deger = \"DEGER\" deger.isupper() True","title":"isupper()"},{"location":"python/python_karakter_dizilerinin_metotlari/#endswith","text":"Bu metot yard\u0131m\u0131yla bir karakter dizisinin hangi karakter dizisi ile bitti\u011fini sorgulayabiliyoruz. \u00d6rne\u011fin: deger = \"deger\" deger.endswith(\"r\") True","title":"endswith()"},{"location":"python/python_karakter_dizilerinin_metotlari/#startswith","text":"Bu metot yard\u0131m\u0131yla bir karakter dizisinin hangi karakter dizisi ile ba\u015flad\u0131\u011f\u0131n\u0131 sorgulayabiliyoruz. \u00d6rne\u011fin: deger = \"Deger\" deger.startswith(\"D\") True","title":"startswith()"},{"location":"python/python_karakter_dizilerinin_metotlari/#capitalize","text":"Bu metot yard\u0131m\u0131yla bir karakter dizisinin sadece ilk harfini b\u00fcy\u00fctebiliriz. deger = \"deger\" deger.capitalize() 'Deger'","title":"capitalize()"},{"location":"python/python_karakter_dizilerinin_metotlari/#title","text":"Bu metot yard\u0131m\u0131yla bir karakter dizisinin ilk harflerini b\u00fcy\u00fctmektedir. deger = \"python programlama dili\" deger.title() 'Python Programlama Dili'","title":"title()"},{"location":"python/python_karakter_dizilerinin_metotlari/#swapcase","text":"Bu metot bir karakter dizisi i\u00e7indeki b\u00fcy\u00fck harfleri k\u00fc\u00e7\u00fck harfe; k\u00fc\u00e7\u00fck harfleri de b\u00fcy\u00fck harfe d\u00f6n\u00fc\u015ft\u00fcr\u00fcr. \u00d6rne\u011fin: deger = \"PythoN\" deger.swapcase() 'pYTHOn'","title":"swapcase()"},{"location":"python/python_karakter_dizilerinin_metotlari/#casefold","text":"Bu metot lower() metoduna benzerdir. deger = \"DeGer\" deger.casefold() 'deger'","title":"casefold()"},{"location":"python/python_karakter_dizilerinin_metotlari/#strip","text":"Bu metot karakter dizilerinde bulunan bo\u015fluklar\u0131 silmektedir. Ayn\u0131 zamanda bo\u015flu\u011fun haricinde bizim belirtti\u011fimiz de\u011fere g\u00f6re silme i\u015flemini yapmaktad\u0131r. deger = \"deger \" deger.strip() 'deger' strip() metodunun \u00f6n tan\u0131ml\u0131 olarak k\u0131rpt\u0131\u011f\u0131 karakterler: \u2018\u2018 bo\u015fluk karakteri \\t sekme (TAB) olu\u015fturan ka\u00e7\u0131\u015f dizisi \\n sat\u0131r ba\u015f\u0131na ge\u00e7iren ka\u00e7\u0131\u015f dizisi \\r imleci ayn\u0131 sat\u0131r\u0131n ba\u015f\u0131na d\u00f6nd\u00fcren ka\u00e7\u0131\u015f dizisi \\v d\u00fc\u015fey sekme olu\u015fturan ka\u00e7\u0131\u015f dizisi \\f yeni bir sayfaya ge\u00e7iren ka\u00e7\u0131\u015f dizisi E\u011fer istersek bizim verdi\u011fimi de\u011fere g\u00f6rede k\u0131rpma i\u015flemini ger\u00e7ekle\u015ftirebilir. \u00d6rne\u011fin: deger = \"Python\" deger.strip(\"P\") 'ython'","title":"strip()"},{"location":"python/python_karakter_dizilerinin_metotlari/#lstrip","text":"Bu metot strip() metodu ile ayn\u0131 i\u015flemi yapmaktad\u0131r. Fakat farkl\u0131 olarak sol tarafta bulunan gereksiz karakterleri siler. deger = \" Python \" deger.lstrip() 'Python ' Bir ba\u015fka \u00f6rnek: deger = \"Python P\" deger.lstrip(\"P\") 'ython P'","title":"lstrip()"},{"location":"python/python_karakter_dizilerinin_metotlari/#rstrip","text":"Bu metot strip() metodu ile ayn\u0131 i\u015flemi yapmaktad\u0131r. Fakat farkl\u0131 olarak sa\u011f tarafta bulunan gereksiz karakterleri siler. deger = \" Python \" deger.rstrip() ' Python' Bir ba\u015fka \u00f6rnek: deger = \"Python P\" deger.rstrip(\"P\") 'Python '","title":"rstrip()"},{"location":"python/python_karakter_dizilerinin_metotlari/#join","text":"Bu metot karakter dizilerini birle\u015ftirmemize yarar. karakter = \"Python Programlama Dili\" bolunmus = karakter.split() print(bolunmus) ['Python', 'Programlama', 'Dili'] \u015eimdi tekrar birle\u015ftirelim. \" \".join(bolunmus) 'Python Programlama Dili' Burada bo\u015fluk karakterini kulland\u0131k. E\u011fer isterseniz daha farkl\u0131 karakterler kullanabilirsiniz.","title":"join()"},{"location":"python/python_karakter_dizilerinin_metotlari/#count","text":"Bu metodun g\u00f6revi bir karakter dizisi i\u00e7inde belli bir karakterin ka\u00e7 kez ge\u00e7ti\u011fini sorgulamakt\u0131r deger = \"Fatih Sultan Mehmet 1453 y\u0131l\u0131nda \u0130stanbul'u fethetti.\" deger.count(\"a\") 4 Bu metot bir parametre daha almaktad\u0131r. Bu parametrede ka\u00e7\u0131nc\u0131 s\u0131radan ba\u015flayaca\u011f\u0131n\u0131 g\u00f6steriyor. deger.count(\"a\", 5) 3","title":"count()"},{"location":"python/python_karakter_dizilerinin_metotlari/#index","text":"Bu metot karakter dizisinde bulunan bir de\u011ferin ka\u00e7\u0131nc\u0131 indekste oldu\u011funu \u00f6\u011frenebilmemize yarar. deger = \"Fatih\" deger.index(\"F\") 0 index metodu ikinci bir parametre almaktad\u0131r. Bu parametre ka\u00e7\u0131nc\u0131 s\u0131radan aramaya ba\u015flayaca\u011f\u0131n\u0131 g\u00f6stermektedir. deger.index(\"i\",1) 3 Bu metot \u00fc\u00e7\u00fcnc\u00fc bir parametre daha almaktad\u0131r. Bu parametrede bir \u00f6nceki parametre ile dilimleme yap\u0131p, dilimlemenin yap\u0131ld\u0131\u011f\u0131 aral\u0131kta aramas\u0131n\u0131 belirtti\u011fimiz de\u011feri aramaktad\u0131r. deger.index(\"i\",1,4) 3","title":"index()"},{"location":"python/python_karakter_dizilerinin_metotlari/#rindex","text":"Bu metot karakter dizisini sa\u011fdan sola do\u011fru okur. deger.rindex(\"h\") 4","title":"rindex()"},{"location":"python/python_karakter_dizilerinin_metotlari/#find","text":"Bu metot index() metodu ile ayn\u0131 i\u015fi yapmaktad\u0131r. deger.find(\"i\") 3","title":"find()"},{"location":"python/python_karakter_dizilerinin_metotlari/#rfind","text":"Bu metot rindex() metodu ile ayn\u0131 i\u015fi yapmaktad\u0131r. deger.rfind(\"h\") 4","title":"rfind()"},{"location":"python/python_karakter_dizilerinin_metotlari/#center","text":"Bu metot karakter dizisini merkezde tutmam\u0131za yarar. deger = \"python\" deger.center(10) ' python ' Bu metot ikinci bir parametre almaktad\u0131r. Bu parametrede bo\u015flu\u011fun haricinde farkl\u0131 karakterlerde kullanabilmemizi sa\u011flamaktad\u0131r. deger.center(20,\"-\") '-------python-------'","title":"center()"},{"location":"python/python_karakter_dizilerinin_metotlari/#rjust","text":"Bu metot bir karakter dizisini sa\u011fa yaslar. deger = \"python\" deger.rjust(10,\"-\") '----python'","title":"rjust()"},{"location":"python/python_karakter_dizilerinin_metotlari/#ljust","text":"Bu metot bir dizisini sola yaslar. deger = \"python\" deger.ljust(10,\"-\") 'python----'","title":"ljust()"},{"location":"python/python_karakter_dizilerinin_metotlari/#zfill","text":"Bu metot yard\u0131m\u0131yla karakter dizisinin sol taraf\u0131na istedi\u011fimiz say\u0131da s\u0131f\u0131r ekleyebiliriz. deger = \"python\" deger.zfill(10) '0000python'","title":"zfill()"},{"location":"python/python_karakter_dizilerinin_metotlari/#partition","text":"Bu metot yard\u0131m\u0131yla karakter dizisini belli bir \u00f6l\u00e7\u00fcte g\u00f6re \u00fc\u00e7e ay\u0131r\u0131yoruz. deger = \"istanbul\" deger.partition(\"an\") ('ist', 'an', 'bul')","title":"partition()"},{"location":"python/python_karakter_dizilerinin_metotlari/#rpartition","text":"Bu metot yard\u0131m\u0131yla karakter dizisini sa\u011fdan sola do\u011fru belli bir \u00f6l\u00e7\u00fcte g\u00f6re \u00fc\u00e7e ay\u0131r\u0131yoruz. deger = \"adana\" deger.rpartition(\"a\") ('adan', 'a', '')","title":"rpartition()"},{"location":"python/python_karakter_dizilerinin_metotlari/#encode","text":"Bu metot yard\u0131m\u0131yla karakter dizilerimizi istedi\u011fimiz kodlama sistemine g\u00f6re kodlayabiliriz. \"fatih\".encode(\"cp1254\") b'fatih'","title":"encode()"},{"location":"python/python_karakter_dizilerinin_metotlari/#expandtabs","text":"Bu metot yard\u0131m\u0131yla karakter dizisi i\u00e7indeki sekme bo\u015fluklar\u0131n\u0131 geni\u015fletebiliyoruz. deger = \"elma\\tbir\\tmeyvedir\" deger.expandtabs(10) 'elma bir meyvedir'","title":"expandtabs()"},{"location":"python/python_karakter_dizilerinin_metotlari/#strmaketrans-translate","text":"Bu metotlar genelde beraber kullan\u0131ld\u0131\u011f\u0131 i\u00e7in buradada beraber kullanaca\u011f\u0131z. \u015eu \u015fekilde bir durum oldu\u011funu d\u00fc\u015f\u00fcnelim, internette bazen T\u00fcrk\u00e7e karakter kullanmamam\u0131z\u0131 gerektiren durumlar oluyor. B\u00f6yle bir durumu bu metodlar ile \u00e7\u00f6zece\u011fiz ve yazd\u0131\u011f\u0131m\u0131z T\u00fcrk\u00e7e karakter bar\u0131nd\u0131ran bir c\u00fcmleyi T\u00fcrk\u00e7e karakter bar\u0131nd\u0131rmayan bir hale getirecek. kaynak = \"\u015f\u00e7\u00f6\u011f\u00fc\u0131\u015e\u00c7\u00d6\u011e\u00dc\u0130\" hedef = \"scoguiSCOGUI\" \u00e7eviri_tablosu = str.maketrans(kaynak, hedef) metin = \"Bildi\u011finiz gibi, internet \u00fczerinde bazen T\u00fcrk\u00e7e karakterleri kullanam\u0131yoruz.\" print(metin.translate(\u00e7eviri_tablosu)) Bildiginiz gibi, internet uzerinde bazen Turkce karakterleri kullanamiyoruz.","title":"str.maketrans(), translate()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isalpha","text":"Bu metot yard\u0131m\u0131 ile bir karakter dizisinin alfabetik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"a\u011fa\u00e7\" deger.isalpha() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: deger = \"A\u011fa\u00e71\" deger.isalpha() False","title":"isalpha()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isdigit","text":"Bu metot yard\u0131m\u0131 ile bir karakter dizisinin n\u00fcmerik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"12345\" deger.isdigit() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: deger = \"A1\" deger.isdigit() False","title":"isdigit()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isalnum","text":"Bu metot yard\u0131m\u0131 ile bir karakter dizisinin alfan\u00fcmerik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"a1\" deger.isalnum() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: deger = \"a1>\" deger.isalnum() False","title":"isalnum()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isdecimal","text":"Bu metot yard\u0131m\u0131 ile bir karakter dizisinin ondal\u0131k say\u0131 cinsinden olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. deger = \"123\" deger.isdecimal() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \"123.4\".isdecimal() False","title":"isdecimal()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isidentifier","text":"Bu metot ile neyin tan\u0131mlay\u0131c\u0131 olup neyin tan\u0131mlay\u0131c\u0131 olamayaca\u011f\u0131n\u0131 denetleyebiliriz. \"1a\".isidentifier() False Python'da de\u011fi\u015fkenler rakam ile ba\u015flayamaz bu y\u00fczden bu metod bizlere False de\u011ferini verdi.","title":"isidentifier()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isnumeric","text":"Bu metot ile bir karakter dizisinin n\u00fcmerik olup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. \"12\".isnumeric() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \"ad\".isnumeric() False","title":"isnumeric()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isspace","text":"Bu metot ile bir karakter dizisinin tamamen bo\u015fluklardan olu\u015fup olmad\u0131\u011f\u0131n\u0131 denetleyebiliriz. \"Bu bir bo\u015fluk de\u011fil.\".isspace() False Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \" \".isspace() True","title":"isspace()"},{"location":"python/python_karakter_dizilerinin_metotlari/#isprintable","text":"Bu metot ile bir karakterin bas\u0131labilen bir karakter mi yoksa bas\u0131lmayan bir karakter mi oldu\u011funu denetleyebiliriz. \"ahmet\".isprintable() True Bir ba\u015fka \u00f6rne\u011fe bakal\u0131m: \"\\n\".isprintable() False Son G\u00fcncelleme: 18 Aral\u0131k 2019 - \u00c7ar\u015famba","title":"isprintable()"},{"location":"python/python_kumeler_dondurulmus_kumeler/","text":"K\u00fcmeler ve Dondurulmu\u015f K\u00fcmeler Bu b\u00f6l\u00fcmde k\u00fcmeler d\u0131\u015f\u0131nda, bir de dondurulmu\u015f k\u00fcmelerden s\u00f6z edece\u011fiz. Bu iki veri tipi birbiriyle ili\u015fkilidir. K\u00fcmeler Ad\u0131ndan da az \u00e7ok tahmin edebilece\u011finiz gibi k\u00fcmeler, matematikten bildi\u011fimiz \u201ck\u00fcme\u201d kavram\u0131yla s\u0131k\u0131 s\u0131k\u0131ya ba\u011flant\u0131l\u0131d\u0131r. Bu veri tipi, matematikteki k\u00fcmelerin sahip oldu\u011fu b\u00fct\u00fcn \u00f6zellikleri ta\u015f\u0131r. Yani matematikteki k\u00fcmelerden bildi\u011fimiz kesi\u015fim, birle\u015fim ve fark gibi \u00f6zellikler Python\u2019daki k\u00fcmeler i\u00e7in de ge\u00e7erlidir. K\u00fcme Olu\u015fturmak K\u00fcme olu\u015fturmak \u00e7ok kolay bir i\u015flemdir. \u00d6rne\u011fin bo\u015f bir k\u00fcmeyi \u015f\u00f6yle olu\u015fturuyoruz: bos_kume = set() Listeler, demetler ve s\u00f6zl\u00fcklerin aksine k\u00fcmelerin ay\u0131rt edici bir i\u015fareti yoktur. K\u00fcme olu\u015fturmak i\u00e7in set() adl\u0131 \u00f6zel bir fonksiyondan yararlan\u0131yoruz. type(bos_kume) set G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, Python programlama dilinde k\u00fcmeler set ifadesiyle g\u00f6steriliyor. \u0130\u00e7inde \u00f6\u011fe de bar\u0131nd\u0131ran k\u00fcmeleri ise \u015fu \u015fekilde olu\u015fturuyoruz: kume = set([\"elma\", \"armut\", \"kebap\"]) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi set() fonksiyonu i\u00e7indeki \u00f6\u011feler bir liste i\u00e7inde yer al\u0131yor. Dolay\u0131s\u0131yla yukar\u0131daki tan\u0131mlamay\u0131 \u015f\u00f6yle de yapabiliriz: liste = [\"elma\", \"armut\", \"kebap\"] kume = set(liste) Elbette k\u00fcme tan\u0131mlamak i\u00e7in mutlaka liste kullanmak zorunda de\u011filiz. \u0130stersek demetleri de k\u00fcme haline getirebiliriz: demet = (\"elma\", \"armut\", \"kebap\") kume = set(demet) Hatta ve hatta karakter dizilerinden dahi k\u00fcme yapabiliriz: kardiz = \"Python Programlama Dili i\u00e7in T\u00fcrk\u00e7e Kaynak\" kume = set(kardiz) Kulland\u0131\u011f\u0131m\u0131z karakter dizisinin b\u00f6yle uzun olmas\u0131na da gerek yok. Tek karakterlik dizilerden bile k\u00fcme olu\u015fturabiliriz: kardiz = \"a\" kume = set(kardiz) Ama say\u0131lardan k\u00fcme olu\u015fturamay\u0131z: n = 10 kume = set(n) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-8-ffda9229f4d1> in <module> 1 n = 10 2 ----> 3 kume = set(n) TypeError: 'int' object is not iterable Peki s\u00f6zl\u00fckleri kullanarak k\u00fcme olu\u015fturabilir miyiz? Elbette, neden olmas\u0131n? bilgi = {\"i\u015fletim sistemi\": \"GNU\", \"sistem \u00e7ekirde\u011fi\": \"Linux\", \"da\u011f\u0131t\u0131m\": \"Ubuntu GNU/Linux\"} kume = set(bilgi) K\u00fcme olu\u015fturman\u0131n son bir y\u00f6nteminden daha s\u00f6z edelim. En ba\u015fta s\u00f6yledi\u011fimiz gibi, listeler, demetler, s\u00f6zl\u00fckler ve karakter dizilerinin aksine k\u00fcmelerin [ ], ( ), { }, \u2018 \u2018 gibi ay\u0131rt edici bir i\u015fareti yoktur. Ama e\u011fer istersek s\u00f6zl\u00fckleri olu\u015fturmak i\u00e7in kulland\u0131\u011f\u0131m\u0131z \u00f6zel i\u015faretleri k\u00fcme olu\u015fturmak i\u00e7in de kullanabiliriz. kume = {'Python', 'C++', 'Ruby', 'PHP'} type(kume) set Ancak bu yap\u0131y\u0131 kullanarak bo\u015f bir k\u00fcme olu\u015fturamazs\u0131n\u0131z: kume = {} type(kume) dict Bo\u015f bir k\u00fcme olu\u015fturmak i\u00e7in set() fonksiyonunu kullanman\u0131z gerekmektedir: kume = set(kume) type(kume) set E\u011fer olu\u015fturdu\u011funuz k\u00fcmeyi ekrana yazd\u0131rmak isterseniz: kume {'C++', 'PHP', 'Python', 'Ruby'} Bu arada, bir s\u00f6zl\u00fc\u011f\u00fc k\u00fcmeye \u00e7evirdi\u011finizde, elbette s\u00f6zl\u00fc\u011f\u00fcn yaln\u0131zca anahtarlar\u0131 k\u00fcmeye eklenecektir. S\u00f6zl\u00fc\u011f\u00fcn de\u011ferleri ise b\u00f6yle bir i\u015flemin sonucunda ortadan kaybolur. E\u011fer bir s\u00f6zl\u00fc\u011f\u00fc k\u00fcmeye \u00e7evirirken hem anahtarlar\u0131 hem de de\u011ferleri korumak gibi bir niyetiniz varsa \u015f\u00f6yle bir \u015fey yazabilirsiniz: bilgi = {\"i\u015fletim sistemi\": \"GNU\", \"sistem \u00e7ekirde\u011fi\": \"Linux\", \"da\u011f\u0131t\u0131m\": \"Ubuntu GNU/Linux\"} Bu s\u00f6zl\u00fckteki anahtar-de\u011fer \u00e7iftlerini bir k\u00fcme i\u00e7ine, \u00e7ift \u00f6\u011feli demetler olarak yerle\u015ftirebiliriz: liste = [(anahtar, de\u011fer) for anahtar, de\u011fer in bilgi.items()] kume = set(liste) kume {('da\u011f\u0131t\u0131m', 'Ubuntu GNU/Linux'), ('i\u015fletim sistemi', 'GNU'), ('sistem \u00e7ekirde\u011fi', 'Linux')} K\u00fcmelerin Yap\u0131s\u0131 \u00d6rne\u011fin \u015f\u00f6yle bir k\u00fcme tan\u0131mlayal\u0131m: kardiz = \"Python Programlama Dili\" kume = set(kardiz) print(kume) {'t', 'a', 'o', 'm', 'h', 'D', 'r', ' ', 'g', 'n', 'l', 'y', 'i', 'P'} Burada bir \u015fey dikkatinizi \u00e7ekmi\u015f olmal\u0131. Bir \u00f6\u011feyi k\u00fcme olarak tan\u0131mlay\u0131p ekrana yazd\u0131rd\u0131\u011f\u0131m\u0131zda elde etti\u011fimiz \u00e7\u0131kt\u0131, o \u00f6\u011fe i\u00e7indeki her bir alt \u00f6\u011feyi tek bir kez i\u00e7eriyor. Yani mesela \u201cPython Programlama Dili\u201d i\u00e7inde iki adet \u201cP\u201d karakteri var, ama \u00e7\u0131kt\u0131da bu iki \u201cP\u201d karakterinin yaln\u0131zca biri g\u00f6r\u00fcn\u00fcyor. Buradan anl\u0131yoruz ki, k\u00fcmeler ayn\u0131 \u00f6\u011feyi birden fazla tekrar etmez. Bu \u00e7ok \u00f6nemli bir \u00f6zelliktir ve pek \u00e7ok yerde i\u015fimize yarar. Ayn\u0131 durum karakter dizisi d\u0131\u015f\u0131nda kalan \u00f6teki veri tipleri i\u00e7in de ge\u00e7erlidir. Yani mesela e\u011fer bir listeyi k\u00fcme haline getiriyorsak, o listedeki \u00f6\u011feler k\u00fcme i\u00e7inde yaln\u0131zca bir kez ge\u00e7ecektir. Listede ayn\u0131 \u00f6\u011feden iki-\u00fc\u00e7 tane bulunsa bile, k\u00fcmemiz bu \u00f6\u011feleri teke indirecektir. K\u00fcme \u00dcrete\u00e7leri (SetComprehensions) Liste \u00fcrete\u00e7lerini ve s\u00f6zl\u00fck \u00fcrete\u00e7lerini kullanarak nas\u0131l tek sat\u0131rda ve h\u0131zl\u0131 bir \u015fekilde listeler ve s\u00f6zl\u00fckler \u00fcretebiliyorsak, ayn\u0131 \u015fekilde k\u00fcme \u00fcrete\u00e7lerini kullanarak tek sat\u0131rda ve h\u0131zl\u0131 bir \u015fekilde k\u00fcmeler de \u00fcretebiliriz. import random liste = [random.randint(0, 10000) for i in range(1000)] kume = {i for i in liste if i < 100} print(kume) {64, 97, 3, 36, 42, 43, 44, 16, 61} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, k\u00fcme \u00fcrete\u00e7lerinin s\u00f6zdizimi, liste ve s\u00f6zl\u00fck \u00fcrete\u00e7lerinin s\u00f6zdizimine \u00e7ok benziyor. K\u00fcmelerin Metotlar\u0131 K\u00fcmeler ile kullan\u0131labilen metotlara bakal\u0131m: dir(set) ['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update'] Hemen i\u015fimize yarayacak metotlar\u0131 alal\u0131m: for i in dir(set): if \"__\" not in i: print(i) add clear copy difference difference_update discard intersection intersection_update isdisjoint issubset issuperset pop remove symmetric_difference symmetric_difference_update union update clear() K\u00fcmelerle ilgili olarak inceleyece\u011fimiz ilk metot clear(). Bu metodu daha \u00f6nce s\u00f6zl\u00fckleri \u00e7al\u0131\u015f\u0131rken de g\u00f6rm\u00fc\u015ft\u00fck. S\u00f6zl\u00fcklerde bu metodun g\u00f6revi s\u00f6zl\u00fc\u011f\u00fcn i\u00e7ini bo\u015faltmak idi. Burada da ayn\u0131 vazifeyi g\u00f6r\u00fcr: km = set(\"ankara\") for i in km: print(i) k a r n km.clear() km set() Burada \u00f6nce \u201ckm\u201d adl\u0131 bir k\u00fcme olu\u015fturduk. Daha sonra da clear() metodunu kullanarak bu k\u00fcmenin b\u00fct\u00fcn \u00f6\u011felerini sildik. Art\u0131k elimizde bo\u015f bir k\u00fcme var. copy() Listeler ve s\u00f6zl\u00fckleri incelerken copy() adl\u0131 bir metot \u00f6\u011frenmi\u015ftik. Bu metot ayn\u0131 zamanda k\u00fcmelerle birlikte de kullan\u0131labilir. \u00dcstelik i\u015flevi de ayn\u0131d\u0131r: km = set(\"kahramanmara\u015f\") yedek = km.copy() yedek {'a', 'h', 'k', 'm', 'n', 'r', '\u015f'} add() Add kelimesi T\u00fcrk\u00e7e\u2019de \u201ceklemek\u201d anlam\u0131na gelir. Ad\u0131ndan da anla\u015f\u0131laca\u011f\u0131 gibi, bu metot yard\u0131m\u0131yla k\u00fcmelerimize yeni \u00f6\u011feler ilave edebilece\u011fiz. Hemen bunun nas\u0131l kullan\u0131ld\u0131\u011f\u0131na bakal\u0131m: kume = set([\"elma\", \"armut\", \"kebap\"]) kume.add(\"\u00e7ilek\") print(kume) {'elma', '\u00e7ilek', 'armut', 'kebap'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, add() metodunu kullanarak, k\u00fcmemize \u00e7ilek adl\u0131 yeni bir \u00f6\u011fe ekledik. E\u011fer k\u00fcmede zaten varolan bir \u00f6\u011fe eklemeye \u00e7al\u0131\u015f\u0131rsak k\u00fcmede herhangi bir de\u011fi\u015fiklik olmayacakt\u0131r. \u00c7\u00fcnk\u00fc, daha \u00f6nce de s\u00f6yledi\u011fimiz gibi, k\u00fcmeler her bir \u00f6\u011feyi tek bir say\u0131da bar\u0131nd\u0131r\u0131r. Bu arada, yeri gelmi\u015fken k\u00fcmelerin \u00f6nemli bir \u00f6zelli\u011finden daha s\u00f6z edelim. Bir k\u00fcmeye herhangi bir \u00f6\u011fe ekleyebilmemiz i\u00e7in, o \u00f6\u011fenin de\u011fi\u015ftirilemeyen (immutable) bir veri tipi olmas\u0131 gerekiyor. Bildi\u011finiz gibi Python\u2019daki \u015fu veri tipleri de\u011fi\u015ftirilemeyen veri tipleridir: Demetler Say\u0131lar Karakter Dizileri \u015eu veri tipleri ise de\u011fi\u015ftirilebilen veri tipleridir: Listeler S\u00f6zl\u00fckler K\u00fcmeler Dolay\u0131s\u0131yla bir k\u00fcmeye ancak \u015fu veri tiplerini ekleyebiliriz: Demetler Say\u0131lar Karakter Dizileri difference() Bu metot iki k\u00fcmenin fark\u0131n\u0131 almam\u0131z\u0131 sa\u011flar. \u00d6rne\u011fin: k1 = set([1, 2, 3, 5]) k2 = set([3, 4, 2, 10]) k1.difference(k2) {1, 5} Demek ki k1\u2019in k2\u2019den fark\u0131 buymu\u015f. Peki k2\u2019nin k1\u2019den fark\u0131n\u0131 bulmak istersek ne yapaca\u011f\u0131z? k2.difference(k1) {4, 10} \u0130sterseniz uzun uzun difference() metodunu kullanmak yerine sadece eksi (-) i\u015faretini kullanarak da ayn\u0131 sonucu elde edebilirsiniz: k1 - k2 {1, 5} ...veya... k2 - k1 {4, 10} Hay\u0131r, \u201cmadem eksi i\u015faretini kullanabiliyoruz, o halde art\u0131 i\u015faretini de kullanabiliriz! \u201d gibi bir fikir do\u011fru de\u011fildir. difference_update() Bu metot, difference() metodundan elde edilen sonuca g\u00f6re bir k\u00fcmenin g\u00fcncellenmesini sa\u011flar. Yani? Hemen bir \u00f6rnek verelim: k1 = set([1, 2, 3]) k2 = set([1, 3, 5]) k1.difference_update(k2) print(k1) {2} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bu metot k1\u2019in k2\u2019den fark\u0131n\u0131 ald\u0131 ve bu fark\u0131 kullanarak k1\u2019i yeniden olu\u015fturdu. k1 ile k2 aras\u0131ndaki tek fark 2 adl\u0131 \u00f6\u011fe idi. Dolay\u0131s\u0131yla difference_update() metodunu uygulad\u0131\u011f\u0131m\u0131zda k1\u2019in \u00f6\u011felerinin silinip yerlerine 2 adl\u0131 \u00f6\u011fenin geldi\u011fini g\u00f6r\u00fcyoruz. discard() Bu metot k\u00fcmeden \u00f6\u011fe silmemizi sa\u011flayacak: hayvanlar = set([\"kedi\", \"k\u00f6pek\", \"at\", \"ku\u015f\", \"inek\", \"deve\"]) hayvanlar.discard(\"kedi\") print(hayvanlar) {'inek', 'deve', 'ku\u015f', 'at', 'k\u00f6pek'} E\u011fer k\u00fcme i\u00e7inde bulunmayan bir \u00f6\u011fe silmeye \u00e7al\u0131\u015f\u0131rsak hi\u00e7 bir \u015fey olmaz. Yani hata mesaj\u0131 almay\u0131z: hayvanlar.discard(\"y\u0131lan\") Burada etkile\u015fimli kabuk sessizce bir alt sat\u0131ra ge\u00e7ecektir. Bu metodun en \u00f6nemli \u00f6zelli\u011fi budur. Yani olmayan bir \u00f6\u011feyi silmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131zda hata vermemesi. remove() E\u011fer bir k\u00fcmeden \u00f6\u011fe silmek istersek remove() metodunu da kullanabiliriz: hayvanlar.remove(\"k\u00f6pek\") Peki discard() varken remove() metoduna ne gerek var? Ya da tersi. Bu iki metot ayn\u0131 i\u015flevi yerine getirse de aralar\u0131nda \u00f6nemli bir fark vard\u0131r. Hat\u0131rlarsan\u0131z discard() metoduyla, k\u00fcmede olmayan bir \u00f6\u011feyi silmeye \u00e7al\u0131\u015f\u0131rsak herhangi bir hata mesaj\u0131 almayaca\u011f\u0131m\u0131z\u0131 s\u00f6ylemi\u015ftik. E\u011fer remove() metodunu kullanarak, k\u00fcmede olmayan bir \u00f6\u011feyi silmeye \u00e7al\u0131\u015f\u0131rsak, discard() metodunun aksine, hata mesaj\u0131 al\u0131r\u0131z: hayvanlar.remove(\"fare\") --------------------------------------------------------------------------- KeyError Traceback (most recent call last) <ipython-input-45-65ebbfa6250f> in <module> ----> 1 hayvanlar.remove(\"fare\") KeyError: 'fare' intersection() intersection kelimesi T\u00fcrk\u00e7e\u2019de \u201ckesi\u015fim\u201d anlam\u0131na gelir. Ad\u0131ndan da anlad\u0131\u011f\u0131m\u0131z gibi, intersection() metodu bize iki k\u00fcmenin kesi\u015fim k\u00fcmesini verecektir: k1 = set([1, 2, 3, 4]) k2 = set([1, 3, 5, 7]) k1.intersection(k2) {1, 3} \u0130ki k\u00fcmenin kesi\u015fimini bulmak i\u00e7in \u201c&\u201d i\u015faretinden yararlanabiliriz: k1 & k2 {1, 3} intersection_update() Bu metodun g\u00f6revi, intersection() metodundan elde edilen sonuca g\u00f6re bir k\u00fcmenin g\u00fcncellenmesini sa\u011flamakt\u0131r: k1 = set([1, 2, 3]) k2 = set([1, 3, 5]) k1.intersection_update(k2) print(k1) {1, 3} print(k2) {1, 3, 5} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, intersection_update() metodu k1\u2019in b\u00fct\u00fcn \u00f6\u011felerini sildi ve yerlerine k1 ve k2\u2019nin kesi\u015fim k\u00fcmesinin elemanlar\u0131n\u0131 koydu. isdisjoint() Bu metodun \u00e7ok basit bir g\u00f6revi vard\u0131r. isdisjoint() metodunu kullanarak iki k\u00fcmenin kesi\u015fim k\u00fcmesinin bo\u015f olup olmad\u0131\u011f\u0131 sorgulayabilirsiniz. a = set([1, 2, 3]) b = set([2, 4, 6]) a.isdisjoint(b) False issubset() Bu metot yard\u0131m\u0131yla, bir k\u00fcmenin b\u00fct\u00fcn elemanlar\u0131n\u0131n ba\u015fka bir k\u00fcme i\u00e7inde yer al\u0131p yer almad\u0131\u011f\u0131n\u0131 sorgulayabiliriz. Yani bir k\u00fcmenin, ba\u015fka bir k\u00fcmenin alt k\u00fcmesi olup olmad\u0131\u011f\u0131n\u0131 bu metot yard\u0131m\u0131yla \u00f6\u011frenebiliriz. E\u011fer bir k\u00fcme ba\u015fka bir k\u00fcmenin alt k\u00fcmesi ise bu metot bize True de\u011ferini verecek; e\u011fer de\u011filse False \u00e7\u0131kt\u0131s\u0131n\u0131 verecektir: a = set([1, 2, 3]) b = set([0, 1, 2, 3, 4, 5]) a.issubset(b) True Bu \u00f6rnekte True \u00e7\u0131kt\u0131s\u0131n\u0131 ald\u0131k, \u00e7\u00fcnk\u00fc a k\u00fcmesinin b\u00fct\u00fcn \u00f6\u011feleri b k\u00fcmesi i\u00e7inde yer al\u0131yor. Yani a, b\u2018nin alt k\u00fcmesidir. issuperset() Matematik derslerinde g\u00f6rd\u00fc\u011f\u00fcm\u00fcz \u201ck\u00fcmeler\u201d konusunda hat\u0131rlad\u0131\u011f\u0131n\u0131z \u201cb k\u00fcmesi a k\u00fcmesini kapsar\u201d ifadesini bu metotla g\u00f6steriyoruz. a = set([1, 2, 3]) b = set([0, 1, 2, 3, 4, 5]) b.issuperset(a) True Burada, \u201cb k\u00fcmesi a k\u00fcmesini kapsar,\u201d sonucunu elde ediyoruz. Yani b k\u00fcmesi a k\u00fcmesinin b\u00fct\u00fcn elemanlar\u0131n\u0131 i\u00e7inde bar\u0131nd\u0131r\u0131yor. union() union() metodu iki k\u00fcmenin birle\u015fimini almam\u0131z\u0131 sa\u011flar. Hemen bir \u00f6rnek verelim: a = set([2, 4, 6, 8]) b = set([1, 3, 5, 7]) a.union(b) {1, 2, 3, 4, 5, 6, 7, 8} union() metodu yerine \u201c|\u201d i\u015faretini de kullanabiliriz: a | b {1, 2, 3, 4, 5, 6, 7, 8} update() Bu metot, bir k\u00fcmeyi g\u00fcncellememizi sa\u011flar. kume = set([\"elma\", \"armut\", \"kebap\"]) yeni = [1, 2, 3] kume.update(yeni) print(kume) {1, 2, 3, 'armut', 'kebap', 'elma'} symmetric_difference() K\u00fcmelerin ikisinde de bulunmayan \u00f6\u011feleri ayn\u0131 anda almam\u0131z\u0131 sa\u011flar. a = set([1, 2, 5]) b = set([1, 4, 5]) a.symmetric_difference(b) {2, 4} symmetric_difference_update() Daha \u00f6nce difference_update ve intersection_update gibi metotlar\u0131 \u00f6\u011frenmi\u015ftik. symmetric_difference_update() metodu da bunlara benzer bir i\u015flevi yerine getirir: a = set([1,2, 5]) b = set([1,4, 5]) a.symmetric_difference_update(b) print(a) {2, 4} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, a k\u00fcmesinin eski \u00f6\u011feleri gitti, yerlerine symmetric_difference() metoduyla elde edilen \u00e7\u0131kt\u0131 geldi. Yani a k\u00fcmesi, symmetric_difference() metodunun sonucuna g\u00f6re g\u00fcncellenmi\u015f oldu... pop() K\u00fcmelerin \u00f6\u011felerini silip ekrana bas\u0131yor: a = set([\"elma\", \"armut\", \"kebap\"]) a.pop() 'elma' Peki bu metot hangi \u00f6l\u00e7\u00fcte g\u00f6re k\u00fcmeden \u00f6\u011fe siliyor? Herhangi bir \u00f6l\u00e7\u00fct yok. Bu metot, k\u00fcme \u00f6\u011felerini tamamen rastgele siliyor. Dondurulmu\u015f K\u00fcmeler (Frozenset) \u00d6\u011feleri \u00fczerinde de\u011fi\u015fiklik yap\u0131lamayan bir k\u00fcme olu\u015fturmak isterseniz set() yerine frozenset() fonksiyonunu kullanabilirsiniz. Dilerseniz hemen bununla ilgili bir \u00f6rnek verelim: dondurulmus = frozenset([\"elma\", \"armut\", \"ayva\"]) Dondurulmu\u015f k\u00fcmeleri bu \u015fekilde olu\u015fturuyoruz. \u015eimdi bu dondurulmu\u015f k\u00fcmenin metotlar\u0131na bakal\u0131m: dir(dondurulmus) ['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'copy', 'difference', 'intersection', 'isdisjoint', 'issubset', 'issuperset', 'symmetric_difference', 'union'] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, add(), remove(), update() gibi, de\u011fi\u015fiklik yapmaya y\u00f6nelik metotlar listede yok. Dondurulmu\u015f k\u00fcmeler ile normal k\u00fcmeler aras\u0131nda i\u015flev olarak hi\u00e7bir fark yoktur. Bu ikisi aras\u0131ndaki fark, listeler ile demetler aras\u0131ndaki fark gibidir. Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"K\u00fcmeler ve Dondurulmu\u015f K\u00fcmeler"},{"location":"python/python_kumeler_dondurulmus_kumeler/#kumeler-ve-dondurulmus-kumeler","text":"Bu b\u00f6l\u00fcmde k\u00fcmeler d\u0131\u015f\u0131nda, bir de dondurulmu\u015f k\u00fcmelerden s\u00f6z edece\u011fiz. Bu iki veri tipi birbiriyle ili\u015fkilidir.","title":"K\u00fcmeler ve Dondurulmu\u015f K\u00fcmeler"},{"location":"python/python_kumeler_dondurulmus_kumeler/#kumeler","text":"Ad\u0131ndan da az \u00e7ok tahmin edebilece\u011finiz gibi k\u00fcmeler, matematikten bildi\u011fimiz \u201ck\u00fcme\u201d kavram\u0131yla s\u0131k\u0131 s\u0131k\u0131ya ba\u011flant\u0131l\u0131d\u0131r. Bu veri tipi, matematikteki k\u00fcmelerin sahip oldu\u011fu b\u00fct\u00fcn \u00f6zellikleri ta\u015f\u0131r. Yani matematikteki k\u00fcmelerden bildi\u011fimiz kesi\u015fim, birle\u015fim ve fark gibi \u00f6zellikler Python\u2019daki k\u00fcmeler i\u00e7in de ge\u00e7erlidir.","title":"K\u00fcmeler"},{"location":"python/python_kumeler_dondurulmus_kumeler/#kume-olusturmak","text":"K\u00fcme olu\u015fturmak \u00e7ok kolay bir i\u015flemdir. \u00d6rne\u011fin bo\u015f bir k\u00fcmeyi \u015f\u00f6yle olu\u015fturuyoruz: bos_kume = set() Listeler, demetler ve s\u00f6zl\u00fcklerin aksine k\u00fcmelerin ay\u0131rt edici bir i\u015fareti yoktur. K\u00fcme olu\u015fturmak i\u00e7in set() adl\u0131 \u00f6zel bir fonksiyondan yararlan\u0131yoruz. type(bos_kume) set G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, Python programlama dilinde k\u00fcmeler set ifadesiyle g\u00f6steriliyor. \u0130\u00e7inde \u00f6\u011fe de bar\u0131nd\u0131ran k\u00fcmeleri ise \u015fu \u015fekilde olu\u015fturuyoruz: kume = set([\"elma\", \"armut\", \"kebap\"]) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi set() fonksiyonu i\u00e7indeki \u00f6\u011feler bir liste i\u00e7inde yer al\u0131yor. Dolay\u0131s\u0131yla yukar\u0131daki tan\u0131mlamay\u0131 \u015f\u00f6yle de yapabiliriz: liste = [\"elma\", \"armut\", \"kebap\"] kume = set(liste) Elbette k\u00fcme tan\u0131mlamak i\u00e7in mutlaka liste kullanmak zorunda de\u011filiz. \u0130stersek demetleri de k\u00fcme haline getirebiliriz: demet = (\"elma\", \"armut\", \"kebap\") kume = set(demet) Hatta ve hatta karakter dizilerinden dahi k\u00fcme yapabiliriz: kardiz = \"Python Programlama Dili i\u00e7in T\u00fcrk\u00e7e Kaynak\" kume = set(kardiz) Kulland\u0131\u011f\u0131m\u0131z karakter dizisinin b\u00f6yle uzun olmas\u0131na da gerek yok. Tek karakterlik dizilerden bile k\u00fcme olu\u015fturabiliriz: kardiz = \"a\" kume = set(kardiz) Ama say\u0131lardan k\u00fcme olu\u015fturamay\u0131z: n = 10 kume = set(n) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-8-ffda9229f4d1> in <module> 1 n = 10 2 ----> 3 kume = set(n) TypeError: 'int' object is not iterable Peki s\u00f6zl\u00fckleri kullanarak k\u00fcme olu\u015fturabilir miyiz? Elbette, neden olmas\u0131n? bilgi = {\"i\u015fletim sistemi\": \"GNU\", \"sistem \u00e7ekirde\u011fi\": \"Linux\", \"da\u011f\u0131t\u0131m\": \"Ubuntu GNU/Linux\"} kume = set(bilgi) K\u00fcme olu\u015fturman\u0131n son bir y\u00f6nteminden daha s\u00f6z edelim. En ba\u015fta s\u00f6yledi\u011fimiz gibi, listeler, demetler, s\u00f6zl\u00fckler ve karakter dizilerinin aksine k\u00fcmelerin [ ], ( ), { }, \u2018 \u2018 gibi ay\u0131rt edici bir i\u015fareti yoktur. Ama e\u011fer istersek s\u00f6zl\u00fckleri olu\u015fturmak i\u00e7in kulland\u0131\u011f\u0131m\u0131z \u00f6zel i\u015faretleri k\u00fcme olu\u015fturmak i\u00e7in de kullanabiliriz. kume = {'Python', 'C++', 'Ruby', 'PHP'} type(kume) set Ancak bu yap\u0131y\u0131 kullanarak bo\u015f bir k\u00fcme olu\u015fturamazs\u0131n\u0131z: kume = {} type(kume) dict Bo\u015f bir k\u00fcme olu\u015fturmak i\u00e7in set() fonksiyonunu kullanman\u0131z gerekmektedir: kume = set(kume) type(kume) set E\u011fer olu\u015fturdu\u011funuz k\u00fcmeyi ekrana yazd\u0131rmak isterseniz: kume {'C++', 'PHP', 'Python', 'Ruby'} Bu arada, bir s\u00f6zl\u00fc\u011f\u00fc k\u00fcmeye \u00e7evirdi\u011finizde, elbette s\u00f6zl\u00fc\u011f\u00fcn yaln\u0131zca anahtarlar\u0131 k\u00fcmeye eklenecektir. S\u00f6zl\u00fc\u011f\u00fcn de\u011ferleri ise b\u00f6yle bir i\u015flemin sonucunda ortadan kaybolur. E\u011fer bir s\u00f6zl\u00fc\u011f\u00fc k\u00fcmeye \u00e7evirirken hem anahtarlar\u0131 hem de de\u011ferleri korumak gibi bir niyetiniz varsa \u015f\u00f6yle bir \u015fey yazabilirsiniz: bilgi = {\"i\u015fletim sistemi\": \"GNU\", \"sistem \u00e7ekirde\u011fi\": \"Linux\", \"da\u011f\u0131t\u0131m\": \"Ubuntu GNU/Linux\"} Bu s\u00f6zl\u00fckteki anahtar-de\u011fer \u00e7iftlerini bir k\u00fcme i\u00e7ine, \u00e7ift \u00f6\u011feli demetler olarak yerle\u015ftirebiliriz: liste = [(anahtar, de\u011fer) for anahtar, de\u011fer in bilgi.items()] kume = set(liste) kume {('da\u011f\u0131t\u0131m', 'Ubuntu GNU/Linux'), ('i\u015fletim sistemi', 'GNU'), ('sistem \u00e7ekirde\u011fi', 'Linux')}","title":"K\u00fcme Olu\u015fturmak"},{"location":"python/python_kumeler_dondurulmus_kumeler/#kumelerin-yaps","text":"\u00d6rne\u011fin \u015f\u00f6yle bir k\u00fcme tan\u0131mlayal\u0131m: kardiz = \"Python Programlama Dili\" kume = set(kardiz) print(kume) {'t', 'a', 'o', 'm', 'h', 'D', 'r', ' ', 'g', 'n', 'l', 'y', 'i', 'P'} Burada bir \u015fey dikkatinizi \u00e7ekmi\u015f olmal\u0131. Bir \u00f6\u011feyi k\u00fcme olarak tan\u0131mlay\u0131p ekrana yazd\u0131rd\u0131\u011f\u0131m\u0131zda elde etti\u011fimiz \u00e7\u0131kt\u0131, o \u00f6\u011fe i\u00e7indeki her bir alt \u00f6\u011feyi tek bir kez i\u00e7eriyor. Yani mesela \u201cPython Programlama Dili\u201d i\u00e7inde iki adet \u201cP\u201d karakteri var, ama \u00e7\u0131kt\u0131da bu iki \u201cP\u201d karakterinin yaln\u0131zca biri g\u00f6r\u00fcn\u00fcyor. Buradan anl\u0131yoruz ki, k\u00fcmeler ayn\u0131 \u00f6\u011feyi birden fazla tekrar etmez. Bu \u00e7ok \u00f6nemli bir \u00f6zelliktir ve pek \u00e7ok yerde i\u015fimize yarar. Ayn\u0131 durum karakter dizisi d\u0131\u015f\u0131nda kalan \u00f6teki veri tipleri i\u00e7in de ge\u00e7erlidir. Yani mesela e\u011fer bir listeyi k\u00fcme haline getiriyorsak, o listedeki \u00f6\u011feler k\u00fcme i\u00e7inde yaln\u0131zca bir kez ge\u00e7ecektir. Listede ayn\u0131 \u00f6\u011feden iki-\u00fc\u00e7 tane bulunsa bile, k\u00fcmemiz bu \u00f6\u011feleri teke indirecektir.","title":"K\u00fcmelerin Yap\u0131s\u0131"},{"location":"python/python_kumeler_dondurulmus_kumeler/#kume-uretecleri-setcomprehensions","text":"Liste \u00fcrete\u00e7lerini ve s\u00f6zl\u00fck \u00fcrete\u00e7lerini kullanarak nas\u0131l tek sat\u0131rda ve h\u0131zl\u0131 bir \u015fekilde listeler ve s\u00f6zl\u00fckler \u00fcretebiliyorsak, ayn\u0131 \u015fekilde k\u00fcme \u00fcrete\u00e7lerini kullanarak tek sat\u0131rda ve h\u0131zl\u0131 bir \u015fekilde k\u00fcmeler de \u00fcretebiliriz. import random liste = [random.randint(0, 10000) for i in range(1000)] kume = {i for i in liste if i < 100} print(kume) {64, 97, 3, 36, 42, 43, 44, 16, 61} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, k\u00fcme \u00fcrete\u00e7lerinin s\u00f6zdizimi, liste ve s\u00f6zl\u00fck \u00fcrete\u00e7lerinin s\u00f6zdizimine \u00e7ok benziyor.","title":"K\u00fcme \u00dcrete\u00e7leri (SetComprehensions)"},{"location":"python/python_kumeler_dondurulmus_kumeler/#kumelerin-metotlar","text":"K\u00fcmeler ile kullan\u0131labilen metotlara bakal\u0131m: dir(set) ['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update'] Hemen i\u015fimize yarayacak metotlar\u0131 alal\u0131m: for i in dir(set): if \"__\" not in i: print(i) add clear copy difference difference_update discard intersection intersection_update isdisjoint issubset issuperset pop remove symmetric_difference symmetric_difference_update union update","title":"K\u00fcmelerin Metotlar\u0131"},{"location":"python/python_kumeler_dondurulmus_kumeler/#clear","text":"K\u00fcmelerle ilgili olarak inceleyece\u011fimiz ilk metot clear(). Bu metodu daha \u00f6nce s\u00f6zl\u00fckleri \u00e7al\u0131\u015f\u0131rken de g\u00f6rm\u00fc\u015ft\u00fck. S\u00f6zl\u00fcklerde bu metodun g\u00f6revi s\u00f6zl\u00fc\u011f\u00fcn i\u00e7ini bo\u015faltmak idi. Burada da ayn\u0131 vazifeyi g\u00f6r\u00fcr: km = set(\"ankara\") for i in km: print(i) k a r n km.clear() km set() Burada \u00f6nce \u201ckm\u201d adl\u0131 bir k\u00fcme olu\u015fturduk. Daha sonra da clear() metodunu kullanarak bu k\u00fcmenin b\u00fct\u00fcn \u00f6\u011felerini sildik. Art\u0131k elimizde bo\u015f bir k\u00fcme var.","title":"clear()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#copy","text":"Listeler ve s\u00f6zl\u00fckleri incelerken copy() adl\u0131 bir metot \u00f6\u011frenmi\u015ftik. Bu metot ayn\u0131 zamanda k\u00fcmelerle birlikte de kullan\u0131labilir. \u00dcstelik i\u015flevi de ayn\u0131d\u0131r: km = set(\"kahramanmara\u015f\") yedek = km.copy() yedek {'a', 'h', 'k', 'm', 'n', 'r', '\u015f'}","title":"copy()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#add","text":"Add kelimesi T\u00fcrk\u00e7e\u2019de \u201ceklemek\u201d anlam\u0131na gelir. Ad\u0131ndan da anla\u015f\u0131laca\u011f\u0131 gibi, bu metot yard\u0131m\u0131yla k\u00fcmelerimize yeni \u00f6\u011feler ilave edebilece\u011fiz. Hemen bunun nas\u0131l kullan\u0131ld\u0131\u011f\u0131na bakal\u0131m: kume = set([\"elma\", \"armut\", \"kebap\"]) kume.add(\"\u00e7ilek\") print(kume) {'elma', '\u00e7ilek', 'armut', 'kebap'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, add() metodunu kullanarak, k\u00fcmemize \u00e7ilek adl\u0131 yeni bir \u00f6\u011fe ekledik. E\u011fer k\u00fcmede zaten varolan bir \u00f6\u011fe eklemeye \u00e7al\u0131\u015f\u0131rsak k\u00fcmede herhangi bir de\u011fi\u015fiklik olmayacakt\u0131r. \u00c7\u00fcnk\u00fc, daha \u00f6nce de s\u00f6yledi\u011fimiz gibi, k\u00fcmeler her bir \u00f6\u011feyi tek bir say\u0131da bar\u0131nd\u0131r\u0131r. Bu arada, yeri gelmi\u015fken k\u00fcmelerin \u00f6nemli bir \u00f6zelli\u011finden daha s\u00f6z edelim. Bir k\u00fcmeye herhangi bir \u00f6\u011fe ekleyebilmemiz i\u00e7in, o \u00f6\u011fenin de\u011fi\u015ftirilemeyen (immutable) bir veri tipi olmas\u0131 gerekiyor. Bildi\u011finiz gibi Python\u2019daki \u015fu veri tipleri de\u011fi\u015ftirilemeyen veri tipleridir: Demetler Say\u0131lar Karakter Dizileri \u015eu veri tipleri ise de\u011fi\u015ftirilebilen veri tipleridir: Listeler S\u00f6zl\u00fckler K\u00fcmeler Dolay\u0131s\u0131yla bir k\u00fcmeye ancak \u015fu veri tiplerini ekleyebiliriz: Demetler Say\u0131lar Karakter Dizileri","title":"add()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#difference","text":"Bu metot iki k\u00fcmenin fark\u0131n\u0131 almam\u0131z\u0131 sa\u011flar. \u00d6rne\u011fin: k1 = set([1, 2, 3, 5]) k2 = set([3, 4, 2, 10]) k1.difference(k2) {1, 5} Demek ki k1\u2019in k2\u2019den fark\u0131 buymu\u015f. Peki k2\u2019nin k1\u2019den fark\u0131n\u0131 bulmak istersek ne yapaca\u011f\u0131z? k2.difference(k1) {4, 10} \u0130sterseniz uzun uzun difference() metodunu kullanmak yerine sadece eksi (-) i\u015faretini kullanarak da ayn\u0131 sonucu elde edebilirsiniz: k1 - k2 {1, 5} ...veya... k2 - k1 {4, 10} Hay\u0131r, \u201cmadem eksi i\u015faretini kullanabiliyoruz, o halde art\u0131 i\u015faretini de kullanabiliriz! \u201d gibi bir fikir do\u011fru de\u011fildir.","title":"difference()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#difference_update","text":"Bu metot, difference() metodundan elde edilen sonuca g\u00f6re bir k\u00fcmenin g\u00fcncellenmesini sa\u011flar. Yani? Hemen bir \u00f6rnek verelim: k1 = set([1, 2, 3]) k2 = set([1, 3, 5]) k1.difference_update(k2) print(k1) {2} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, bu metot k1\u2019in k2\u2019den fark\u0131n\u0131 ald\u0131 ve bu fark\u0131 kullanarak k1\u2019i yeniden olu\u015fturdu. k1 ile k2 aras\u0131ndaki tek fark 2 adl\u0131 \u00f6\u011fe idi. Dolay\u0131s\u0131yla difference_update() metodunu uygulad\u0131\u011f\u0131m\u0131zda k1\u2019in \u00f6\u011felerinin silinip yerlerine 2 adl\u0131 \u00f6\u011fenin geldi\u011fini g\u00f6r\u00fcyoruz.","title":"difference_update()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#discard","text":"Bu metot k\u00fcmeden \u00f6\u011fe silmemizi sa\u011flayacak: hayvanlar = set([\"kedi\", \"k\u00f6pek\", \"at\", \"ku\u015f\", \"inek\", \"deve\"]) hayvanlar.discard(\"kedi\") print(hayvanlar) {'inek', 'deve', 'ku\u015f', 'at', 'k\u00f6pek'} E\u011fer k\u00fcme i\u00e7inde bulunmayan bir \u00f6\u011fe silmeye \u00e7al\u0131\u015f\u0131rsak hi\u00e7 bir \u015fey olmaz. Yani hata mesaj\u0131 almay\u0131z: hayvanlar.discard(\"y\u0131lan\") Burada etkile\u015fimli kabuk sessizce bir alt sat\u0131ra ge\u00e7ecektir. Bu metodun en \u00f6nemli \u00f6zelli\u011fi budur. Yani olmayan bir \u00f6\u011feyi silmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131zda hata vermemesi.","title":"discard()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#remove","text":"E\u011fer bir k\u00fcmeden \u00f6\u011fe silmek istersek remove() metodunu da kullanabiliriz: hayvanlar.remove(\"k\u00f6pek\") Peki discard() varken remove() metoduna ne gerek var? Ya da tersi. Bu iki metot ayn\u0131 i\u015flevi yerine getirse de aralar\u0131nda \u00f6nemli bir fark vard\u0131r. Hat\u0131rlarsan\u0131z discard() metoduyla, k\u00fcmede olmayan bir \u00f6\u011feyi silmeye \u00e7al\u0131\u015f\u0131rsak herhangi bir hata mesaj\u0131 almayaca\u011f\u0131m\u0131z\u0131 s\u00f6ylemi\u015ftik. E\u011fer remove() metodunu kullanarak, k\u00fcmede olmayan bir \u00f6\u011feyi silmeye \u00e7al\u0131\u015f\u0131rsak, discard() metodunun aksine, hata mesaj\u0131 al\u0131r\u0131z: hayvanlar.remove(\"fare\") --------------------------------------------------------------------------- KeyError Traceback (most recent call last) <ipython-input-45-65ebbfa6250f> in <module> ----> 1 hayvanlar.remove(\"fare\") KeyError: 'fare'","title":"remove()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#intersection","text":"intersection kelimesi T\u00fcrk\u00e7e\u2019de \u201ckesi\u015fim\u201d anlam\u0131na gelir. Ad\u0131ndan da anlad\u0131\u011f\u0131m\u0131z gibi, intersection() metodu bize iki k\u00fcmenin kesi\u015fim k\u00fcmesini verecektir: k1 = set([1, 2, 3, 4]) k2 = set([1, 3, 5, 7]) k1.intersection(k2) {1, 3} \u0130ki k\u00fcmenin kesi\u015fimini bulmak i\u00e7in \u201c&\u201d i\u015faretinden yararlanabiliriz: k1 & k2 {1, 3}","title":"intersection()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#intersection_update","text":"Bu metodun g\u00f6revi, intersection() metodundan elde edilen sonuca g\u00f6re bir k\u00fcmenin g\u00fcncellenmesini sa\u011flamakt\u0131r: k1 = set([1, 2, 3]) k2 = set([1, 3, 5]) k1.intersection_update(k2) print(k1) {1, 3} print(k2) {1, 3, 5} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, intersection_update() metodu k1\u2019in b\u00fct\u00fcn \u00f6\u011felerini sildi ve yerlerine k1 ve k2\u2019nin kesi\u015fim k\u00fcmesinin elemanlar\u0131n\u0131 koydu.","title":"intersection_update()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#isdisjoint","text":"Bu metodun \u00e7ok basit bir g\u00f6revi vard\u0131r. isdisjoint() metodunu kullanarak iki k\u00fcmenin kesi\u015fim k\u00fcmesinin bo\u015f olup olmad\u0131\u011f\u0131 sorgulayabilirsiniz. a = set([1, 2, 3]) b = set([2, 4, 6]) a.isdisjoint(b) False","title":"isdisjoint()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#issubset","text":"Bu metot yard\u0131m\u0131yla, bir k\u00fcmenin b\u00fct\u00fcn elemanlar\u0131n\u0131n ba\u015fka bir k\u00fcme i\u00e7inde yer al\u0131p yer almad\u0131\u011f\u0131n\u0131 sorgulayabiliriz. Yani bir k\u00fcmenin, ba\u015fka bir k\u00fcmenin alt k\u00fcmesi olup olmad\u0131\u011f\u0131n\u0131 bu metot yard\u0131m\u0131yla \u00f6\u011frenebiliriz. E\u011fer bir k\u00fcme ba\u015fka bir k\u00fcmenin alt k\u00fcmesi ise bu metot bize True de\u011ferini verecek; e\u011fer de\u011filse False \u00e7\u0131kt\u0131s\u0131n\u0131 verecektir: a = set([1, 2, 3]) b = set([0, 1, 2, 3, 4, 5]) a.issubset(b) True Bu \u00f6rnekte True \u00e7\u0131kt\u0131s\u0131n\u0131 ald\u0131k, \u00e7\u00fcnk\u00fc a k\u00fcmesinin b\u00fct\u00fcn \u00f6\u011feleri b k\u00fcmesi i\u00e7inde yer al\u0131yor. Yani a, b\u2018nin alt k\u00fcmesidir.","title":"issubset()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#issuperset","text":"Matematik derslerinde g\u00f6rd\u00fc\u011f\u00fcm\u00fcz \u201ck\u00fcmeler\u201d konusunda hat\u0131rlad\u0131\u011f\u0131n\u0131z \u201cb k\u00fcmesi a k\u00fcmesini kapsar\u201d ifadesini bu metotla g\u00f6steriyoruz. a = set([1, 2, 3]) b = set([0, 1, 2, 3, 4, 5]) b.issuperset(a) True Burada, \u201cb k\u00fcmesi a k\u00fcmesini kapsar,\u201d sonucunu elde ediyoruz. Yani b k\u00fcmesi a k\u00fcmesinin b\u00fct\u00fcn elemanlar\u0131n\u0131 i\u00e7inde bar\u0131nd\u0131r\u0131yor.","title":"issuperset()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#union","text":"union() metodu iki k\u00fcmenin birle\u015fimini almam\u0131z\u0131 sa\u011flar. Hemen bir \u00f6rnek verelim: a = set([2, 4, 6, 8]) b = set([1, 3, 5, 7]) a.union(b) {1, 2, 3, 4, 5, 6, 7, 8} union() metodu yerine \u201c|\u201d i\u015faretini de kullanabiliriz: a | b {1, 2, 3, 4, 5, 6, 7, 8}","title":"union()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#update","text":"Bu metot, bir k\u00fcmeyi g\u00fcncellememizi sa\u011flar. kume = set([\"elma\", \"armut\", \"kebap\"]) yeni = [1, 2, 3] kume.update(yeni) print(kume) {1, 2, 3, 'armut', 'kebap', 'elma'}","title":"update()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#symmetric_difference","text":"K\u00fcmelerin ikisinde de bulunmayan \u00f6\u011feleri ayn\u0131 anda almam\u0131z\u0131 sa\u011flar. a = set([1, 2, 5]) b = set([1, 4, 5]) a.symmetric_difference(b) {2, 4}","title":"symmetric_difference()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#symmetric_difference_update","text":"Daha \u00f6nce difference_update ve intersection_update gibi metotlar\u0131 \u00f6\u011frenmi\u015ftik. symmetric_difference_update() metodu da bunlara benzer bir i\u015flevi yerine getirir: a = set([1,2, 5]) b = set([1,4, 5]) a.symmetric_difference_update(b) print(a) {2, 4} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, a k\u00fcmesinin eski \u00f6\u011feleri gitti, yerlerine symmetric_difference() metoduyla elde edilen \u00e7\u0131kt\u0131 geldi. Yani a k\u00fcmesi, symmetric_difference() metodunun sonucuna g\u00f6re g\u00fcncellenmi\u015f oldu...","title":"symmetric_difference_update()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#pop","text":"K\u00fcmelerin \u00f6\u011felerini silip ekrana bas\u0131yor: a = set([\"elma\", \"armut\", \"kebap\"]) a.pop() 'elma' Peki bu metot hangi \u00f6l\u00e7\u00fcte g\u00f6re k\u00fcmeden \u00f6\u011fe siliyor? Herhangi bir \u00f6l\u00e7\u00fct yok. Bu metot, k\u00fcme \u00f6\u011felerini tamamen rastgele siliyor.","title":"pop()"},{"location":"python/python_kumeler_dondurulmus_kumeler/#dondurulmus-kumeler-frozenset","text":"\u00d6\u011feleri \u00fczerinde de\u011fi\u015fiklik yap\u0131lamayan bir k\u00fcme olu\u015fturmak isterseniz set() yerine frozenset() fonksiyonunu kullanabilirsiniz. Dilerseniz hemen bununla ilgili bir \u00f6rnek verelim: dondurulmus = frozenset([\"elma\", \"armut\", \"ayva\"]) Dondurulmu\u015f k\u00fcmeleri bu \u015fekilde olu\u015fturuyoruz. \u015eimdi bu dondurulmu\u015f k\u00fcmenin metotlar\u0131na bakal\u0131m: dir(dondurulmus) ['__and__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'copy', 'difference', 'intersection', 'isdisjoint', 'issubset', 'issuperset', 'symmetric_difference', 'union'] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, add(), remove(), update() gibi, de\u011fi\u015fiklik yapmaya y\u00f6nelik metotlar listede yok. Dondurulmu\u015f k\u00fcmeler ile normal k\u00fcmeler aras\u0131nda i\u015flev olarak hi\u00e7bir fark yoktur. Bu ikisi aras\u0131ndaki fark, listeler ile demetler aras\u0131ndaki fark gibidir. Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"Dondurulmu\u015f K\u00fcmeler (Frozenset)"},{"location":"python/python_listeler_demetler/","text":"Listeler(list) ve Demetler(Tuple) Listeler Python'daki veri tiplerinden biridir. Liste Tan\u0131mlamak Bir liste elde etmek i\u00e7in, \u00f6\u011feleri birbirinden virg\u00fclle ay\u0131r\u0131p, bunlar\u0131n hepsini k\u00f6\u015feli parantezler i\u00e7ine al\u0131yoruz. liste = [\"deger1\",\"deger2\",\"deger3\"] Tan\u0131mlad\u0131\u011f\u0131m\u0131z liste'nin bir liste olup olmad\u0131\u011f\u0131n\u0131 anlamak i\u00e7in type fonksiyonu kullanarak kontrol edelim. type(liste) list G\u00f6rm\u00fc\u015f oldu\u011funuz gibi tan\u0131mlam\u0131\u015f oldu\u011fumuz liste ad\u0131ndaki de\u011fi\u015fken bir list tipinde. Listeler \u00e7ok farkl\u0131 de\u011ferler bar\u0131nd\u0131rabilir. Yani sadece say\u0131 de\u011ferleri de\u011fil ayn\u0131 zamanda karakter dizisi de\u011ferleride i\u00e7erebilir. \u00d6rne\u011fin: liste = [\"deger1\",\"deger2\",1,2,3,4] E\u011fer istersek listenin i\u00e7inde ba\u015fka listelerde tan\u0131mlayabiliriz. liste = [\"deger1\",\"deger2\",[\"degisken1\",\"degisken2\"],1,2,3,4] liste de\u011fi\u015fkenimizin i\u00e7eri\u011fine bakal\u0131m: liste ['deger1', 'deger2', ['degisken1', 'degisken2'], 1, 2, 3, 4] Peki listenin i\u00e7erisinde bulunan de\u011ferlerin tiplerini kontrol edelim. \u00c7\u00fcnk\u00fc ikinci bir liste nas\u0131l g\u00f6z\u00fckmekte bakal\u0131m: for deger in liste: print(\"{} adl\u0131 \u00f6\u011fenin veri tipi: {}\".format(deger, type(deger))) deger1 adl\u0131 \u00f6\u011fenin veri tipi: <class 'str'> deger2 adl\u0131 \u00f6\u011fenin veri tipi: <class 'str'> ['degisken1', 'degisken2'] adl\u0131 \u00f6\u011fenin veri tipi: <class 'list'> 1 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> 2 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> 3 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> 4 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> G\u00f6rm\u00fc\u015f oldu\u011funuz gibi listenin i\u00e7erisinde bulunan di\u011fer bir listede list tipindedir. list() Fonksiyonu Bu fonksiyonu elimizde bulunan bir karakter dizisini listeye \u00e7evirmemize yarar. karakter_dizisi = \"abcdefgh\" Bu karakter dizisini list fonksiyonu arac\u0131l\u0131\u011f\u0131 ile bir list de\u011fi\u015fkenine \u00e7evirelim. liste = list(karakter_dizisi) Liste de\u011fi\u015fkenin veri tipine bakal\u0131m: type(liste) list liste de\u011fi\u015fkenin veri tipi list'tir. \u015eimdide i\u00e7eri\u011fine bakal\u0131m: liste ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] E\u011fer istersek range fonksiyonu ile de say\u0131lardan olu\u015fan bir listeyi h\u0131zl\u0131ca tan\u0131mlayabiliriz. sayilar = list(range(10)) Olu\u015fturdu\u011fumuz sayilar listesinin veri tipine bakal\u0131m: type(sayilar) list \u015eimdide sayilarin i\u00e7eri\u011fine bakal\u0131m: sayilar [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Listelerin \u00d6\u011flerine Eri\u015fmek Listelerin \u00f6\u011felerine eri\u015febilmemiz i\u00e7in k\u00f6\u015feli parantez i\u00e7erisinde eri\u015fmek istedi\u011fimiz de\u011ferin s\u0131ra numaras\u0131n\u0131 yazmam\u0131z gerekmektedir. Burada dikkat edilmesi gereken durum listelerdeki de\u011ferleri saymaya s\u0131f\u0131rdan ba\u015fl\u0131yoruz. liste = [\"deger1\",\"deger2\",\"deger3\"] liste de\u011fi\u015fkenin en son de\u011ferine eri\u015felim. Bunun i\u00e7in iki yol mevcut. Yol liste[2] 'deger3' Yol liste[-1] 'deger3' Karakter dizilerini dilimlemede oldu\u011fu gibi burada da listeyi dilimleyebiliriz. liste[0:2] ['deger1', 'deger2'] Listelerin \u00d6\u011felerini De\u011fi\u015ftirmek Listelerin \u00f6\u011felerini de\u011fi\u015ftirmek m\u00fcmk\u00fcn, bu durumu inceleyelim. renkler = [\"k\u0131rm\u0131z\u0131\",\"beyaz\",\"sar\u0131\",\"mor\",\"kahverengi\"] renkler listemizin i\u00e7eri\u011fine bakal\u0131m: renkler ['k\u0131rm\u0131z\u0131', 'beyaz', 'sar\u0131', 'mor', 'kahverengi'] renkler de\u011fi\u015fkenimizin i\u00e7erisinde bulunan s\u0131f\u0131r\u0131nc\u0131 de\u011feri yani k\u0131rm\u0131z\u0131 de\u011ferini gri ile de\u011fi\u015ftirelim: renkler[0] = \"gri\" renkler listemizi tekrardan listeleyelim. renkler ['gri', 'beyaz', 'sar\u0131', 'mor', 'kahverengi'] Listeye \u00d6\u011fe Eklemek Listelerin i\u00e7erisine yeni \u00f6\u011feler eklemek m\u00fcmk\u00fcn. Bu durumu inceleyelim: renkler + [\"lacivert\"] ['gri', 'beyaz', 'sar\u0131', 'mor', 'kahverengi', 'lacivert'] Listeleri Birle\u015ftirmek diller1 = [\"Python\",\"Java\",\"C#\"] diller2 = [\"Go\",\"C++\",\"Fortran\"] Elimizde iki adet liste mevcut. Bu listeler yaz\u0131l\u0131m dillerini bar\u0131nd\u0131rmaktad\u0131r. Bu listeleri birle\u015ftirelim. programlama = diller1 + diller2 Yeni olu\u015fturdu\u011fumuz bu de\u011fi\u015fkenin veri tipine bakal\u0131m. type(programlama) list Tan\u0131mlad\u0131\u011f\u0131m\u0131z de\u011fi\u015fkenin t\u00fcr\u00fc list, \u015fimdide i\u00e7eri\u011fine bakal\u0131m: programlama ['Python', 'Java', 'C#', 'Go', 'C++', 'Fortran'] Listeden \u00d6\u011fe \u00c7\u0131karmak Bir listeden \u00f6\u011fe silmek i\u00e7in del adl\u0131 ifadeden yararlanabilirsiniz. \u00d6rne\u011fin: del programlama[-1] Listemizin i\u00e7eri\u011fine bakal\u0131m: programlama ['Python', 'Java', 'C#', 'Go', 'C++'] Listeleri Silmek Python\u2019da listeleri tamamen silmek de m\u00fcmk\u00fcnd\u00fcr. Listeden \u00f6\u011fe \u00e7\u0131karma i\u015fleminde oldu\u011fu gibi del fonksiyonu silmede kullan\u0131lmaktad\u0131r. \u00d6rne\u011fin: del programlama Listeleri Kopyalamak Listeleri kopyalarken dikkat edilmesi gereken \u00e7ok \u00f6nemli bir husus mevcut. \u0130lk \u00f6nce bu hususa de\u011finelim daha sonra do\u011fru y\u00f6nteme bakal\u0131m. liste_1 = [\"a\",\"b\",\"c\"] Bir ba\u015fka de\u011fi\u015fkene liste_1 de\u011fi\u015fkenimizi kopyalayal\u0131m. liste_2 = liste_1 liste_2 de\u011fi\u015fkenimizin i\u00e7eri\u011fini kontrol edelim. liste_2 ['a', 'b', 'c'] liste_2 i\u00e7erisinde bir de\u011fi\u015fiklik yapal\u0131m. liste_2[0] = \"e\" liste_2 de\u011fi\u015fkenimizin i\u00e7eri\u011fini kontrol edelim. liste_2 ['e', 'b', 'c'] G\u00f6rm\u00fc\u015f oldu\u011funuz gibi liste_2 de\u011fi\u015fkenimizin i\u00e7eri\u011fi de\u011fi\u015fti. Peki liste_1 de\u011fi\u015fkenimizin i\u00e7eri\u011finde durum nas\u0131l: liste_1 ['e', 'b', 'c'] liste_1 de\u011fi\u015fkenin i\u00e7eri\u011finin de\u011fi\u015fmi\u015f olmas\u0131 pek bekledi\u011fimiz bir durum de\u011fil. Bu durumun sebebi: Yaz\u0131l\u0131m dillerinde olu\u015fturdu\u011fumuz her de\u011fi\u015fkende RAM \u00fczerinde bir alanda saklanmaktad\u0131r. Bu alan her de\u011fi\u015fken i\u00e7in farkl\u0131d\u0131r. Fakat bizim daha yeni yapt\u0131\u011f\u0131m\u0131z kopyalama y\u00f6nteminde RAM \u00fczerinde bulunan alan\u0131 kopyalam\u0131\u015f olduk. Peki bu iki de\u011fi\u015fkenin RAM \u00fczerinde g\u00f6sterdi\u011fi adreslere bakal\u0131m. id(liste_1) 4559703968 id(liste_2) 4559703968 G\u00f6rm\u00fc\u015f oldu\u011funuz gibi iki de\u011fi\u015fkende RAM \u00fczerinde ayn\u0131 noktay\u0131 g\u00f6stermektedir. Peki liste kopyalaman\u0131n en do\u011fru \u015fekli nas\u0131l, hadi inceleyelim: liste1 = [\"a\",\"b\",\"c\"] liste1 de\u011fi\u015fkenimizi bir ba\u015fka de\u011fi\u015fkene aktaral\u0131m. liste2 = liste1[:] liste2 de\u011fi\u015fkenimizin i\u00e7eri\u011fini kontrol edelim. liste2 ['a', 'b', 'c'] \u015eimdi liste2 \u00fczerinde bir de\u011fi\u015fiklik yapal\u0131m. liste2[0] = \"d\" liste2 de\u011fi\u015fkenin i\u00e7eri\u011fini kontrol edelim. liste2 ['d', 'b', 'c'] liste1 de\u011fi\u015fkeninin i\u00e7eri\u011fini kontrol edelim: liste1 ['a', 'b', 'c'] liste2 \u00fczerinde yapm\u0131\u015f oldu\u011fumuz de\u011fi\u015fken liste1 de\u011fi\u015fkenini etkilememi\u015ftir. Liste \u00dcrete\u00e7leri (List Comprehensions) Liste \u00fcrete\u00e7leri, ad\u0131nda anla\u015f\u0131ld\u0131\u011f\u0131 \u00fczere liste \u00fcretmeye yarayan yap\u0131d\u0131r. \u00d6rnek \u00fczerinden inceleyelim: liste = [i for i in range(10)] Yukar\u0131da bulunan kod sat\u0131rlar\u0131 ile 0'dan 10'a kadar say\u0131lar\u0131n bulundu\u011fu bir liste olu\u015fturmaktad\u0131r. Yazm\u0131\u015f oldu\u011fumuz bu kodun uzun versiyonunu yazal\u0131m: liste = [] for i in range(10): liste += [i] Yazm\u0131\u015f oldu\u011fumuz uzun kod ile k\u0131sa kod ayn\u0131 i\u015fi yapmaktad\u0131r. Biri kolayl\u0131k sunmaktad\u0131r. Bir ba\u015fka \u00f6rnek \u00fczerinden inceleyelim. 0'dan 10'a kadar olan say\u0131lar i\u00e7erisinde 2'ye tam b\u00f6l\u00fclenleri listeleyelim. liste = [i for i in range(10) if i % 2 == 0] Yazm\u0131\u015f oldu\u011fumuz bu kodun normal versiyonunu yazal\u0131m: liste = [] for i in range(10): if i % 2 == 0: liste += [i] Demetler Demetler, \u00f6zellikle g\u00f6r\u00fcn\u00fc\u015f olarak listelere \u00e7ok benzeyen bir veri tipidir. Bu veri tipi de, t\u0131pk\u0131 listeler gibi, farkl\u0131 veri tiplerini i\u00e7inde bar\u0131nd\u0131ran kapsay\u0131c\u0131 bir veri tipidir. Demet Tan\u0131mlamak Demet tan\u0131mlaman\u0131n birka\u00e7 yolu bulunmaktad\u0131r. Yol demet = (\"a\",\"b\",1,2) Olu\u015fturdu\u011fumuz bu de\u011fi\u015fkenin demet olup olmad\u0131\u011f\u0131n\u0131 anlamak i\u00e7in type fonksiyonu ile bakal\u0131m: type(demet) tuple Yol demet = \"a\",\"b\",\"c\",1,2 Olu\u015fturdu\u011fumuz bu de\u011fi\u015fkenin veri tipine bakal\u0131m: type(demet) tuple \u0130\u00e7eri\u011fine bakal\u0131m: demet ('a', 'b', 'c', 1, 2) Yol demet = tuple(\"abcd12345\") veri tipine bakal\u0131m: type(demet) tuple \u0130\u00e7eri\u011fine bakal\u0131m: demet ('a', 'b', 'c', 'd', '1', '2', '3', '4', '5') Tek \u00d6\u011feli Bir Demet Tan\u0131mlamak Tek \u00f6\u011feli bir demet tan\u0131mlayal\u0131m: demet = (\"a\") Tan\u0131mlad\u0131\u011f\u0131m\u0131z de\u011fi\u015fkenin demet olup olmad\u0131\u011f\u0131na bakal\u0131m: type(demet) str Tan\u0131mlad\u0131\u011f\u0131m\u0131z de\u011fi\u015fken bir karakter dizisi(str). Peki tek \u00f6\u011feli bir demet nas\u0131l tan\u0131mlayabiliriz: Yol demet = (\"a\"), Yol demet = \"a\", veri tipini kontrol edelim: type(demet) tuple Yukar\u0131da bulunan iki y\u00f6ntem ile de demet tan\u0131mlayabilirsiniz. Demetlerin \u00d6\u011felerine Eri\u015fmek Demetlerin \u00f6\u011felerine eri\u015febilmek listelerde oldu\u011fu gibi k\u00f6\u015feli parantez i\u00e7erisinde eri\u015fmek istedi\u011fimiz de\u011ferin s\u0131ra numaras\u0131n\u0131 yazmam\u0131z yeterli: demet = (\"deger1\",\"deger2\",\"deger3\") demet[0] 'deger1' demet[-1] 'deger3' Demetlerle Listelerin Birbirinde Fark\u0131 Demetlerle Listeler birbirine \u00e7ok benzerler. Fakat \u00e7ok belirgin farklar\u0131 bulunmaktad\u0131r. Demetler de\u011fi\u015ftirilemez(immutable) iken listeler de\u011fi\u015ftirilebilir(mutable) veri t\u00fcr\u00fcd\u00fcr. demet = (\"a\",\"b\",\"c\",\"d\") demet de\u011fi\u015fkenimizin ilk de\u011ferini de\u011fi\u015ftirmeye \u00e7al\u0131\u015fal\u0131m: demet[0] = \"f\" --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-73-0a94098063ff> in <module> ----> 1 demet[0] = \"f\" TypeError: 'tuple' object does not support item assignment G\u00f6rm\u00fc\u015f oldu\u011funuz gibi demet de\u011fi\u015fkenin ilk de\u011ferini de\u011fi\u015ftirmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z zaman de\u011fi\u015ftiremeyece\u011fimizi belirtti. E\u011fer program\u0131n ak\u0131\u015f\u0131 esnas\u0131nda \u00fczerinde de\u011fi\u015fiklik yapmayaca\u011f\u0131n\u0131z veya de\u011fi\u015fiklik yap\u0131lmas\u0131n\u0131 istemedi\u011finiz birtak\u0131m veriler varsa ve e\u011fer siz bu verileri liste benzeri bir ta\u015f\u0131y\u0131c\u0131 i\u00e7ine yerle\u015ftirmek istiyorsan\u0131z, listeler yerine demetleri kullanabilirsiniz. Ayr\u0131ca demetler \u00fczerinde i\u015flem yapmak listelere k\u0131yasla daha h\u0131zl\u0131d\u0131r. Dolay\u0131s\u0131yla, performans avantaj\u0131 nedeniyle de listeler yerine demetleri kullanmak isteyebilirsiniz. Bir demetin \u00fczerinde de\u011fi\u015fiklik yapmak istiyorsak, onu yeniden tan\u0131mlamal\u0131y\u0131z. demet = ('a', 'b') demet = demet + ('c',) demet ('a', 'b', 'c') Demetlerin Kullan\u0131m Alanlar\u0131 Bu veri tipi \u00f6zellikle programlar\u0131n ayar (conf) dosyalar\u0131nda bu veri tipi s\u0131kl\u0131kla kullan\u0131l\u0131r. \u00d6rne\u011fin Python tabanl\u0131 bir web \u00e7at\u0131s\u0131 (framework ) olan Django\u2019nun settings.py adl\u0131 ayar dosyas\u0131nda pek \u00e7ok de\u011fer bir demet olarak saklan\u0131r. Mesela bir Django projesinde web sayfalar\u0131n\u0131n \u015fablonlar\u0131n\u0131 (template) hangi dizin alt\u0131nda saklayaca\u011f\u0131n\u0131z\u0131 belirledi\u011finiz ayar \u015f\u00f6yle g\u00f6r\u00fcn\u00fcr: TEMPLATE_DIRS = ('/home/projects/djprojects/blog/templates',) Burada, \u015fablon dosyalar\u0131n\u0131n hangi dizinde yer alaca\u011f\u0131n\u0131 bir demet i\u00e7inde g\u00f6steriyoruz. Bu demet i\u00e7ine birden fazla dizin ad\u0131 yazabilirdik. Ama biz b\u00fct\u00fcn \u015fablon dosyalar\u0131n\u0131 tek bir dizin alt\u0131nda tutmay\u0131 tercih etti\u011fimiz i\u00e7in tek \u00f6\u011feli bir demet tan\u0131mlam\u0131\u015f\u0131z. Bu arada, daha \u00f6nce de s\u00f6yledi\u011fimiz gibi, demetlerle ilgili en s\u0131k yapaca\u011f\u0131n\u0131z hata, tek \u00f6\u011feli demet tan\u0131mlamaya \u00e7al\u0131\u015f\u0131rken asl\u0131nda yanl\u0131\u015fl\u0131kla bir karakter dizisi tan\u0131mlamak olacakt\u0131r. \u00d6rne\u011fin yukar\u0131daki TEMPLATE_DIRS de\u011fi\u015fkenini \u015f\u00f6yle yazsayd\u0131k: TEMPLATE_DIRS = ('/home/projects/djprojects/blog/templates') Asl\u0131nda bir demet de\u011fil, alelade bir karakter dizisi tan\u0131mlam\u0131\u015f olurduk... Son G\u00fcncelleme: 20 Arala\u0131k 2019 - Cuma","title":"Listeler ve Demetler"},{"location":"python/python_listeler_demetler/#listelerlist-ve-demetlertuple","text":"Listeler Python'daki veri tiplerinden biridir.","title":"Listeler(list) ve Demetler(Tuple)"},{"location":"python/python_listeler_demetler/#liste-tanmlamak","text":"Bir liste elde etmek i\u00e7in, \u00f6\u011feleri birbirinden virg\u00fclle ay\u0131r\u0131p, bunlar\u0131n hepsini k\u00f6\u015feli parantezler i\u00e7ine al\u0131yoruz. liste = [\"deger1\",\"deger2\",\"deger3\"] Tan\u0131mlad\u0131\u011f\u0131m\u0131z liste'nin bir liste olup olmad\u0131\u011f\u0131n\u0131 anlamak i\u00e7in type fonksiyonu kullanarak kontrol edelim. type(liste) list G\u00f6rm\u00fc\u015f oldu\u011funuz gibi tan\u0131mlam\u0131\u015f oldu\u011fumuz liste ad\u0131ndaki de\u011fi\u015fken bir list tipinde. Listeler \u00e7ok farkl\u0131 de\u011ferler bar\u0131nd\u0131rabilir. Yani sadece say\u0131 de\u011ferleri de\u011fil ayn\u0131 zamanda karakter dizisi de\u011ferleride i\u00e7erebilir. \u00d6rne\u011fin: liste = [\"deger1\",\"deger2\",1,2,3,4] E\u011fer istersek listenin i\u00e7inde ba\u015fka listelerde tan\u0131mlayabiliriz. liste = [\"deger1\",\"deger2\",[\"degisken1\",\"degisken2\"],1,2,3,4] liste de\u011fi\u015fkenimizin i\u00e7eri\u011fine bakal\u0131m: liste ['deger1', 'deger2', ['degisken1', 'degisken2'], 1, 2, 3, 4] Peki listenin i\u00e7erisinde bulunan de\u011ferlerin tiplerini kontrol edelim. \u00c7\u00fcnk\u00fc ikinci bir liste nas\u0131l g\u00f6z\u00fckmekte bakal\u0131m: for deger in liste: print(\"{} adl\u0131 \u00f6\u011fenin veri tipi: {}\".format(deger, type(deger))) deger1 adl\u0131 \u00f6\u011fenin veri tipi: <class 'str'> deger2 adl\u0131 \u00f6\u011fenin veri tipi: <class 'str'> ['degisken1', 'degisken2'] adl\u0131 \u00f6\u011fenin veri tipi: <class 'list'> 1 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> 2 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> 3 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> 4 adl\u0131 \u00f6\u011fenin veri tipi: <class 'int'> G\u00f6rm\u00fc\u015f oldu\u011funuz gibi listenin i\u00e7erisinde bulunan di\u011fer bir listede list tipindedir.","title":"Liste Tan\u0131mlamak"},{"location":"python/python_listeler_demetler/#list-fonksiyonu","text":"Bu fonksiyonu elimizde bulunan bir karakter dizisini listeye \u00e7evirmemize yarar. karakter_dizisi = \"abcdefgh\" Bu karakter dizisini list fonksiyonu arac\u0131l\u0131\u011f\u0131 ile bir list de\u011fi\u015fkenine \u00e7evirelim. liste = list(karakter_dizisi) Liste de\u011fi\u015fkenin veri tipine bakal\u0131m: type(liste) list liste de\u011fi\u015fkenin veri tipi list'tir. \u015eimdide i\u00e7eri\u011fine bakal\u0131m: liste ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] E\u011fer istersek range fonksiyonu ile de say\u0131lardan olu\u015fan bir listeyi h\u0131zl\u0131ca tan\u0131mlayabiliriz. sayilar = list(range(10)) Olu\u015fturdu\u011fumuz sayilar listesinin veri tipine bakal\u0131m: type(sayilar) list \u015eimdide sayilarin i\u00e7eri\u011fine bakal\u0131m: sayilar [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","title":"list() Fonksiyonu"},{"location":"python/python_listeler_demetler/#listelerin-oglerine-erismek","text":"Listelerin \u00f6\u011felerine eri\u015febilmemiz i\u00e7in k\u00f6\u015feli parantez i\u00e7erisinde eri\u015fmek istedi\u011fimiz de\u011ferin s\u0131ra numaras\u0131n\u0131 yazmam\u0131z gerekmektedir. Burada dikkat edilmesi gereken durum listelerdeki de\u011ferleri saymaya s\u0131f\u0131rdan ba\u015fl\u0131yoruz. liste = [\"deger1\",\"deger2\",\"deger3\"] liste de\u011fi\u015fkenin en son de\u011ferine eri\u015felim. Bunun i\u00e7in iki yol mevcut. Yol liste[2] 'deger3' Yol liste[-1] 'deger3' Karakter dizilerini dilimlemede oldu\u011fu gibi burada da listeyi dilimleyebiliriz. liste[0:2] ['deger1', 'deger2']","title":"Listelerin \u00d6\u011flerine Eri\u015fmek"},{"location":"python/python_listeler_demetler/#listelerin-ogelerini-degistirmek","text":"Listelerin \u00f6\u011felerini de\u011fi\u015ftirmek m\u00fcmk\u00fcn, bu durumu inceleyelim. renkler = [\"k\u0131rm\u0131z\u0131\",\"beyaz\",\"sar\u0131\",\"mor\",\"kahverengi\"] renkler listemizin i\u00e7eri\u011fine bakal\u0131m: renkler ['k\u0131rm\u0131z\u0131', 'beyaz', 'sar\u0131', 'mor', 'kahverengi'] renkler de\u011fi\u015fkenimizin i\u00e7erisinde bulunan s\u0131f\u0131r\u0131nc\u0131 de\u011feri yani k\u0131rm\u0131z\u0131 de\u011ferini gri ile de\u011fi\u015ftirelim: renkler[0] = \"gri\" renkler listemizi tekrardan listeleyelim. renkler ['gri', 'beyaz', 'sar\u0131', 'mor', 'kahverengi']","title":"Listelerin \u00d6\u011felerini De\u011fi\u015ftirmek"},{"location":"python/python_listeler_demetler/#listeye-oge-eklemek","text":"Listelerin i\u00e7erisine yeni \u00f6\u011feler eklemek m\u00fcmk\u00fcn. Bu durumu inceleyelim: renkler + [\"lacivert\"] ['gri', 'beyaz', 'sar\u0131', 'mor', 'kahverengi', 'lacivert']","title":"Listeye \u00d6\u011fe Eklemek"},{"location":"python/python_listeler_demetler/#listeleri-birlestirmek","text":"diller1 = [\"Python\",\"Java\",\"C#\"] diller2 = [\"Go\",\"C++\",\"Fortran\"] Elimizde iki adet liste mevcut. Bu listeler yaz\u0131l\u0131m dillerini bar\u0131nd\u0131rmaktad\u0131r. Bu listeleri birle\u015ftirelim. programlama = diller1 + diller2 Yeni olu\u015fturdu\u011fumuz bu de\u011fi\u015fkenin veri tipine bakal\u0131m. type(programlama) list Tan\u0131mlad\u0131\u011f\u0131m\u0131z de\u011fi\u015fkenin t\u00fcr\u00fc list, \u015fimdide i\u00e7eri\u011fine bakal\u0131m: programlama ['Python', 'Java', 'C#', 'Go', 'C++', 'Fortran']","title":"Listeleri Birle\u015ftirmek"},{"location":"python/python_listeler_demetler/#listeden-oge-ckarmak","text":"Bir listeden \u00f6\u011fe silmek i\u00e7in del adl\u0131 ifadeden yararlanabilirsiniz. \u00d6rne\u011fin: del programlama[-1] Listemizin i\u00e7eri\u011fine bakal\u0131m: programlama ['Python', 'Java', 'C#', 'Go', 'C++']","title":"Listeden \u00d6\u011fe \u00c7\u0131karmak"},{"location":"python/python_listeler_demetler/#listeleri-silmek","text":"Python\u2019da listeleri tamamen silmek de m\u00fcmk\u00fcnd\u00fcr. Listeden \u00f6\u011fe \u00e7\u0131karma i\u015fleminde oldu\u011fu gibi del fonksiyonu silmede kullan\u0131lmaktad\u0131r. \u00d6rne\u011fin: del programlama","title":"Listeleri Silmek"},{"location":"python/python_listeler_demetler/#listeleri-kopyalamak","text":"Listeleri kopyalarken dikkat edilmesi gereken \u00e7ok \u00f6nemli bir husus mevcut. \u0130lk \u00f6nce bu hususa de\u011finelim daha sonra do\u011fru y\u00f6nteme bakal\u0131m. liste_1 = [\"a\",\"b\",\"c\"] Bir ba\u015fka de\u011fi\u015fkene liste_1 de\u011fi\u015fkenimizi kopyalayal\u0131m. liste_2 = liste_1 liste_2 de\u011fi\u015fkenimizin i\u00e7eri\u011fini kontrol edelim. liste_2 ['a', 'b', 'c'] liste_2 i\u00e7erisinde bir de\u011fi\u015fiklik yapal\u0131m. liste_2[0] = \"e\" liste_2 de\u011fi\u015fkenimizin i\u00e7eri\u011fini kontrol edelim. liste_2 ['e', 'b', 'c'] G\u00f6rm\u00fc\u015f oldu\u011funuz gibi liste_2 de\u011fi\u015fkenimizin i\u00e7eri\u011fi de\u011fi\u015fti. Peki liste_1 de\u011fi\u015fkenimizin i\u00e7eri\u011finde durum nas\u0131l: liste_1 ['e', 'b', 'c'] liste_1 de\u011fi\u015fkenin i\u00e7eri\u011finin de\u011fi\u015fmi\u015f olmas\u0131 pek bekledi\u011fimiz bir durum de\u011fil. Bu durumun sebebi: Yaz\u0131l\u0131m dillerinde olu\u015fturdu\u011fumuz her de\u011fi\u015fkende RAM \u00fczerinde bir alanda saklanmaktad\u0131r. Bu alan her de\u011fi\u015fken i\u00e7in farkl\u0131d\u0131r. Fakat bizim daha yeni yapt\u0131\u011f\u0131m\u0131z kopyalama y\u00f6nteminde RAM \u00fczerinde bulunan alan\u0131 kopyalam\u0131\u015f olduk. Peki bu iki de\u011fi\u015fkenin RAM \u00fczerinde g\u00f6sterdi\u011fi adreslere bakal\u0131m. id(liste_1) 4559703968 id(liste_2) 4559703968 G\u00f6rm\u00fc\u015f oldu\u011funuz gibi iki de\u011fi\u015fkende RAM \u00fczerinde ayn\u0131 noktay\u0131 g\u00f6stermektedir. Peki liste kopyalaman\u0131n en do\u011fru \u015fekli nas\u0131l, hadi inceleyelim: liste1 = [\"a\",\"b\",\"c\"] liste1 de\u011fi\u015fkenimizi bir ba\u015fka de\u011fi\u015fkene aktaral\u0131m. liste2 = liste1[:] liste2 de\u011fi\u015fkenimizin i\u00e7eri\u011fini kontrol edelim. liste2 ['a', 'b', 'c'] \u015eimdi liste2 \u00fczerinde bir de\u011fi\u015fiklik yapal\u0131m. liste2[0] = \"d\" liste2 de\u011fi\u015fkenin i\u00e7eri\u011fini kontrol edelim. liste2 ['d', 'b', 'c'] liste1 de\u011fi\u015fkeninin i\u00e7eri\u011fini kontrol edelim: liste1 ['a', 'b', 'c'] liste2 \u00fczerinde yapm\u0131\u015f oldu\u011fumuz de\u011fi\u015fken liste1 de\u011fi\u015fkenini etkilememi\u015ftir.","title":"Listeleri Kopyalamak"},{"location":"python/python_listeler_demetler/#liste-uretecleri-list-comprehensions","text":"Liste \u00fcrete\u00e7leri, ad\u0131nda anla\u015f\u0131ld\u0131\u011f\u0131 \u00fczere liste \u00fcretmeye yarayan yap\u0131d\u0131r. \u00d6rnek \u00fczerinden inceleyelim: liste = [i for i in range(10)] Yukar\u0131da bulunan kod sat\u0131rlar\u0131 ile 0'dan 10'a kadar say\u0131lar\u0131n bulundu\u011fu bir liste olu\u015fturmaktad\u0131r. Yazm\u0131\u015f oldu\u011fumuz bu kodun uzun versiyonunu yazal\u0131m: liste = [] for i in range(10): liste += [i] Yazm\u0131\u015f oldu\u011fumuz uzun kod ile k\u0131sa kod ayn\u0131 i\u015fi yapmaktad\u0131r. Biri kolayl\u0131k sunmaktad\u0131r. Bir ba\u015fka \u00f6rnek \u00fczerinden inceleyelim. 0'dan 10'a kadar olan say\u0131lar i\u00e7erisinde 2'ye tam b\u00f6l\u00fclenleri listeleyelim. liste = [i for i in range(10) if i % 2 == 0] Yazm\u0131\u015f oldu\u011fumuz bu kodun normal versiyonunu yazal\u0131m: liste = [] for i in range(10): if i % 2 == 0: liste += [i]","title":"Liste \u00dcrete\u00e7leri (List Comprehensions)"},{"location":"python/python_listeler_demetler/#demetler","text":"Demetler, \u00f6zellikle g\u00f6r\u00fcn\u00fc\u015f olarak listelere \u00e7ok benzeyen bir veri tipidir. Bu veri tipi de, t\u0131pk\u0131 listeler gibi, farkl\u0131 veri tiplerini i\u00e7inde bar\u0131nd\u0131ran kapsay\u0131c\u0131 bir veri tipidir.","title":"Demetler"},{"location":"python/python_listeler_demetler/#demet-tanmlamak","text":"Demet tan\u0131mlaman\u0131n birka\u00e7 yolu bulunmaktad\u0131r. Yol demet = (\"a\",\"b\",1,2) Olu\u015fturdu\u011fumuz bu de\u011fi\u015fkenin demet olup olmad\u0131\u011f\u0131n\u0131 anlamak i\u00e7in type fonksiyonu ile bakal\u0131m: type(demet) tuple Yol demet = \"a\",\"b\",\"c\",1,2 Olu\u015fturdu\u011fumuz bu de\u011fi\u015fkenin veri tipine bakal\u0131m: type(demet) tuple \u0130\u00e7eri\u011fine bakal\u0131m: demet ('a', 'b', 'c', 1, 2) Yol demet = tuple(\"abcd12345\") veri tipine bakal\u0131m: type(demet) tuple \u0130\u00e7eri\u011fine bakal\u0131m: demet ('a', 'b', 'c', 'd', '1', '2', '3', '4', '5')","title":"Demet Tan\u0131mlamak"},{"location":"python/python_listeler_demetler/#tek-ogeli-bir-demet-tanmlamak","text":"Tek \u00f6\u011feli bir demet tan\u0131mlayal\u0131m: demet = (\"a\") Tan\u0131mlad\u0131\u011f\u0131m\u0131z de\u011fi\u015fkenin demet olup olmad\u0131\u011f\u0131na bakal\u0131m: type(demet) str Tan\u0131mlad\u0131\u011f\u0131m\u0131z de\u011fi\u015fken bir karakter dizisi(str). Peki tek \u00f6\u011feli bir demet nas\u0131l tan\u0131mlayabiliriz: Yol demet = (\"a\"), Yol demet = \"a\", veri tipini kontrol edelim: type(demet) tuple Yukar\u0131da bulunan iki y\u00f6ntem ile de demet tan\u0131mlayabilirsiniz.","title":"Tek \u00d6\u011feli Bir Demet Tan\u0131mlamak"},{"location":"python/python_listeler_demetler/#demetlerin-ogelerine-erismek","text":"Demetlerin \u00f6\u011felerine eri\u015febilmek listelerde oldu\u011fu gibi k\u00f6\u015feli parantez i\u00e7erisinde eri\u015fmek istedi\u011fimiz de\u011ferin s\u0131ra numaras\u0131n\u0131 yazmam\u0131z yeterli: demet = (\"deger1\",\"deger2\",\"deger3\") demet[0] 'deger1' demet[-1] 'deger3'","title":"Demetlerin \u00d6\u011felerine Eri\u015fmek"},{"location":"python/python_listeler_demetler/#demetlerle-listelerin-birbirinde-fark","text":"Demetlerle Listeler birbirine \u00e7ok benzerler. Fakat \u00e7ok belirgin farklar\u0131 bulunmaktad\u0131r. Demetler de\u011fi\u015ftirilemez(immutable) iken listeler de\u011fi\u015ftirilebilir(mutable) veri t\u00fcr\u00fcd\u00fcr. demet = (\"a\",\"b\",\"c\",\"d\") demet de\u011fi\u015fkenimizin ilk de\u011ferini de\u011fi\u015ftirmeye \u00e7al\u0131\u015fal\u0131m: demet[0] = \"f\" --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-73-0a94098063ff> in <module> ----> 1 demet[0] = \"f\" TypeError: 'tuple' object does not support item assignment G\u00f6rm\u00fc\u015f oldu\u011funuz gibi demet de\u011fi\u015fkenin ilk de\u011ferini de\u011fi\u015ftirmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z zaman de\u011fi\u015ftiremeyece\u011fimizi belirtti. E\u011fer program\u0131n ak\u0131\u015f\u0131 esnas\u0131nda \u00fczerinde de\u011fi\u015fiklik yapmayaca\u011f\u0131n\u0131z veya de\u011fi\u015fiklik yap\u0131lmas\u0131n\u0131 istemedi\u011finiz birtak\u0131m veriler varsa ve e\u011fer siz bu verileri liste benzeri bir ta\u015f\u0131y\u0131c\u0131 i\u00e7ine yerle\u015ftirmek istiyorsan\u0131z, listeler yerine demetleri kullanabilirsiniz. Ayr\u0131ca demetler \u00fczerinde i\u015flem yapmak listelere k\u0131yasla daha h\u0131zl\u0131d\u0131r. Dolay\u0131s\u0131yla, performans avantaj\u0131 nedeniyle de listeler yerine demetleri kullanmak isteyebilirsiniz. Bir demetin \u00fczerinde de\u011fi\u015fiklik yapmak istiyorsak, onu yeniden tan\u0131mlamal\u0131y\u0131z. demet = ('a', 'b') demet = demet + ('c',) demet ('a', 'b', 'c')","title":"Demetlerle Listelerin Birbirinde Fark\u0131"},{"location":"python/python_listeler_demetler/#demetlerin-kullanm-alanlar","text":"Bu veri tipi \u00f6zellikle programlar\u0131n ayar (conf) dosyalar\u0131nda bu veri tipi s\u0131kl\u0131kla kullan\u0131l\u0131r. \u00d6rne\u011fin Python tabanl\u0131 bir web \u00e7at\u0131s\u0131 (framework ) olan Django\u2019nun settings.py adl\u0131 ayar dosyas\u0131nda pek \u00e7ok de\u011fer bir demet olarak saklan\u0131r. Mesela bir Django projesinde web sayfalar\u0131n\u0131n \u015fablonlar\u0131n\u0131 (template) hangi dizin alt\u0131nda saklayaca\u011f\u0131n\u0131z\u0131 belirledi\u011finiz ayar \u015f\u00f6yle g\u00f6r\u00fcn\u00fcr: TEMPLATE_DIRS = ('/home/projects/djprojects/blog/templates',) Burada, \u015fablon dosyalar\u0131n\u0131n hangi dizinde yer alaca\u011f\u0131n\u0131 bir demet i\u00e7inde g\u00f6steriyoruz. Bu demet i\u00e7ine birden fazla dizin ad\u0131 yazabilirdik. Ama biz b\u00fct\u00fcn \u015fablon dosyalar\u0131n\u0131 tek bir dizin alt\u0131nda tutmay\u0131 tercih etti\u011fimiz i\u00e7in tek \u00f6\u011feli bir demet tan\u0131mlam\u0131\u015f\u0131z. Bu arada, daha \u00f6nce de s\u00f6yledi\u011fimiz gibi, demetlerle ilgili en s\u0131k yapaca\u011f\u0131n\u0131z hata, tek \u00f6\u011feli demet tan\u0131mlamaya \u00e7al\u0131\u015f\u0131rken asl\u0131nda yanl\u0131\u015fl\u0131kla bir karakter dizisi tan\u0131mlamak olacakt\u0131r. \u00d6rne\u011fin yukar\u0131daki TEMPLATE_DIRS de\u011fi\u015fkenini \u015f\u00f6yle yazsayd\u0131k: TEMPLATE_DIRS = ('/home/projects/djprojects/blog/templates') Asl\u0131nda bir demet de\u011fil, alelade bir karakter dizisi tan\u0131mlam\u0131\u015f olurduk... Son G\u00fcncelleme: 20 Arala\u0131k 2019 - Cuma","title":"Demetlerin Kullan\u0131m Alanlar\u0131"},{"location":"python/python_listeler_demetler_metodlari/","text":"Listelerin Metotlar\u0131 Listelerin bar\u0131nd\u0131rd\u0131\u011f\u0131 metotlar\u0131 dir() fonksiyonu arac\u0131l\u0131\u011f\u0131 ile listeleyelim: dir(list) ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] append() append kelimesi \u0130ngilizcede \u2018eklemek, ilave etmek, ili\u015ftirmek\u2019 gibi anlamlara gelir. Bu metodu, bir listeye \u00f6\u011fe eklemek i\u00e7in kullan\u0131yoruz. Listeye yeni \u00f6\u011fe eklemek i\u00e7in iki farkl\u0131 yol kullanabiliriz. Yol liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.append(\"kiraz\") print(liste) ['elma', 'armut', '\u00e7ilek', 'kiraz'] Yol liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste = liste + [\"kiraz\"] print(liste) ['elma', 'armut', '\u00e7ilek', 'kiraz'] append() metodunu kullanarak bir listeye birden fazla \u00f6\u011fe ekleyemezsiniz: liste = [1, 2, 3] liste.append(4, 5, 6) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-6-e4d572564cdb> in <module> 1 liste = [1, 2, 3] ----> 2 liste.append(4, 5, 6) TypeError: append() takes exactly one argument (3 given) Bu sebeple, ekleyece\u011finiz listenin \u00f6\u011feleri \u00fczerinde bir for d\u00f6ng\u00fcs\u00fc kurman\u0131z gerekir: liste = [1, 2, 3] for i in [4, 5, 6]: liste.append(i) print(liste) [1, 2, 3, 4, 5, 6] extend() extend kelimesi \u0130ngilizcede \u2018geni\u015fletmek, yaymak\u2019 gibi anlamlara gelir. \u0130\u015fte extend() adl\u0131 metot da kelime anlam\u0131na uygun olarak listeleri \u2018geni\u015fletir\u2019. liste1 = [1, 3, 4] liste2 = [10, 11, 12] liste1. extend(liste2) print(liste1) [1, 3, 4, 10, 11, 12] insert() insert kelimesi \u2018yerle\u015ftirmek, sokmak\u2019 gibi anlamlara gelir. insert() metodu da bu anlama uygun olarak, \u00f6\u011feleri listenin istedi\u011fimiz bir konumuna yerle\u015ftirir. liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.insert(0, \"kiraz\") print(liste) ['kiraz', 'elma', 'armut', '\u00e7ilek'] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi insert() metodu iki parametre al\u0131yor. \u0130lk parametre , \u00f6\u011fenin hangi konuma yerle\u015ftirilece\u011fini, ikinci parametre ise yerle\u015ftirilecek \u00f6\u011fenin ne oldu\u011funu g\u00f6steriyor. Yukar\u0131daki \u00f6rnekte \u201ckiraz\u201d \u00f6\u011fesini listenin 0. konumuna, yani listenin en ba\u015f\u0131na yerle\u015ftiriyoruz. remove() Bu metot listeden \u00f6\u011fe silmemizi sa\u011flar. \u00d6rne\u011fin: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.remove(\"elma\") liste ['armut', '\u00e7ilek'] reverse() Bu metot listelerin \u00f6\u011felerini ters \u00e7evirebilmemizi sa\u011flar. \u00d6rne\u011fin: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.reverse() liste ['\u00e7ilek', 'armut', 'elma'] pop() T\u0131pk\u0131 remove() metodu gibi, bu metot da bir listeden \u00f6\u011fe silmemizi sa\u011flar: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.pop() '\u00e7ilek' Ancak bu metot, remove() metodundan biraz farkl\u0131 davran\u0131r. pop() metodunu kullanarak bir liste \u00f6\u011fesini sildi\u011fimizde, silinen \u00f6\u011fe ekrana bas\u0131lacakt\u0131r. Bu metot parametresiz olarak kullan\u0131ld\u0131\u011f\u0131nda listenin son \u00f6\u011fesini listeden atar. Alternatif olarak, bu metodu bir parametre ile birlikte de kullanabilirsiniz. \u00d6rne\u011fin: liste.pop(0) 'elma' Bu komut listenin 0. \u00f6\u011fesini listeden atar ve at\u0131lan \u00f6\u011feyi ekrana basar. sort() Diyelim ki elimizde \u015f\u00f6yle bir liste mevcut: kisiler = ['Ahmet', 'Mehmet', 'Ceylan', 'Seyhan', 'Mahmut', 'Zeynep', 'Abdullah', 'Kadir', 'Kamil', 'Selin', 'Senem', 'Sinem', 'Tayfun', 'Tuna', 'Tolga'] Bu listedeki isimleri mesela alfabe s\u0131ras\u0131na dizmek i\u00e7in sort() metodunu kullanabiliriz: kisiler.sort() kisiler ['Abdullah', 'Ahmet', 'Ceylan', 'Kadir', 'Kamil', 'Mahmut', 'Mehmet', 'Selin', 'Senem', 'Seyhan', 'Sinem', 'Tayfun', 'Tolga', 'Tuna', 'Zeynep'] Bu metot elbette yaln\u0131zca harfleri alfabe s\u0131ras\u0131na dizmek i\u00e7in de\u011fil say\u0131lar\u0131 s\u0131ralamak i\u00e7in de kullan\u0131labilir: sayilar = [1, 0, -1, 4, 10, 3, 6] sayilar.sort() sayilar [-1, 0, 1, 3, 4, 6, 10] Listelerin sort() metodu T\u00fcrk\u00e7e karakterleri d\u00fczg\u00fcn s\u0131ralayamaz. E\u011fer T\u00fcrk\u00e7e karakterleri s\u0131ralamam\u0131z gereken bir program yaz\u0131yorsak bizim sort() metodunun i\u015fleyi\u015fine m\u00fcdahale etmemiz gerekir. Bu durumu hat\u0131rlamakta fayda var. index() Bu metot bir liste \u00f6\u011fesinin liste i\u00e7indeki konumunu s\u00f6yler bize: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.index(\"\u00e7ilek\") 2 count() Bu metot bir \u00f6\u011fenin o veri tipi i\u00e7inde ka\u00e7 kez ge\u00e7ti\u011fini s\u00f6yler: liste = [\"elma\", \"armut\", \"elma\", \"\u00e7ilek\"] liste.count(\"elma\") 2 copy() Bu metot bir listeyi kopyalayabilmemizi sa\u011flar: liste1 = [\"ahmet\", \"mehmet\", \"\u00f6zlem\"] liste2 = liste1.copy() liste2 ['ahmet', 'mehmet', '\u00f6zlem'] clear() Bu metodun g\u00f6revi bir listenin i\u00e7eri\u011fini silmektir. Diyelim ki elimizde \u015f\u00f6yle bir liste var: liste = [1, 2, 3, 5, 10, 20, 30, 45] Bu listenin i\u00e7ini bo\u015faltmak i\u00e7in clear() metodunu kullanabiliriz: liste.clear() liste [] Bu metodun del s\u00f6zc\u00fc\u011f\u00fcnden farkl\u0131 oldu\u011funu dikkat edin. clear() metodu listenin i\u00e7eri\u011fini bo\u015falt\u0131rken, del s\u00f6zc\u00fc\u011f\u00fc listeyi oldu\u011fu gibi ortadan kald\u0131r\u0131r. Demetlerin Metodlar\u0131 Demetlerin bar\u0131nd\u0131rd\u0131\u011f\u0131 metotlar\u0131 dir() fonksiyonu arac\u0131l\u0131\u011f\u0131 ile listeleyelim: dir(tuple) ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index'] index() Bu metot bir demet \u00f6\u011fesinin demet i\u00e7indeki konumunu s\u00f6yler bize: demet = (\"elma\", \"armut\", \"\u00e7ilek\") demet.index(\"elma\") 0 Listelerin ve karakter dizilerinin index() metoduyla ilgili belirtti\u011fimiz her \u015fey demetlerin index() metodu i\u00e7in de ge\u00e7erlidir. count() Bu metot bir \u00f6\u011fenin o demet i\u00e7inde ka\u00e7 kez ge\u00e7ti\u011fini s\u00f6yler: demet = (\"elma\", \"armut\", \"elma\", \"\u00e7ilek\") demet.count(\"elma\") 2 Karakter dizilerinin ve listelerin count() metoduyla ilgili belirtti\u011fimiz her \u015fey demetlerin count() metodu i\u00e7in de ge\u00e7erlidir. Son G\u00fcncelleme: 23 Aral\u0131k 2019 - Pazartesi","title":"Listeler ve Demetlerin Metodlar\u0131"},{"location":"python/python_listeler_demetler_metodlari/#listelerin-metotlar","text":"Listelerin bar\u0131nd\u0131rd\u0131\u011f\u0131 metotlar\u0131 dir() fonksiyonu arac\u0131l\u0131\u011f\u0131 ile listeleyelim: dir(list) ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']","title":"Listelerin Metotlar\u0131"},{"location":"python/python_listeler_demetler_metodlari/#append","text":"append kelimesi \u0130ngilizcede \u2018eklemek, ilave etmek, ili\u015ftirmek\u2019 gibi anlamlara gelir. Bu metodu, bir listeye \u00f6\u011fe eklemek i\u00e7in kullan\u0131yoruz. Listeye yeni \u00f6\u011fe eklemek i\u00e7in iki farkl\u0131 yol kullanabiliriz. Yol liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.append(\"kiraz\") print(liste) ['elma', 'armut', '\u00e7ilek', 'kiraz'] Yol liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste = liste + [\"kiraz\"] print(liste) ['elma', 'armut', '\u00e7ilek', 'kiraz'] append() metodunu kullanarak bir listeye birden fazla \u00f6\u011fe ekleyemezsiniz: liste = [1, 2, 3] liste.append(4, 5, 6) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-6-e4d572564cdb> in <module> 1 liste = [1, 2, 3] ----> 2 liste.append(4, 5, 6) TypeError: append() takes exactly one argument (3 given) Bu sebeple, ekleyece\u011finiz listenin \u00f6\u011feleri \u00fczerinde bir for d\u00f6ng\u00fcs\u00fc kurman\u0131z gerekir: liste = [1, 2, 3] for i in [4, 5, 6]: liste.append(i) print(liste) [1, 2, 3, 4, 5, 6]","title":"append()"},{"location":"python/python_listeler_demetler_metodlari/#extend","text":"extend kelimesi \u0130ngilizcede \u2018geni\u015fletmek, yaymak\u2019 gibi anlamlara gelir. \u0130\u015fte extend() adl\u0131 metot da kelime anlam\u0131na uygun olarak listeleri \u2018geni\u015fletir\u2019. liste1 = [1, 3, 4] liste2 = [10, 11, 12] liste1. extend(liste2) print(liste1) [1, 3, 4, 10, 11, 12]","title":"extend()"},{"location":"python/python_listeler_demetler_metodlari/#insert","text":"insert kelimesi \u2018yerle\u015ftirmek, sokmak\u2019 gibi anlamlara gelir. insert() metodu da bu anlama uygun olarak, \u00f6\u011feleri listenin istedi\u011fimiz bir konumuna yerle\u015ftirir. liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.insert(0, \"kiraz\") print(liste) ['kiraz', 'elma', 'armut', '\u00e7ilek'] G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi insert() metodu iki parametre al\u0131yor. \u0130lk parametre , \u00f6\u011fenin hangi konuma yerle\u015ftirilece\u011fini, ikinci parametre ise yerle\u015ftirilecek \u00f6\u011fenin ne oldu\u011funu g\u00f6steriyor. Yukar\u0131daki \u00f6rnekte \u201ckiraz\u201d \u00f6\u011fesini listenin 0. konumuna, yani listenin en ba\u015f\u0131na yerle\u015ftiriyoruz.","title":"insert()"},{"location":"python/python_listeler_demetler_metodlari/#remove","text":"Bu metot listeden \u00f6\u011fe silmemizi sa\u011flar. \u00d6rne\u011fin: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.remove(\"elma\") liste ['armut', '\u00e7ilek']","title":"remove()"},{"location":"python/python_listeler_demetler_metodlari/#reverse","text":"Bu metot listelerin \u00f6\u011felerini ters \u00e7evirebilmemizi sa\u011flar. \u00d6rne\u011fin: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.reverse() liste ['\u00e7ilek', 'armut', 'elma']","title":"reverse()"},{"location":"python/python_listeler_demetler_metodlari/#pop","text":"T\u0131pk\u0131 remove() metodu gibi, bu metot da bir listeden \u00f6\u011fe silmemizi sa\u011flar: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.pop() '\u00e7ilek' Ancak bu metot, remove() metodundan biraz farkl\u0131 davran\u0131r. pop() metodunu kullanarak bir liste \u00f6\u011fesini sildi\u011fimizde, silinen \u00f6\u011fe ekrana bas\u0131lacakt\u0131r. Bu metot parametresiz olarak kullan\u0131ld\u0131\u011f\u0131nda listenin son \u00f6\u011fesini listeden atar. Alternatif olarak, bu metodu bir parametre ile birlikte de kullanabilirsiniz. \u00d6rne\u011fin: liste.pop(0) 'elma' Bu komut listenin 0. \u00f6\u011fesini listeden atar ve at\u0131lan \u00f6\u011feyi ekrana basar.","title":"pop()"},{"location":"python/python_listeler_demetler_metodlari/#sort","text":"Diyelim ki elimizde \u015f\u00f6yle bir liste mevcut: kisiler = ['Ahmet', 'Mehmet', 'Ceylan', 'Seyhan', 'Mahmut', 'Zeynep', 'Abdullah', 'Kadir', 'Kamil', 'Selin', 'Senem', 'Sinem', 'Tayfun', 'Tuna', 'Tolga'] Bu listedeki isimleri mesela alfabe s\u0131ras\u0131na dizmek i\u00e7in sort() metodunu kullanabiliriz: kisiler.sort() kisiler ['Abdullah', 'Ahmet', 'Ceylan', 'Kadir', 'Kamil', 'Mahmut', 'Mehmet', 'Selin', 'Senem', 'Seyhan', 'Sinem', 'Tayfun', 'Tolga', 'Tuna', 'Zeynep'] Bu metot elbette yaln\u0131zca harfleri alfabe s\u0131ras\u0131na dizmek i\u00e7in de\u011fil say\u0131lar\u0131 s\u0131ralamak i\u00e7in de kullan\u0131labilir: sayilar = [1, 0, -1, 4, 10, 3, 6] sayilar.sort() sayilar [-1, 0, 1, 3, 4, 6, 10] Listelerin sort() metodu T\u00fcrk\u00e7e karakterleri d\u00fczg\u00fcn s\u0131ralayamaz. E\u011fer T\u00fcrk\u00e7e karakterleri s\u0131ralamam\u0131z gereken bir program yaz\u0131yorsak bizim sort() metodunun i\u015fleyi\u015fine m\u00fcdahale etmemiz gerekir. Bu durumu hat\u0131rlamakta fayda var.","title":"sort()"},{"location":"python/python_listeler_demetler_metodlari/#index","text":"Bu metot bir liste \u00f6\u011fesinin liste i\u00e7indeki konumunu s\u00f6yler bize: liste = [\"elma\", \"armut\", \"\u00e7ilek\"] liste.index(\"\u00e7ilek\") 2","title":"index()"},{"location":"python/python_listeler_demetler_metodlari/#count","text":"Bu metot bir \u00f6\u011fenin o veri tipi i\u00e7inde ka\u00e7 kez ge\u00e7ti\u011fini s\u00f6yler: liste = [\"elma\", \"armut\", \"elma\", \"\u00e7ilek\"] liste.count(\"elma\") 2","title":"count()"},{"location":"python/python_listeler_demetler_metodlari/#copy","text":"Bu metot bir listeyi kopyalayabilmemizi sa\u011flar: liste1 = [\"ahmet\", \"mehmet\", \"\u00f6zlem\"] liste2 = liste1.copy() liste2 ['ahmet', 'mehmet', '\u00f6zlem']","title":"copy()"},{"location":"python/python_listeler_demetler_metodlari/#clear","text":"Bu metodun g\u00f6revi bir listenin i\u00e7eri\u011fini silmektir. Diyelim ki elimizde \u015f\u00f6yle bir liste var: liste = [1, 2, 3, 5, 10, 20, 30, 45] Bu listenin i\u00e7ini bo\u015faltmak i\u00e7in clear() metodunu kullanabiliriz: liste.clear() liste [] Bu metodun del s\u00f6zc\u00fc\u011f\u00fcnden farkl\u0131 oldu\u011funu dikkat edin. clear() metodu listenin i\u00e7eri\u011fini bo\u015falt\u0131rken, del s\u00f6zc\u00fc\u011f\u00fc listeyi oldu\u011fu gibi ortadan kald\u0131r\u0131r.","title":"clear()"},{"location":"python/python_listeler_demetler_metodlari/#demetlerin-metodlar","text":"Demetlerin bar\u0131nd\u0131rd\u0131\u011f\u0131 metotlar\u0131 dir() fonksiyonu arac\u0131l\u0131\u011f\u0131 ile listeleyelim: dir(tuple) ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index']","title":"Demetlerin Metodlar\u0131"},{"location":"python/python_listeler_demetler_metodlari/#index_1","text":"Bu metot bir demet \u00f6\u011fesinin demet i\u00e7indeki konumunu s\u00f6yler bize: demet = (\"elma\", \"armut\", \"\u00e7ilek\") demet.index(\"elma\") 0 Listelerin ve karakter dizilerinin index() metoduyla ilgili belirtti\u011fimiz her \u015fey demetlerin index() metodu i\u00e7in de ge\u00e7erlidir.","title":"index()"},{"location":"python/python_listeler_demetler_metodlari/#count_1","text":"Bu metot bir \u00f6\u011fenin o demet i\u00e7inde ka\u00e7 kez ge\u00e7ti\u011fini s\u00f6yler: demet = (\"elma\", \"armut\", \"elma\", \"\u00e7ilek\") demet.count(\"elma\") 2 Karakter dizilerinin ve listelerin count() metoduyla ilgili belirtti\u011fimiz her \u015fey demetlerin count() metodu i\u00e7in de ge\u00e7erlidir. Son G\u00fcncelleme: 23 Aral\u0131k 2019 - Pazartesi","title":"count()"},{"location":"python/python_sayilar/","text":"Say\u0131lar Python'da \u00fc\u00e7 t\u00fcr say\u0131 bulunmaktad\u0131r: Tam Say\u0131lar (integer) Kayan Noktal\u0131 Say\u0131lar (floating point numbers veya k\u0131saca float) Karma\u015f\u0131k Say\u0131lar (complex numbers) E\u011fer bir veri type(veri) sorgulamas\u0131na int cevab\u0131 veriyorsa o veri bir tam say\u0131d\u0131r. E\u011fer bir veri type(veri) sorgulamas\u0131na float cevab\u0131 veriyorsa o veri bir kayan noktal\u0131 say\u0131d\u0131r. E\u011fer bir veri type(veri) sorgulamas\u0131na complex cevab\u0131n\u0131 veriyorsa o veri bir karma\u015f\u0131k say\u0131d\u0131r. Mesela \u015funlar birer tam say\u0131d\u0131r: 15, 4, 33 \u015eunlar birer kayan noktal\u0131 say\u0131d\u0131r: 3.5, 6.6, 2.3 \u015eunlarsa birer karma\u015f\u0131k say\u0131d\u0131r: 3+3j, 5+2j, 19+10j Fonksiyon G\u00f6revi \u00d6rnek int() Bir veriyi tam say\u0131ya do\u0308nu\u0308s\u0327tu\u0308ru\u0308r int(\"2\") float() Bir veriyi kayan noktal\u0131 say\u0131ya do\u0308nu\u0308s\u0327tu\u0308ru\u0308r float(2) complex() Bir veriyi karmas\u0327\u0131k say\u0131ya do\u0308nu\u0308s\u0327tu\u0308ru\u0308r complex(2) Say\u0131lar\u0131n Metotlar\u0131 Tam Say\u0131lar\u0131n Metotlar\u0131 Tam say\u0131lar\u0131n hangi metotlar ve nitelikleri oldu\u011funa bakal\u0131m: [i for i in dir(int) if not i.startswith(\"_\")] ['bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] bit_length() Bilgisayarlar ancak ve ancak say\u0131larla i\u015flem yapabilir. Bilgisayarlar\u0131n i\u015flem yapabildi\u011fi say\u0131lar da onlu sistemdeki say\u0131lar de\u011fil, ikili sistemdeki say\u0131lard\u0131r. Yani 0\u2019lar ve 1\u2019ler. , \u0130\u015fte herhangi bir tam say\u0131n\u0131n ka\u00e7 bit\u2019lik bir yer kaplad\u0131\u011f\u0131n\u0131 \u00f6\u011frenmek i\u00e7in, tam say\u0131lar\u0131n metotlar\u0131ndan biri olan bit_length() metodundan yararlanaca\u011f\u0131z: sayi = 10 sayi.bit_length() 4 Demek ki 10 say\u0131s\u0131 bellekte d\u00f6rt bitlik bir yer kapl\u0131yormu\u015f. Yani bu say\u0131n\u0131n ikili sistemdeki kar\u015f\u0131l\u0131\u011f\u0131 olan 1010 say\u0131s\u0131 d\u00f6rt basamaktan olu\u015fuyormu\u015f. bit_length() metodunu do\u011frudan say\u0131lar \u00fczerine uygulayam\u0131yoruz. Yani: 10.bit_length() File \"<ipython-input-4-2c75d808345c>\", line 1 10.bit_length() ^ SyntaxError: invalid syntax E\u011fer direk say\u0131 \u00fczerinde kullanmak istiyorsak \u015f\u00f6yle yapmal\u0131y\u0131z: (10).bit_length() 4 Kayan Noktal\u0131 Say\u0131lar\u0131n Metotlar\u0131 Kayan noktal\u0131 say\u0131lar\u0131n hangi metotlar ve nitelikleri oldu\u011funa bakal\u0131m: [i for i in dir(float) if not i.startswith(\"_\")] ['as_integer_ratio', 'conjugate', 'fromhex', 'hex', 'imag', 'is_integer', 'real'] as_integer_ratio() Bu metot, birbirine b\u00f6l\u00fcnd\u00fc\u011f\u00fcnde ilgili kayan noktal\u0131 say\u0131y\u0131 veren iki adet tam say\u0131 verir bize. \u00d6rnek \u00fczerinden a\u00e7\u0131klayal\u0131m: say\u0131 = 4.5 say\u0131.as_integer_ratio() (9, 2) 9 say\u0131s\u0131n\u0131 2 say\u0131s\u0131na b\u00f6ld\u00fc\u011f\u00fcm\u00fczde 4.5 say\u0131s\u0131n\u0131 elde ederiz. \u0130\u015fte as_integer_ratio() metodu, bu 9 ve 2 say\u0131lar\u0131n\u0131 bize ayr\u0131 ayr\u0131 verir. is_integer() Bir kayan noktal\u0131 say\u0131n\u0131n ondal\u0131k k\u0131sm\u0131nda 0 harici bir say\u0131n\u0131n olup olmad\u0131\u011f\u0131n\u0131 kontrol etmek i\u00e7in bu metodu kullan\u0131yoruz. \u00d6rne\u011fin: (12.0).is_integer() True (12.5).is_integer() False Karma\u015f\u0131k Say\u0131lar\u0131n Metotlar\u0131 Gelelim karma\u015f\u0131k say\u0131lar\u0131n metot ve niteliklerine... [i for i in dir(complex) if not i.startswith(\"_\")] ['conjugate', 'imag', 'real'] imag Bir ger\u00e7ek bir de sanal k\u0131s\u0131mdan olu\u015fan say\u0131lara karma\u015f\u0131k say\u0131lar (complex) ad\u0131 verildi\u011fini biliyorsunuz. \u00d6rne\u011fin \u015fu bir karma\u015f\u0131k say\u0131d\u0131r: 12+4j \u0130\u015fte imag adl\u0131 nitelik, bize bir karma\u015f\u0131k say\u0131n\u0131n sanal k\u0131sm\u0131n\u0131 verir: c = 12+4j c.imag 4.0 real real adl\u0131 nitelik bize bir karma\u015f\u0131k say\u0131n\u0131n ger\u00e7ek k\u0131sm\u0131n\u0131 verir: c = 12+4j c.real 12.0 Aritmetik Fonksiyonlar Python programlama dili, bize say\u0131larla rahat \u00e7al\u0131\u015fabilmemiz i\u00e7in baz\u0131 fonksiyonlar sunar. Bu fonksiyonlar\u0131 kullanarak, karma\u015f\u0131k aritmetik i\u015flemleri kolayca yapabiliriz. Bu fonksiyonlar\u0131 inceleyelim: abs() Bu fonksiyon bize bir say\u0131n\u0131n mutlak de\u011ferini verir: abs(-2) 2 divmod() Bu fonksiyon, bir say\u0131n\u0131n bir say\u0131ya b\u00f6l\u00fcnmesi i\u015fleminde b\u00f6l\u00fcm\u00fc ve kalan\u0131 verir: divmod(10, 2) (5, 0) 10 say\u0131s\u0131 2 say\u0131s\u0131na b\u00f6l\u00fcnd\u00fc\u011f\u00fcnde \u2018b\u00f6l\u00fcm\u2019 5, \u2018kalan\u2019 ise 0 \u2018d\u0131r. Asl\u0131nda divmod() fonksiyonu \u015fu kodlarla ayn\u0131 i\u015fi yap\u0131yor: 14 // 3, 14 % 3 (4, 2) max() Bir liste i\u00e7erisinde bulunan en b\u00fcy\u00fck de\u011feri getirir. De\u011fer dedik \u00e7\u00fcnk\u00fc karakter dizilerinin bulundu\u011fu listelerde de en uzun karakter dizisini getirir. Say\u0131 listesi \u00fczerinde deneyelim: liste = [882388, 260409, 72923, 692476, 131925, 259114, 47630, 84513, 25413, 614654, 239479, 299159, 175488, 345972, 458112, 791030, 243610, 413702, 565285, 773607, 131583, 979177, 247202, 615485, 647512, 556823, 242460, 852928, 893126, 792435, 273904, 544434, 627222, 601984, 966446, 384143, 308858, 915106, 914423, 826315, 258342, 188056, 934954, 253918, 468223, 262875, 462902, 370061, 336521, 367829, 147846, 838385, 605377, 175140, 957437, 105779, 153499, 435097, 9934, 435761, 989066, 357279, 341319, 420455, 220075, 28839, 910043, 891209, 975758, 140968, 837021, 526798, 235190, 634295, 521918, 400634, 385922, 842289, 106889, 742531, 359913, 842431, 666182, 516933, 22222, 445705, 589281, 709098, 48521, 513501, 277645, 860937, 655966, 923944, 7895, 77482, 929007, 562981, 904166, 619260, 616293, 203512, 67534, 615578, 74381, 484273, 941872, 110617, 53517, 402324, 156156, 839504 , 625325, 694080, 904277, 163914, 756250, 809689, 354050, 523654, 26723, 167882, 103404, 689579, 121439, 158946, 485258, 850804, 650603, 717388, 981770, 573882, 358726, 957285, 418479, 851590, 960182, 11955, 894146, 856069, 369866, 740623, 867622, 616830, 894801] max(liste) 989066 Karakter dizisi \u00fczerinde deneyelim: isimler = [\"ahmet\", \"mehmet\", \"necla\", \"sedat\", \"abdullah\", \"g\u0131yaseddin\", \"sibel\", \"can\", \"necmettin\", \"sava\u015f\", \"\u00f6zg\u00fcr\"] max() fonksiyonu ile en uzun karakteri getirelim: print(max(isimler, key=len)) g\u0131yaseddin G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, max() fonksiyonu key adl\u0131 \u00f6zel bir parametre daha al\u0131yor. Bu parametreye biz \u2018len\u2019 de\u011ferini verdik. B\u00f6ylece max() fonksiyonu liste i\u00e7indeki \u00f6\u011feleri uzunluklar\u0131na g\u00f6re s\u0131ralay\u0131p en uzun \u00f6\u011feyi bize sundu. min() Bu fonksiyon, max() fonksiyonun yapt\u0131\u011f\u0131 i\u015fin tam tersini yapar. Yani bu fonksiyonu kullanarak bir dizi i\u00e7indeki en k\u00fc\u00e7\u00fck say\u0131y\u0131 bulabilirsiniz: min(liste) 7895 Bu fonksiyonuda karakter dizileri \u00fczerinde kullanabiliriz: print(min(isimler, key=len)) can sum() Bu fonksiyon bir dizi i\u00e7inde yer alan b\u00fct\u00fcn say\u0131lar\u0131 birbiriyle toplar. \u00d6rne\u011fin: a = [10, 20, 43, 45 , 77, 2, 0, 1] sum(a) 198 E\u011fer bu fonksiyonun, toplama i\u015flemini belli bir say\u0131n\u0131n \u00fczerine ger\u00e7ekle\u015ftirmesini istiyorsan\u0131z \u015fu kodu yazabilirsiniz: sum(a, 10) 208 sum() fonksiyonuna bu \u015fekilde ikinci bir parametre verdi\u011finizde, bu ikinci parametre toplam de\u011fere eklenecektir. Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"Say\u0131lar"},{"location":"python/python_sayilar/#saylar","text":"Python'da \u00fc\u00e7 t\u00fcr say\u0131 bulunmaktad\u0131r: Tam Say\u0131lar (integer) Kayan Noktal\u0131 Say\u0131lar (floating point numbers veya k\u0131saca float) Karma\u015f\u0131k Say\u0131lar (complex numbers) E\u011fer bir veri type(veri) sorgulamas\u0131na int cevab\u0131 veriyorsa o veri bir tam say\u0131d\u0131r. E\u011fer bir veri type(veri) sorgulamas\u0131na float cevab\u0131 veriyorsa o veri bir kayan noktal\u0131 say\u0131d\u0131r. E\u011fer bir veri type(veri) sorgulamas\u0131na complex cevab\u0131n\u0131 veriyorsa o veri bir karma\u015f\u0131k say\u0131d\u0131r. Mesela \u015funlar birer tam say\u0131d\u0131r: 15, 4, 33 \u015eunlar birer kayan noktal\u0131 say\u0131d\u0131r: 3.5, 6.6, 2.3 \u015eunlarsa birer karma\u015f\u0131k say\u0131d\u0131r: 3+3j, 5+2j, 19+10j Fonksiyon G\u00f6revi \u00d6rnek int() Bir veriyi tam say\u0131ya do\u0308nu\u0308s\u0327tu\u0308ru\u0308r int(\"2\") float() Bir veriyi kayan noktal\u0131 say\u0131ya do\u0308nu\u0308s\u0327tu\u0308ru\u0308r float(2) complex() Bir veriyi karmas\u0327\u0131k say\u0131ya do\u0308nu\u0308s\u0327tu\u0308ru\u0308r complex(2)","title":"Say\u0131lar"},{"location":"python/python_sayilar/#saylarn-metotlar","text":"","title":"Say\u0131lar\u0131n Metotlar\u0131"},{"location":"python/python_sayilar/#tam-saylarn-metotlar","text":"Tam say\u0131lar\u0131n hangi metotlar ve nitelikleri oldu\u011funa bakal\u0131m: [i for i in dir(int) if not i.startswith(\"_\")] ['bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']","title":"Tam Say\u0131lar\u0131n Metotlar\u0131"},{"location":"python/python_sayilar/#bit_length","text":"Bilgisayarlar ancak ve ancak say\u0131larla i\u015flem yapabilir. Bilgisayarlar\u0131n i\u015flem yapabildi\u011fi say\u0131lar da onlu sistemdeki say\u0131lar de\u011fil, ikili sistemdeki say\u0131lard\u0131r. Yani 0\u2019lar ve 1\u2019ler. , \u0130\u015fte herhangi bir tam say\u0131n\u0131n ka\u00e7 bit\u2019lik bir yer kaplad\u0131\u011f\u0131n\u0131 \u00f6\u011frenmek i\u00e7in, tam say\u0131lar\u0131n metotlar\u0131ndan biri olan bit_length() metodundan yararlanaca\u011f\u0131z: sayi = 10 sayi.bit_length() 4 Demek ki 10 say\u0131s\u0131 bellekte d\u00f6rt bitlik bir yer kapl\u0131yormu\u015f. Yani bu say\u0131n\u0131n ikili sistemdeki kar\u015f\u0131l\u0131\u011f\u0131 olan 1010 say\u0131s\u0131 d\u00f6rt basamaktan olu\u015fuyormu\u015f. bit_length() metodunu do\u011frudan say\u0131lar \u00fczerine uygulayam\u0131yoruz. Yani: 10.bit_length() File \"<ipython-input-4-2c75d808345c>\", line 1 10.bit_length() ^ SyntaxError: invalid syntax E\u011fer direk say\u0131 \u00fczerinde kullanmak istiyorsak \u015f\u00f6yle yapmal\u0131y\u0131z: (10).bit_length() 4","title":"bit_length()"},{"location":"python/python_sayilar/#kayan-noktal-saylarn-metotlar","text":"Kayan noktal\u0131 say\u0131lar\u0131n hangi metotlar ve nitelikleri oldu\u011funa bakal\u0131m: [i for i in dir(float) if not i.startswith(\"_\")] ['as_integer_ratio', 'conjugate', 'fromhex', 'hex', 'imag', 'is_integer', 'real']","title":"Kayan Noktal\u0131 Say\u0131lar\u0131n Metotlar\u0131"},{"location":"python/python_sayilar/#as_integer_ratio","text":"Bu metot, birbirine b\u00f6l\u00fcnd\u00fc\u011f\u00fcnde ilgili kayan noktal\u0131 say\u0131y\u0131 veren iki adet tam say\u0131 verir bize. \u00d6rnek \u00fczerinden a\u00e7\u0131klayal\u0131m: say\u0131 = 4.5 say\u0131.as_integer_ratio() (9, 2) 9 say\u0131s\u0131n\u0131 2 say\u0131s\u0131na b\u00f6ld\u00fc\u011f\u00fcm\u00fczde 4.5 say\u0131s\u0131n\u0131 elde ederiz. \u0130\u015fte as_integer_ratio() metodu, bu 9 ve 2 say\u0131lar\u0131n\u0131 bize ayr\u0131 ayr\u0131 verir.","title":"as_integer_ratio()"},{"location":"python/python_sayilar/#is_integer","text":"Bir kayan noktal\u0131 say\u0131n\u0131n ondal\u0131k k\u0131sm\u0131nda 0 harici bir say\u0131n\u0131n olup olmad\u0131\u011f\u0131n\u0131 kontrol etmek i\u00e7in bu metodu kullan\u0131yoruz. \u00d6rne\u011fin: (12.0).is_integer() True (12.5).is_integer() False","title":"is_integer()"},{"location":"python/python_sayilar/#karmask-saylarn-metotlar","text":"Gelelim karma\u015f\u0131k say\u0131lar\u0131n metot ve niteliklerine... [i for i in dir(complex) if not i.startswith(\"_\")] ['conjugate', 'imag', 'real']","title":"Karma\u015f\u0131k Say\u0131lar\u0131n Metotlar\u0131"},{"location":"python/python_sayilar/#imag","text":"Bir ger\u00e7ek bir de sanal k\u0131s\u0131mdan olu\u015fan say\u0131lara karma\u015f\u0131k say\u0131lar (complex) ad\u0131 verildi\u011fini biliyorsunuz. \u00d6rne\u011fin \u015fu bir karma\u015f\u0131k say\u0131d\u0131r: 12+4j \u0130\u015fte imag adl\u0131 nitelik, bize bir karma\u015f\u0131k say\u0131n\u0131n sanal k\u0131sm\u0131n\u0131 verir: c = 12+4j c.imag 4.0","title":"imag"},{"location":"python/python_sayilar/#real","text":"real adl\u0131 nitelik bize bir karma\u015f\u0131k say\u0131n\u0131n ger\u00e7ek k\u0131sm\u0131n\u0131 verir: c = 12+4j c.real 12.0","title":"real"},{"location":"python/python_sayilar/#aritmetik-fonksiyonlar","text":"Python programlama dili, bize say\u0131larla rahat \u00e7al\u0131\u015fabilmemiz i\u00e7in baz\u0131 fonksiyonlar sunar. Bu fonksiyonlar\u0131 kullanarak, karma\u015f\u0131k aritmetik i\u015flemleri kolayca yapabiliriz. Bu fonksiyonlar\u0131 inceleyelim:","title":"Aritmetik Fonksiyonlar"},{"location":"python/python_sayilar/#abs","text":"Bu fonksiyon bize bir say\u0131n\u0131n mutlak de\u011ferini verir: abs(-2) 2","title":"abs()"},{"location":"python/python_sayilar/#divmod","text":"Bu fonksiyon, bir say\u0131n\u0131n bir say\u0131ya b\u00f6l\u00fcnmesi i\u015fleminde b\u00f6l\u00fcm\u00fc ve kalan\u0131 verir: divmod(10, 2) (5, 0) 10 say\u0131s\u0131 2 say\u0131s\u0131na b\u00f6l\u00fcnd\u00fc\u011f\u00fcnde \u2018b\u00f6l\u00fcm\u2019 5, \u2018kalan\u2019 ise 0 \u2018d\u0131r. Asl\u0131nda divmod() fonksiyonu \u015fu kodlarla ayn\u0131 i\u015fi yap\u0131yor: 14 // 3, 14 % 3 (4, 2)","title":"divmod()"},{"location":"python/python_sayilar/#max","text":"Bir liste i\u00e7erisinde bulunan en b\u00fcy\u00fck de\u011feri getirir. De\u011fer dedik \u00e7\u00fcnk\u00fc karakter dizilerinin bulundu\u011fu listelerde de en uzun karakter dizisini getirir. Say\u0131 listesi \u00fczerinde deneyelim: liste = [882388, 260409, 72923, 692476, 131925, 259114, 47630, 84513, 25413, 614654, 239479, 299159, 175488, 345972, 458112, 791030, 243610, 413702, 565285, 773607, 131583, 979177, 247202, 615485, 647512, 556823, 242460, 852928, 893126, 792435, 273904, 544434, 627222, 601984, 966446, 384143, 308858, 915106, 914423, 826315, 258342, 188056, 934954, 253918, 468223, 262875, 462902, 370061, 336521, 367829, 147846, 838385, 605377, 175140, 957437, 105779, 153499, 435097, 9934, 435761, 989066, 357279, 341319, 420455, 220075, 28839, 910043, 891209, 975758, 140968, 837021, 526798, 235190, 634295, 521918, 400634, 385922, 842289, 106889, 742531, 359913, 842431, 666182, 516933, 22222, 445705, 589281, 709098, 48521, 513501, 277645, 860937, 655966, 923944, 7895, 77482, 929007, 562981, 904166, 619260, 616293, 203512, 67534, 615578, 74381, 484273, 941872, 110617, 53517, 402324, 156156, 839504 , 625325, 694080, 904277, 163914, 756250, 809689, 354050, 523654, 26723, 167882, 103404, 689579, 121439, 158946, 485258, 850804, 650603, 717388, 981770, 573882, 358726, 957285, 418479, 851590, 960182, 11955, 894146, 856069, 369866, 740623, 867622, 616830, 894801] max(liste) 989066 Karakter dizisi \u00fczerinde deneyelim: isimler = [\"ahmet\", \"mehmet\", \"necla\", \"sedat\", \"abdullah\", \"g\u0131yaseddin\", \"sibel\", \"can\", \"necmettin\", \"sava\u015f\", \"\u00f6zg\u00fcr\"] max() fonksiyonu ile en uzun karakteri getirelim: print(max(isimler, key=len)) g\u0131yaseddin G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, max() fonksiyonu key adl\u0131 \u00f6zel bir parametre daha al\u0131yor. Bu parametreye biz \u2018len\u2019 de\u011ferini verdik. B\u00f6ylece max() fonksiyonu liste i\u00e7indeki \u00f6\u011feleri uzunluklar\u0131na g\u00f6re s\u0131ralay\u0131p en uzun \u00f6\u011feyi bize sundu.","title":"max()"},{"location":"python/python_sayilar/#min","text":"Bu fonksiyon, max() fonksiyonun yapt\u0131\u011f\u0131 i\u015fin tam tersini yapar. Yani bu fonksiyonu kullanarak bir dizi i\u00e7indeki en k\u00fc\u00e7\u00fck say\u0131y\u0131 bulabilirsiniz: min(liste) 7895 Bu fonksiyonuda karakter dizileri \u00fczerinde kullanabiliriz: print(min(isimler, key=len)) can","title":"min()"},{"location":"python/python_sayilar/#sum","text":"Bu fonksiyon bir dizi i\u00e7inde yer alan b\u00fct\u00fcn say\u0131lar\u0131 birbiriyle toplar. \u00d6rne\u011fin: a = [10, 20, 43, 45 , 77, 2, 0, 1] sum(a) 198 E\u011fer bu fonksiyonun, toplama i\u015flemini belli bir say\u0131n\u0131n \u00fczerine ger\u00e7ekle\u015ftirmesini istiyorsan\u0131z \u015fu kodu yazabilirsiniz: sum(a, 10) 208 sum() fonksiyonuna bu \u015fekilde ikinci bir parametre verdi\u011finizde, bu ikinci parametre toplam de\u011fere eklenecektir. Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"sum()"},{"location":"python/python_sozlukler/","text":"S\u00f6zl\u00fckler S\u00f6zl\u00fck ingilizcede dictionary demektir. S\u00f6zl\u00fckler, Python'da bulunan di\u011fer bir veri tipidir. S\u00f6zl\u00fck, Python programlama dilinin son derece kullan\u0131\u015fl\u0131 ve i\u015fe yarar ara\u00e7lar\u0131ndan bir tanesidir. S\u00f6zl\u00fck Tan\u0131mlamak S\u00f6zl\u00fck dedi\u011fimiz \u015fey en basit haliyle \u015f\u00f6yle g\u00f6r\u00fcn\u00fcr ve tan\u0131mlan\u0131r: sozluk = {} Bu \u00f6rnek bo\u015f bir s\u00f6zl\u00fckt\u00fcr. \u0130sterseniz yukar\u0131daki veri tipinin ger\u00e7ekten de bir s\u00f6zl\u00fck oldu\u011funu kan\u0131tlayal\u0131m: type(sozluk) dict S\u00f6zl\u00fcklerin Yap\u0131s\u0131 S\u00f6zl\u00fckler; anahtar ve de\u011fer \u00e7iftlerinin birbirleriyle e\u015fle\u015ftirildi\u011fi bir veri tipidir. Dolay\u0131s\u0131yla s\u00f6zl\u00fckler bu anahtar ve de\u011fer \u00e7iftleri aras\u0131nda birebir ili\u015fki kurar. S\u00f6zl\u00fckler iki adet de\u011ferden olu\u015fur. Bunlar. key ve value de\u011ferleridir. S\u00f6zl\u00fck tan\u0131mlarken bu yap\u0131y\u0131 temel alarak tan\u0131mlar\u0131z. S\u00f6zl\u00fcklerin Python programlama dilindeki teknik kar\u015f\u0131l\u0131\u011f\u0131 dict ifadesidir. type(s\u00f6zl\u00fck) sorgusu \u00e7\u0131kt\u0131s\u0131 verdi\u011fine g\u00f6re, s\u00f6zl\u00fck adl\u0131 de\u011fi\u015fkenin ger\u00e7ekten de bir s\u00f6zl\u00fck oldu\u011funu s\u00f6yleyebiliyoruz. sozluk = {\"kitap\" : \"book\", \"bilgisayar\" : \"computer\", \"programlama\": \"programming\", \"dil\" : \"language\", \"defter\" : \"notebook\"} Yukar\u0131da tan\u0131mlam\u0131\u015f oldu\u011fumuz s\u00f6zl\u00fckte g\u00f6r\u00fcn\u00fc\u015fte 10 adet de\u011fer var gibi g\u00f6z\u00fckebilir. Fakat \u00f6yle de\u011fil. Tan\u0131mlad\u0131\u011f\u0131m\u0131z s\u00f6zl\u00fckte toplam 5 adet de\u011fer bulunmaktad\u0131r. \"kitap\" : \"book\" de\u011feri bir de\u011ferdir asl\u0131nda. len() fonksiyonu ile kontrol edelim. len(sozluk) 5 E\u011fer istersek s\u00f6zl\u00fckleri, i\u00e7lerinde ba\u015fka s\u00f6zl\u00fckleri bar\u0131nd\u0131racak \u015fekilde de tan\u0131mlayabiliriz: kisiler = {\"Ahmet \u00d6zkoparan\": {\"Memleket\": \"\u0130stanbul\", \"Meslek\" : \"\u00d6\u011fretmen\", \"Ya\u015f\" : 34}, \"Mehmet Ya\u011f\u0131z\" : {\"Memleket\": \"Adana\", \"Meslek\" : \"M\u00fchendis\", \"Ya\u015f\" : 40}, \"Seda Bayrak\" : {\"Memleket\": \"\u0130skenderun\", \"Meslek\" : \"Doktor\", \"Ya\u015f\" : 30}} Kisiler s\u00f6zl\u00fc\u011f\u00fcnde Mehmet ki\u015fisinin memleketine eri\u015fmemiz i\u00e7in \u015f\u00f6yle bir kod yazmam\u0131z gerekmektdir: print(kisiler[\"Mehmet Ya\u011f\u0131z\"][\"Memleket\"]) Adana S\u00f6zl\u00fck \u00d6\u011felerine Eri\u015fmek Yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z s\u00f6zl\u00fc\u011f\u00fcn i\u00e7erisinde bulunan kitap \u00f6\u011fesine eri\u015felim: print(s\u00f6zl\u00fck[\"kitap\"]) book Yukar\u0131daki \u00f6rnekten anlad\u0131\u011f\u0131m\u0131z gibi, s\u00f6zl\u00fck \u00f6\u011felerine eri\u015fmek i\u00e7in \u015f\u00f6yle bir form\u00fcl kullan\u0131yoruz: s\u00f6zl\u00fck[s\u00f6zl\u00fck_\u00f6\u011fesinin_ad\u0131] S\u00f6zl\u00fc\u011f\u00fcn b\u00fct\u00fcn elemanlar\u0131na \u015fu kod ile ula\u015fabiliriz: for i in sozluk: print(sozluk[i]) book computer programming language notebook S\u00f6zl\u00fcklere \u00d6\u011fe Eklemek T\u0131pk\u0131 listeler gibi, s\u00f6zl\u00fckler de b\u00fcy\u00fcy\u00fcp k\u00fc\u00e7\u00fclebilen bir veri tipidir. Yani bir s\u00f6zl\u00fc\u011f\u00fc ilk kez tan\u0131mlad\u0131ktan sonra istedi\u011fimiz zaman bu s\u00f6zl\u00fc\u011fe yeni \u00f6\u011feler ekleyebilir veya varolan \u00f6\u011feleri \u00e7\u0131karabiliriz. Biz \u015fimdi bir s\u00f6zl\u00fc\u011fe nas\u0131l \u00f6\u011fe ekleyece\u011fimizi inceleyece\u011fiz. Diyelim ki elimizde \u015f\u00f6yle bo\u015f bir s\u00f6zl\u00fck var: sozluk = {} Bu listeye \u00f6\u011fe eklemek i\u00e7in \u015f\u00f6yle bir form\u00fcl kullanaca\u011f\u0131z: sozluk[anahtar] = de\u011fer Bu form\u00fcl\u00fc bir \u00f6rnek \u00fczerinden somutla\u015ft\u0131ral\u0131m: sozluk[\"Ahmet\"] = \"Adana\" B\u00f6ylece s\u00f6zl\u00fc\u011fe, anahtar\u0131 \u201cAhmet\u201d, de\u011feri ise \u201cAdana\u201d olan bir \u00f6\u011fe eklemi\u015f olduk. S\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fcn son durumunu kontrol edelim: print(sozluk) {'Ahmet': 'Adana'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, \u201cAhmet\u201d \u00f6\u011fesi s\u00f6zl\u00fc\u011fe eklendi. Art\u0131k bu \u00f6\u011feye normal yollardan ula\u015fabiliriz: print(sozluk[\"Ahmet\"]) Adana S\u00f6zl\u00fck \u00d6\u011feleri \u00dczerinde De\u011fi\u015fiklik Yapmak S\u00f6zl\u00fckler de\u011fi\u015ftirilebilir veri tipleridir. Dolay\u0131s\u0131yla s\u00f6zl\u00fckler \u00fczerinde rahatl\u0131kla istedi\u011fimiz de\u011fi\u015fikli\u011fi yapabiliriz. S\u00f6zl\u00fckler \u00fczerinde de\u011fi\u015fiklik yapma i\u015flemi, biraz \u00f6nce \u00f6\u011frendi\u011fimiz, s\u00f6zl\u00fcklere yeni \u00f6\u011fe ekleme i\u015flemiyle ayn\u0131d\u0131r. Dikkatlice bak\u0131n: notlar = {'Seda': 98, 'Ege': 95, 'Mehmet': 77, 'Zeynep': 100, 'Deniz': 95, 'Ahmet': 45} S\u00f6zl\u00fc\u011f\u00fcm\u00fcz bu. \u015eimdi bu s\u00f6zl\u00fckteki \u2018Ahmet\u2019 adl\u0131 ki\u015finin 45 olan notunu 65 olarak de\u011fi\u015ftirelim: notlar[\"Ahmet\"] = 65 print(notlar) {'Seda': 98, 'Ege': 95, 'Mehmet': 77, 'Zeynep': 100, 'Deniz': 95, 'Ahmet': 65} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi Ahmet\u2019in notu 65 olarak de\u011fi\u015fmi\u015f... S\u00f6zl\u00fck \u00dcrete\u00e7leri (DictionaryComprehensions) Liste \u00fcrete\u00e7lerinde oldu\u011fu gibi, s\u00f6zl\u00fck \u00fcrete\u00e7leri sayesinde tek sat\u0131rda ve h\u0131zl\u0131 bir \u015fekilde s\u00f6zl\u00fckler \u00fcretebiliriz. Diyelim ki elinizde \u015f\u00f6yle bir isim listesi var: isimler = [\"ahmet\", \"mehmet\", \"f\u0131rat\", \"zeynep\", \"selma\", \"abdullah\", \"cem\"] Amac\u0131n\u0131z, bu isimleri ve her bir ismin ka\u00e7 harften olu\u015ftu\u011funu g\u00f6steren bir s\u00f6zl\u00fck elde etmek. \u0130\u015fte bu g\u00f6rev i\u00e7in de s\u00f6zl\u00fck \u00fcrete\u00e7lerinden yararlanabilirsiniz: sozluk = {i: len(i) for i in isimler} sozluk {'ahmet': 5, 'mehmet': 6, 'f\u0131rat': 5, 'zeynep': 6, 'selma': 5, 'abdullah': 8, 'cem': 3} Bildi\u011finiz gibi s\u00f6zl\u00fckler, her biri birbirinden : i\u015fareti ile ayr\u0131lan birtak\u0131m anahtar-de\u011fer \u00e7iftlerinden olu\u015fuyor. \u0130\u015fte yukar\u0131daki s\u00f6zl\u00fck \u00fcreteci yap\u0131s\u0131nda biz : i\u015faretinin sol taraf\u0131na isimler adl\u0131 listedeki her bir \u00f6\u011feyi; sa\u011f taraf\u0131na da bu \u00f6\u011felerin uzunluklar\u0131n\u0131 bir \u00e7\u0131rp\u0131da ekliyoruz. Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"S\u00f6zl\u00fckler"},{"location":"python/python_sozlukler/#sozlukler","text":"S\u00f6zl\u00fck ingilizcede dictionary demektir. S\u00f6zl\u00fckler, Python'da bulunan di\u011fer bir veri tipidir. S\u00f6zl\u00fck, Python programlama dilinin son derece kullan\u0131\u015fl\u0131 ve i\u015fe yarar ara\u00e7lar\u0131ndan bir tanesidir.","title":"S\u00f6zl\u00fckler"},{"location":"python/python_sozlukler/#sozluk-tanmlamak","text":"S\u00f6zl\u00fck dedi\u011fimiz \u015fey en basit haliyle \u015f\u00f6yle g\u00f6r\u00fcn\u00fcr ve tan\u0131mlan\u0131r: sozluk = {} Bu \u00f6rnek bo\u015f bir s\u00f6zl\u00fckt\u00fcr. \u0130sterseniz yukar\u0131daki veri tipinin ger\u00e7ekten de bir s\u00f6zl\u00fck oldu\u011funu kan\u0131tlayal\u0131m: type(sozluk) dict","title":"S\u00f6zl\u00fck Tan\u0131mlamak"},{"location":"python/python_sozlukler/#sozluklerin-yaps","text":"S\u00f6zl\u00fckler; anahtar ve de\u011fer \u00e7iftlerinin birbirleriyle e\u015fle\u015ftirildi\u011fi bir veri tipidir. Dolay\u0131s\u0131yla s\u00f6zl\u00fckler bu anahtar ve de\u011fer \u00e7iftleri aras\u0131nda birebir ili\u015fki kurar. S\u00f6zl\u00fckler iki adet de\u011ferden olu\u015fur. Bunlar. key ve value de\u011ferleridir. S\u00f6zl\u00fck tan\u0131mlarken bu yap\u0131y\u0131 temel alarak tan\u0131mlar\u0131z. S\u00f6zl\u00fcklerin Python programlama dilindeki teknik kar\u015f\u0131l\u0131\u011f\u0131 dict ifadesidir. type(s\u00f6zl\u00fck) sorgusu \u00e7\u0131kt\u0131s\u0131 verdi\u011fine g\u00f6re, s\u00f6zl\u00fck adl\u0131 de\u011fi\u015fkenin ger\u00e7ekten de bir s\u00f6zl\u00fck oldu\u011funu s\u00f6yleyebiliyoruz. sozluk = {\"kitap\" : \"book\", \"bilgisayar\" : \"computer\", \"programlama\": \"programming\", \"dil\" : \"language\", \"defter\" : \"notebook\"} Yukar\u0131da tan\u0131mlam\u0131\u015f oldu\u011fumuz s\u00f6zl\u00fckte g\u00f6r\u00fcn\u00fc\u015fte 10 adet de\u011fer var gibi g\u00f6z\u00fckebilir. Fakat \u00f6yle de\u011fil. Tan\u0131mlad\u0131\u011f\u0131m\u0131z s\u00f6zl\u00fckte toplam 5 adet de\u011fer bulunmaktad\u0131r. \"kitap\" : \"book\" de\u011feri bir de\u011ferdir asl\u0131nda. len() fonksiyonu ile kontrol edelim. len(sozluk) 5 E\u011fer istersek s\u00f6zl\u00fckleri, i\u00e7lerinde ba\u015fka s\u00f6zl\u00fckleri bar\u0131nd\u0131racak \u015fekilde de tan\u0131mlayabiliriz: kisiler = {\"Ahmet \u00d6zkoparan\": {\"Memleket\": \"\u0130stanbul\", \"Meslek\" : \"\u00d6\u011fretmen\", \"Ya\u015f\" : 34}, \"Mehmet Ya\u011f\u0131z\" : {\"Memleket\": \"Adana\", \"Meslek\" : \"M\u00fchendis\", \"Ya\u015f\" : 40}, \"Seda Bayrak\" : {\"Memleket\": \"\u0130skenderun\", \"Meslek\" : \"Doktor\", \"Ya\u015f\" : 30}} Kisiler s\u00f6zl\u00fc\u011f\u00fcnde Mehmet ki\u015fisinin memleketine eri\u015fmemiz i\u00e7in \u015f\u00f6yle bir kod yazmam\u0131z gerekmektdir: print(kisiler[\"Mehmet Ya\u011f\u0131z\"][\"Memleket\"]) Adana","title":"S\u00f6zl\u00fcklerin Yap\u0131s\u0131"},{"location":"python/python_sozlukler/#sozluk-ogelerine-erismek","text":"Yukar\u0131da tan\u0131mlad\u0131\u011f\u0131m\u0131z s\u00f6zl\u00fc\u011f\u00fcn i\u00e7erisinde bulunan kitap \u00f6\u011fesine eri\u015felim: print(s\u00f6zl\u00fck[\"kitap\"]) book Yukar\u0131daki \u00f6rnekten anlad\u0131\u011f\u0131m\u0131z gibi, s\u00f6zl\u00fck \u00f6\u011felerine eri\u015fmek i\u00e7in \u015f\u00f6yle bir form\u00fcl kullan\u0131yoruz: s\u00f6zl\u00fck[s\u00f6zl\u00fck_\u00f6\u011fesinin_ad\u0131] S\u00f6zl\u00fc\u011f\u00fcn b\u00fct\u00fcn elemanlar\u0131na \u015fu kod ile ula\u015fabiliriz: for i in sozluk: print(sozluk[i]) book computer programming language notebook","title":"S\u00f6zl\u00fck \u00d6\u011felerine Eri\u015fmek"},{"location":"python/python_sozlukler/#sozluklere-oge-eklemek","text":"T\u0131pk\u0131 listeler gibi, s\u00f6zl\u00fckler de b\u00fcy\u00fcy\u00fcp k\u00fc\u00e7\u00fclebilen bir veri tipidir. Yani bir s\u00f6zl\u00fc\u011f\u00fc ilk kez tan\u0131mlad\u0131ktan sonra istedi\u011fimiz zaman bu s\u00f6zl\u00fc\u011fe yeni \u00f6\u011feler ekleyebilir veya varolan \u00f6\u011feleri \u00e7\u0131karabiliriz. Biz \u015fimdi bir s\u00f6zl\u00fc\u011fe nas\u0131l \u00f6\u011fe ekleyece\u011fimizi inceleyece\u011fiz. Diyelim ki elimizde \u015f\u00f6yle bo\u015f bir s\u00f6zl\u00fck var: sozluk = {} Bu listeye \u00f6\u011fe eklemek i\u00e7in \u015f\u00f6yle bir form\u00fcl kullanaca\u011f\u0131z: sozluk[anahtar] = de\u011fer Bu form\u00fcl\u00fc bir \u00f6rnek \u00fczerinden somutla\u015ft\u0131ral\u0131m: sozluk[\"Ahmet\"] = \"Adana\" B\u00f6ylece s\u00f6zl\u00fc\u011fe, anahtar\u0131 \u201cAhmet\u201d, de\u011feri ise \u201cAdana\u201d olan bir \u00f6\u011fe eklemi\u015f olduk. S\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fcn son durumunu kontrol edelim: print(sozluk) {'Ahmet': 'Adana'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, \u201cAhmet\u201d \u00f6\u011fesi s\u00f6zl\u00fc\u011fe eklendi. Art\u0131k bu \u00f6\u011feye normal yollardan ula\u015fabiliriz: print(sozluk[\"Ahmet\"]) Adana","title":"S\u00f6zl\u00fcklere \u00d6\u011fe Eklemek"},{"location":"python/python_sozlukler/#sozluk-ogeleri-uzerinde-degisiklik-yapmak","text":"S\u00f6zl\u00fckler de\u011fi\u015ftirilebilir veri tipleridir. Dolay\u0131s\u0131yla s\u00f6zl\u00fckler \u00fczerinde rahatl\u0131kla istedi\u011fimiz de\u011fi\u015fikli\u011fi yapabiliriz. S\u00f6zl\u00fckler \u00fczerinde de\u011fi\u015fiklik yapma i\u015flemi, biraz \u00f6nce \u00f6\u011frendi\u011fimiz, s\u00f6zl\u00fcklere yeni \u00f6\u011fe ekleme i\u015flemiyle ayn\u0131d\u0131r. Dikkatlice bak\u0131n: notlar = {'Seda': 98, 'Ege': 95, 'Mehmet': 77, 'Zeynep': 100, 'Deniz': 95, 'Ahmet': 45} S\u00f6zl\u00fc\u011f\u00fcm\u00fcz bu. \u015eimdi bu s\u00f6zl\u00fckteki \u2018Ahmet\u2019 adl\u0131 ki\u015finin 45 olan notunu 65 olarak de\u011fi\u015ftirelim: notlar[\"Ahmet\"] = 65 print(notlar) {'Seda': 98, 'Ege': 95, 'Mehmet': 77, 'Zeynep': 100, 'Deniz': 95, 'Ahmet': 65} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi Ahmet\u2019in notu 65 olarak de\u011fi\u015fmi\u015f...","title":"S\u00f6zl\u00fck \u00d6\u011feleri \u00dczerinde De\u011fi\u015fiklik Yapmak"},{"location":"python/python_sozlukler/#sozluk-uretecleri-dictionarycomprehensions","text":"Liste \u00fcrete\u00e7lerinde oldu\u011fu gibi, s\u00f6zl\u00fck \u00fcrete\u00e7leri sayesinde tek sat\u0131rda ve h\u0131zl\u0131 bir \u015fekilde s\u00f6zl\u00fckler \u00fcretebiliriz. Diyelim ki elinizde \u015f\u00f6yle bir isim listesi var: isimler = [\"ahmet\", \"mehmet\", \"f\u0131rat\", \"zeynep\", \"selma\", \"abdullah\", \"cem\"] Amac\u0131n\u0131z, bu isimleri ve her bir ismin ka\u00e7 harften olu\u015ftu\u011funu g\u00f6steren bir s\u00f6zl\u00fck elde etmek. \u0130\u015fte bu g\u00f6rev i\u00e7in de s\u00f6zl\u00fck \u00fcrete\u00e7lerinden yararlanabilirsiniz: sozluk = {i: len(i) for i in isimler} sozluk {'ahmet': 5, 'mehmet': 6, 'f\u0131rat': 5, 'zeynep': 6, 'selma': 5, 'abdullah': 8, 'cem': 3} Bildi\u011finiz gibi s\u00f6zl\u00fckler, her biri birbirinden : i\u015fareti ile ayr\u0131lan birtak\u0131m anahtar-de\u011fer \u00e7iftlerinden olu\u015fuyor. \u0130\u015fte yukar\u0131daki s\u00f6zl\u00fck \u00fcreteci yap\u0131s\u0131nda biz : i\u015faretinin sol taraf\u0131na isimler adl\u0131 listedeki her bir \u00f6\u011feyi; sa\u011f taraf\u0131na da bu \u00f6\u011felerin uzunluklar\u0131n\u0131 bir \u00e7\u0131rp\u0131da ekliyoruz. Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"S\u00f6zl\u00fck \u00dcrete\u00e7leri (DictionaryComprehensions)"},{"location":"python/python_sozluklerin_metotlari/","text":"S\u00f6zl\u00fcklerin Metotlar\u0131 keys() S\u00f6zl\u00fckleri tarif ederken, s\u00f6zl\u00fcklerin anahtar-de\u011fer \u00e7iftlerinden olu\u015fan bir veri tipi oldu\u011funu s\u00f6ylemi\u015ftik. Bir s\u00f6zl\u00fc\u011f\u00fc normal yollardan ekrana yazd\u0131r\u0131rsan\u0131z size hem anahtarlar\u0131 hem de bunlara kar\u015f\u0131l\u0131k gelen de\u011ferleri verecektir. Ama e\u011fer bir s\u00f6zl\u00fc\u011f\u00fcn sadece anahtarlar\u0131n\u0131 almak isterseniz keys() metodundan yararlanabilirsiniz: sozluk = {\"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3} print(sozluk.keys()) dict_keys(['a', 'b', 'c', 'd']) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, s\u00f6zl\u00fck.keys() komutu bize bir dict_keys nesnesi veriyor. Bu nesneyi program\u0131n\u0131zda kullanabilmek i\u00e7in isterseniz, bunu listeye, demete veya karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrebilirsiniz: liste = list(sozluk.keys()) liste ['a', 'b', 'c', 'd'] demet = tuple(sozluk.keys()) demet ('a', 'b', 'c', 'd') kardiz = \"\".join(sozluk.keys()) kardiz 'abcd' values() Bir s\u00f6zl\u00fc\u011f\u00fcn de\u011ferlerini values() metodu verir: print(sozluk.values()) dict_values([0, 1, 2, 3]) items() Bu metot, bir s\u00f6zl\u00fc\u011f\u00fcn hem anahtarlar\u0131n\u0131 hem de de\u011ferlerini ayn\u0131 anda almam\u0131z\u0131 sa\u011flar: sozluk.items() dict_items([('a', 0), ('b', 1), ('c', 2), ('d', 3)]) Bu metot s\u0131kl\u0131kla for d\u00f6ng\u00fcleri ile birlikte kullan\u0131larak bir s\u00f6zl\u00fc\u011f\u00fcn anahtar ve de\u011ferlerinin manip\u00fcle edilebilmesini sa\u011flar: for anahtar, deger in sozluk.items(): print(\"{} = {}\".format(anahtar, deger)) a = 0 b = 1 c = 2 d = 3 get() S\u00f6zl\u00fcklerin get() adl\u0131 metodu, parantez i\u00e7inde iki adet arg\u00fcman al\u0131r. Birinci arg\u00fcman sorgulamak istedi\u011fimiz s\u00f6zl\u00fck \u00f6\u011fesidir. \u0130kinci arg\u00fcman ise bu \u00f6\u011fenin s\u00f6zl\u00fckte bulunmad\u0131\u011f\u0131 durumda kullan\u0131c\u0131ya hangi mesaj\u0131n g\u00f6sterilece\u011fini belirtir. Buna g\u00f6re, a\u015fa\u011f\u0131da yapt\u0131\u011f\u0131m\u0131z \u015fey, \u00f6nce \u201csorgu\u201d de\u011fi\u015fkenini s\u00f6zl\u00fckte aramak, e\u011fer bu \u00f6\u011fe s\u00f6zl\u00fckte bulunam\u0131yorsa da kullan\u0131c\u0131ya, \u201cBu kelime veritaban\u0131m\u0131zda yoktur!\u201d c\u00fcmlesini g\u00f6stermekten ibarettir... ing_sozluk = {\"dil\": \"language\", \"bilgisayar\": \"computer\", \"masa\": \"table\"} sorgu = input(\"L\u00fctfen anlam\u0131n\u0131 \u00f6\u011frenmek istedi\u011finiz kelimeyi yaz\u0131n\u0131z:\") print(ing_sozluk.get(sorgu, \"Bu kelime veritaban\u0131m\u0131zda yoktur!\")) L\u00fctfen anlam\u0131n\u0131 \u00f6\u011frenmek istedi\u011finiz kelimeyi yaz\u0131n\u0131z:araba Bu kelime veritaban\u0131m\u0131zda yoktur! clear() Bu kelime \u0130ngilizce\u2019de \u201ctemizlemek\u201d anlam\u0131na gelir. G\u00f6revi s\u00f6zl\u00fckteki \u00f6\u011feleri temizlemektir. Yani i\u00e7i dolu bir s\u00f6zl\u00fc\u011f\u00fc bu metot yard\u0131m\u0131yla tamamen bo\u015faltabiliriz: lig = {\"\u015fampiyon\": \"Adana Demirspor\", \"ikinci\": \"Mersin \u0130dman Yurdu\", \"\u00fc\u00e7\u00fcnc\u00fc\": \"Adana Gen\u00e7lerbirli\u011fi\"} \u0130sterseniz s\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fc bo\u015faltmadan \u00f6nce bu s\u00f6zl\u00fckle biraz \u00e7al\u0131\u015fal\u0131m: S\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fcn \u00f6\u011felerine \u015f\u00f6yle ula\u015f\u0131yoruz: lig {'\u015fampiyon': 'Adana Demirspor', 'ikinci': 'Mersin \u0130dman Yurdu', '\u00fc\u00e7\u00fcnc\u00fc': 'Adana Gen\u00e7lerbirli\u011fi'} \u015eimdi geldi bu s\u00f6zl\u00fc\u011f\u00fcn b\u00fct\u00fcn \u00f6\u011felerini silmeye: lig.clear() \u015eimdi s\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fcn durumunu tekrar kontrol edelim: lig {} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi art\u0131k \u201clig\u201d adl\u0131 s\u00f6zl\u00fc\u011f\u00fcm\u00fcz bombo\u015f. clear() metodunu kullanarak bu s\u00f6zl\u00fc\u011f\u00fcn b\u00fct\u00fcn \u00f6\u011felerini sildik. Ama tabii ki bu \u015fekilde s\u00f6zl\u00fc\u011f\u00fc silmi\u015f olmad\u0131k. Bo\u015f da olsa bellekte h\u00e2l\u00e2 \u201clig\u201d adl\u0131 bir s\u00f6zl\u00fck duruyor. E\u011fer siz \u201clig\u201di ortadan kald\u0131rmak isterseniz \u201cdel\u201d adl\u0131 bir par\u00e7ac\u0131ktan yararlanman\u0131z gerekir: del lig Kontrol edelim: lig --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-14-f416219c5a5e> in <module> ----> 1 lig NameError: name 'lig' is not defined G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi art\u0131k \u201clig\u201d diye bir \u015fey yok... Bu s\u00f6zl\u00fc\u011f\u00fc bellekten tamamen kald\u0131rd\u0131k. copy() Bu metot s\u00f6zl\u00fc\u011f\u00fc kopyalamaya yaramaktad\u0131r. hava_durumu = {\"\u0130stanbul\": \"ya\u011fmurlu\", \"Ankara\": \"g\u00fcne\u015fli\", \"Konya\": \"bulutlu\"} \u015eimdi bu s\u00f6zl\u00fc\u011f\u00fc yedekliyoruz. Yani kopyal\u0131yoruz: yedek_hava_durumu = hava_durumu.copy() yedek_hava_durumu adl\u0131 s\u00f6zl\u00fc\u011fe bakal\u0131m: yedek_hava_durumu {'\u0130stanbul': 'ya\u011fmurlu', 'Ankara': 'g\u00fcne\u015fli', 'Konya': 'bulutlu'} fromkeys() fromkeys() metodu \u00f6teki metotlardan biraz farkl\u0131d\u0131r. Bu metot mevcut s\u00f6zl\u00fck \u00fczerinde i\u015flem yapmaz. fromkeys()\u2018in g\u00f6revi yeni bir s\u00f6zl\u00fck olu\u015fturmakt\u0131r. Bu metot yeni bir s\u00f6zl\u00fck olu\u015ftururken listeler veya demetlerden yararlan\u0131r. \u015e\u00f6yle ki: elemanlar = \"Ahmet\", \"Mehmet\", \"Can\" adresler = dict.fromkeys(elemanlar, \"Kad\u0131k\u00f6y\") adresler {'Ahmet': 'Kad\u0131k\u00f6y', 'Mehmet': 'Kad\u0131k\u00f6y', 'Can': 'Kad\u0131k\u00f6y'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi \u00f6ncelikle \u201celemanlar\u201d adl\u0131 bir demet tan\u0131mlad\u0131k. Daha sonra da \u201cadresler\u201d adl\u0131 bir s\u00f6zl\u00fck tan\u0131mlayarak, fromkeys() metodu yard\u0131m\u0131yla anahtar olarak \u201celemanlar\u201d demetindeki \u00f6\u011felerden olu\u015fan, de\u011fer olarak ise \u201cKad\u0131k\u00f6y\u201d\u00fc i\u00e7eren bir s\u00f6zl\u00fck meydana getirdik. En ba\u015fta tan\u0131mlad\u0131\u011f\u0131m\u0131z \u201celemanlar\u201d demeti liste de olabilirdi. Hatta tek ba\u015f\u0131na bir karakter dizisi dahi yazabilirdik oraya... pop() Bu metodun s\u00f6zl\u00fcklerdeki kullan\u0131m\u0131, listelerdeki kullan\u0131m\u0131na az \u00e7ok benzer. Ama burada farkl\u0131 olarak, pop metodunu arg\u00fcmans\u0131z bir \u015fekilde kullanam\u0131yoruz. Yani pop metodunun parantezi i\u00e7inde mutlaka bir s\u00f6zl\u00fck \u00f6\u011fesi belirtmeliyiz: sepet = {\"meyveler\": (\"elma\", \"armut\"), \"sebzeler\": (\"p\u0131rasa\", \"fasulye\"), \"i\u00e7ecekler\": (\"su\", \"kola\", \"ayran\")} sepet.pop(\"meyveler\") ('elma', 'armut') Bu komut, s\u00f6zl\u00fckteki \u201cmeyveler\u201d anahtar\u0131n\u0131 silecek ve sildi\u011fi bu \u00f6\u011fenin de\u011ferini ekrana basacakt\u0131r. E\u011fer silmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z anahtar s\u00f6zl\u00fckte yoksa Python bize bir hata mesaj\u0131 g\u00f6sterecektir. E\u011fer get() fonksiyonunda oldu\u011fu gibi bir kullan\u0131m burada yap\u0131l\u0131rsa hatadan kurtulunmu\u015f olunur. \u00d6rne\u011fin: sepet.pop(\"tatl\u0131lar\", \"Silinecek \u00f6\u011fe yok!\") 'Silinecek \u00f6\u011fe yok!' popitem() popitem() metodunun parantezi bo\u015f, yani parametresiz olarak kullan\u0131l\u0131r. Bu metot bir s\u00f6zl\u00fckten rastgele \u00f6\u011feler silmek i\u00e7in kullan\u0131l\u0131r. Daha \u00f6nce de pek \u00e7ok kez s\u00f6yledi\u011fimiz gibi, s\u00f6zl\u00fckler s\u0131ras\u0131z veri tipleridir. Dolay\u0131s\u0131yla popitem() metodunun \u00f6\u011feleri silerken kullanabilece\u011fi bir s\u0131ra kavram\u0131 yoktur. Bu y\u00fczden bu metot \u00f6\u011feleri rastgele silmeyi tercih eder... sepet = {\"meyveler\": (\"elma\", \"armut\"), \"sebzeler\": (\"p\u0131rasa\", \"fasulye\")} sepet.popitem() ('sebzeler', ('p\u0131rasa', 'fasulye')) setdefault() Bu metot epey enteresan, ama bir o kadar da yararl\u0131 bir ara\u00e7t\u0131r... Bu metodun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 do\u011frudan bir \u00f6rnek \u00fczerinde g\u00f6relim: sepet = {\"meyveler\": (\"elma\", \"armut\"), \"sebzeler\": (\"p\u0131rasa\", \"fasulye\")} sepet.setdefault(\"i\u00e7ecekler\", (\"su\", \"kola\")) ('su', 'kola') Bu komut yard\u0131m\u0131yla s\u00f6zl\u00fc\u011f\u00fcm\u00fcz i\u00e7inde \u201ci\u00e7ecekler\u201d adl\u0131 bir anahtar olu\u015fturduk. Bu anahtar\u0131n de\u011feri ise (\u201csu\u201d, \u201ckola\u201d) oldu... Bir de \u015funa bakal\u0131m: sepet.setdefault(\"meyveler\", (\"erik\", \"\u00e7ilek\")) ('elma', 'armut') G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, s\u00f6zl\u00fckte zaten \u201cmeyveler\u201d adl\u0131 bir anahtar bulundu\u011fu i\u00e7in, Python ayn\u0131 ad\u0131 ta\u015f\u0131yan ama de\u011ferleri farkl\u0131 olan yeni bir \u201cmeyveler\u201d anahtar\u0131 olu\u015fturmad\u0131. Demek ki bu metot yard\u0131m\u0131yla bir s\u00f6zl\u00fck i\u00e7inde arama yapabiliyor, e\u011fer arad\u0131\u011f\u0131m\u0131z anahtar s\u00f6zl\u00fckte yoksa, setdefault() metodu i\u00e7inde belirtti\u011fimiz \u00f6zellikleri ta\u015f\u0131yan yeni bir anahtar-de\u011fer \u00e7ifti olu\u015fturabiliyoruz. update() Bu metot yard\u0131m\u0131yla olu\u015fturdu\u011fumuz s\u00f6zl\u00fckleri yeni verilerle g\u00fcncelleyece\u011fiz. Diyelim ki elimizde \u015f\u00f6yle bir s\u00f6zl\u00fck var: stok = {\"elma\": 5, \"armut\": 10, \"peynir\": 6, \"sosis\": 15} Sto\u011fumuzda 5 adet elma, 10 adet armut, 6 kutu peynir, 15 adet de sosis var. Diyelim ki daha sonraki zamanlarda bu sto\u011fa mal giri\u015f-\u00e7\u0131k\u0131\u015f\u0131 oldu ve sto\u011fun son hali \u015f\u00f6yle: yeni_stok = {\"elma\": 3, \"armut\": 20, \"peynir\": 8, \"sosis\": 4, \"sucuk\": 6} Yapmam\u0131z gereken \u015fey, sto\u011fumuzu yeni bilgilere g\u00f6re g\u00fcncellemek olacakt\u0131r. \u0130\u015fte bu i\u015flemi update() metodu ile yapabiliriz: stok.update(yeni_stok) print(stok) {'elma': 3, 'armut': 20, 'peynir': 8, 'sosis': 4, 'sucuk': 6} Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"S\u00f6zl\u00fcklerin Metotlar\u0131"},{"location":"python/python_sozluklerin_metotlari/#sozluklerin-metotlar","text":"","title":"S\u00f6zl\u00fcklerin Metotlar\u0131"},{"location":"python/python_sozluklerin_metotlari/#keys","text":"S\u00f6zl\u00fckleri tarif ederken, s\u00f6zl\u00fcklerin anahtar-de\u011fer \u00e7iftlerinden olu\u015fan bir veri tipi oldu\u011funu s\u00f6ylemi\u015ftik. Bir s\u00f6zl\u00fc\u011f\u00fc normal yollardan ekrana yazd\u0131r\u0131rsan\u0131z size hem anahtarlar\u0131 hem de bunlara kar\u015f\u0131l\u0131k gelen de\u011ferleri verecektir. Ama e\u011fer bir s\u00f6zl\u00fc\u011f\u00fcn sadece anahtarlar\u0131n\u0131 almak isterseniz keys() metodundan yararlanabilirsiniz: sozluk = {\"a\": 0, \"b\": 1, \"c\": 2, \"d\": 3} print(sozluk.keys()) dict_keys(['a', 'b', 'c', 'd']) G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, s\u00f6zl\u00fck.keys() komutu bize bir dict_keys nesnesi veriyor. Bu nesneyi program\u0131n\u0131zda kullanabilmek i\u00e7in isterseniz, bunu listeye, demete veya karakter dizisine d\u00f6n\u00fc\u015ft\u00fcrebilirsiniz: liste = list(sozluk.keys()) liste ['a', 'b', 'c', 'd'] demet = tuple(sozluk.keys()) demet ('a', 'b', 'c', 'd') kardiz = \"\".join(sozluk.keys()) kardiz 'abcd'","title":"keys()"},{"location":"python/python_sozluklerin_metotlari/#values","text":"Bir s\u00f6zl\u00fc\u011f\u00fcn de\u011ferlerini values() metodu verir: print(sozluk.values()) dict_values([0, 1, 2, 3])","title":"values()"},{"location":"python/python_sozluklerin_metotlari/#items","text":"Bu metot, bir s\u00f6zl\u00fc\u011f\u00fcn hem anahtarlar\u0131n\u0131 hem de de\u011ferlerini ayn\u0131 anda almam\u0131z\u0131 sa\u011flar: sozluk.items() dict_items([('a', 0), ('b', 1), ('c', 2), ('d', 3)]) Bu metot s\u0131kl\u0131kla for d\u00f6ng\u00fcleri ile birlikte kullan\u0131larak bir s\u00f6zl\u00fc\u011f\u00fcn anahtar ve de\u011ferlerinin manip\u00fcle edilebilmesini sa\u011flar: for anahtar, deger in sozluk.items(): print(\"{} = {}\".format(anahtar, deger)) a = 0 b = 1 c = 2 d = 3","title":"items()"},{"location":"python/python_sozluklerin_metotlari/#get","text":"S\u00f6zl\u00fcklerin get() adl\u0131 metodu, parantez i\u00e7inde iki adet arg\u00fcman al\u0131r. Birinci arg\u00fcman sorgulamak istedi\u011fimiz s\u00f6zl\u00fck \u00f6\u011fesidir. \u0130kinci arg\u00fcman ise bu \u00f6\u011fenin s\u00f6zl\u00fckte bulunmad\u0131\u011f\u0131 durumda kullan\u0131c\u0131ya hangi mesaj\u0131n g\u00f6sterilece\u011fini belirtir. Buna g\u00f6re, a\u015fa\u011f\u0131da yapt\u0131\u011f\u0131m\u0131z \u015fey, \u00f6nce \u201csorgu\u201d de\u011fi\u015fkenini s\u00f6zl\u00fckte aramak, e\u011fer bu \u00f6\u011fe s\u00f6zl\u00fckte bulunam\u0131yorsa da kullan\u0131c\u0131ya, \u201cBu kelime veritaban\u0131m\u0131zda yoktur!\u201d c\u00fcmlesini g\u00f6stermekten ibarettir... ing_sozluk = {\"dil\": \"language\", \"bilgisayar\": \"computer\", \"masa\": \"table\"} sorgu = input(\"L\u00fctfen anlam\u0131n\u0131 \u00f6\u011frenmek istedi\u011finiz kelimeyi yaz\u0131n\u0131z:\") print(ing_sozluk.get(sorgu, \"Bu kelime veritaban\u0131m\u0131zda yoktur!\")) L\u00fctfen anlam\u0131n\u0131 \u00f6\u011frenmek istedi\u011finiz kelimeyi yaz\u0131n\u0131z:araba Bu kelime veritaban\u0131m\u0131zda yoktur!","title":"get()"},{"location":"python/python_sozluklerin_metotlari/#clear","text":"Bu kelime \u0130ngilizce\u2019de \u201ctemizlemek\u201d anlam\u0131na gelir. G\u00f6revi s\u00f6zl\u00fckteki \u00f6\u011feleri temizlemektir. Yani i\u00e7i dolu bir s\u00f6zl\u00fc\u011f\u00fc bu metot yard\u0131m\u0131yla tamamen bo\u015faltabiliriz: lig = {\"\u015fampiyon\": \"Adana Demirspor\", \"ikinci\": \"Mersin \u0130dman Yurdu\", \"\u00fc\u00e7\u00fcnc\u00fc\": \"Adana Gen\u00e7lerbirli\u011fi\"} \u0130sterseniz s\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fc bo\u015faltmadan \u00f6nce bu s\u00f6zl\u00fckle biraz \u00e7al\u0131\u015fal\u0131m: S\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fcn \u00f6\u011felerine \u015f\u00f6yle ula\u015f\u0131yoruz: lig {'\u015fampiyon': 'Adana Demirspor', 'ikinci': 'Mersin \u0130dman Yurdu', '\u00fc\u00e7\u00fcnc\u00fc': 'Adana Gen\u00e7lerbirli\u011fi'} \u015eimdi geldi bu s\u00f6zl\u00fc\u011f\u00fcn b\u00fct\u00fcn \u00f6\u011felerini silmeye: lig.clear() \u015eimdi s\u00f6zl\u00fc\u011f\u00fcm\u00fcz\u00fcn durumunu tekrar kontrol edelim: lig {} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi art\u0131k \u201clig\u201d adl\u0131 s\u00f6zl\u00fc\u011f\u00fcm\u00fcz bombo\u015f. clear() metodunu kullanarak bu s\u00f6zl\u00fc\u011f\u00fcn b\u00fct\u00fcn \u00f6\u011felerini sildik. Ama tabii ki bu \u015fekilde s\u00f6zl\u00fc\u011f\u00fc silmi\u015f olmad\u0131k. Bo\u015f da olsa bellekte h\u00e2l\u00e2 \u201clig\u201d adl\u0131 bir s\u00f6zl\u00fck duruyor. E\u011fer siz \u201clig\u201di ortadan kald\u0131rmak isterseniz \u201cdel\u201d adl\u0131 bir par\u00e7ac\u0131ktan yararlanman\u0131z gerekir: del lig Kontrol edelim: lig --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-14-f416219c5a5e> in <module> ----> 1 lig NameError: name 'lig' is not defined G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi art\u0131k \u201clig\u201d diye bir \u015fey yok... Bu s\u00f6zl\u00fc\u011f\u00fc bellekten tamamen kald\u0131rd\u0131k.","title":"clear()"},{"location":"python/python_sozluklerin_metotlari/#copy","text":"Bu metot s\u00f6zl\u00fc\u011f\u00fc kopyalamaya yaramaktad\u0131r. hava_durumu = {\"\u0130stanbul\": \"ya\u011fmurlu\", \"Ankara\": \"g\u00fcne\u015fli\", \"Konya\": \"bulutlu\"} \u015eimdi bu s\u00f6zl\u00fc\u011f\u00fc yedekliyoruz. Yani kopyal\u0131yoruz: yedek_hava_durumu = hava_durumu.copy() yedek_hava_durumu adl\u0131 s\u00f6zl\u00fc\u011fe bakal\u0131m: yedek_hava_durumu {'\u0130stanbul': 'ya\u011fmurlu', 'Ankara': 'g\u00fcne\u015fli', 'Konya': 'bulutlu'}","title":"copy()"},{"location":"python/python_sozluklerin_metotlari/#fromkeys","text":"fromkeys() metodu \u00f6teki metotlardan biraz farkl\u0131d\u0131r. Bu metot mevcut s\u00f6zl\u00fck \u00fczerinde i\u015flem yapmaz. fromkeys()\u2018in g\u00f6revi yeni bir s\u00f6zl\u00fck olu\u015fturmakt\u0131r. Bu metot yeni bir s\u00f6zl\u00fck olu\u015ftururken listeler veya demetlerden yararlan\u0131r. \u015e\u00f6yle ki: elemanlar = \"Ahmet\", \"Mehmet\", \"Can\" adresler = dict.fromkeys(elemanlar, \"Kad\u0131k\u00f6y\") adresler {'Ahmet': 'Kad\u0131k\u00f6y', 'Mehmet': 'Kad\u0131k\u00f6y', 'Can': 'Kad\u0131k\u00f6y'} G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi \u00f6ncelikle \u201celemanlar\u201d adl\u0131 bir demet tan\u0131mlad\u0131k. Daha sonra da \u201cadresler\u201d adl\u0131 bir s\u00f6zl\u00fck tan\u0131mlayarak, fromkeys() metodu yard\u0131m\u0131yla anahtar olarak \u201celemanlar\u201d demetindeki \u00f6\u011felerden olu\u015fan, de\u011fer olarak ise \u201cKad\u0131k\u00f6y\u201d\u00fc i\u00e7eren bir s\u00f6zl\u00fck meydana getirdik. En ba\u015fta tan\u0131mlad\u0131\u011f\u0131m\u0131z \u201celemanlar\u201d demeti liste de olabilirdi. Hatta tek ba\u015f\u0131na bir karakter dizisi dahi yazabilirdik oraya...","title":"fromkeys()"},{"location":"python/python_sozluklerin_metotlari/#pop","text":"Bu metodun s\u00f6zl\u00fcklerdeki kullan\u0131m\u0131, listelerdeki kullan\u0131m\u0131na az \u00e7ok benzer. Ama burada farkl\u0131 olarak, pop metodunu arg\u00fcmans\u0131z bir \u015fekilde kullanam\u0131yoruz. Yani pop metodunun parantezi i\u00e7inde mutlaka bir s\u00f6zl\u00fck \u00f6\u011fesi belirtmeliyiz: sepet = {\"meyveler\": (\"elma\", \"armut\"), \"sebzeler\": (\"p\u0131rasa\", \"fasulye\"), \"i\u00e7ecekler\": (\"su\", \"kola\", \"ayran\")} sepet.pop(\"meyveler\") ('elma', 'armut') Bu komut, s\u00f6zl\u00fckteki \u201cmeyveler\u201d anahtar\u0131n\u0131 silecek ve sildi\u011fi bu \u00f6\u011fenin de\u011ferini ekrana basacakt\u0131r. E\u011fer silmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z anahtar s\u00f6zl\u00fckte yoksa Python bize bir hata mesaj\u0131 g\u00f6sterecektir. E\u011fer get() fonksiyonunda oldu\u011fu gibi bir kullan\u0131m burada yap\u0131l\u0131rsa hatadan kurtulunmu\u015f olunur. \u00d6rne\u011fin: sepet.pop(\"tatl\u0131lar\", \"Silinecek \u00f6\u011fe yok!\") 'Silinecek \u00f6\u011fe yok!'","title":"pop()"},{"location":"python/python_sozluklerin_metotlari/#popitem","text":"popitem() metodunun parantezi bo\u015f, yani parametresiz olarak kullan\u0131l\u0131r. Bu metot bir s\u00f6zl\u00fckten rastgele \u00f6\u011feler silmek i\u00e7in kullan\u0131l\u0131r. Daha \u00f6nce de pek \u00e7ok kez s\u00f6yledi\u011fimiz gibi, s\u00f6zl\u00fckler s\u0131ras\u0131z veri tipleridir. Dolay\u0131s\u0131yla popitem() metodunun \u00f6\u011feleri silerken kullanabilece\u011fi bir s\u0131ra kavram\u0131 yoktur. Bu y\u00fczden bu metot \u00f6\u011feleri rastgele silmeyi tercih eder... sepet = {\"meyveler\": (\"elma\", \"armut\"), \"sebzeler\": (\"p\u0131rasa\", \"fasulye\")} sepet.popitem() ('sebzeler', ('p\u0131rasa', 'fasulye'))","title":"popitem()"},{"location":"python/python_sozluklerin_metotlari/#setdefault","text":"Bu metot epey enteresan, ama bir o kadar da yararl\u0131 bir ara\u00e7t\u0131r... Bu metodun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 do\u011frudan bir \u00f6rnek \u00fczerinde g\u00f6relim: sepet = {\"meyveler\": (\"elma\", \"armut\"), \"sebzeler\": (\"p\u0131rasa\", \"fasulye\")} sepet.setdefault(\"i\u00e7ecekler\", (\"su\", \"kola\")) ('su', 'kola') Bu komut yard\u0131m\u0131yla s\u00f6zl\u00fc\u011f\u00fcm\u00fcz i\u00e7inde \u201ci\u00e7ecekler\u201d adl\u0131 bir anahtar olu\u015fturduk. Bu anahtar\u0131n de\u011feri ise (\u201csu\u201d, \u201ckola\u201d) oldu... Bir de \u015funa bakal\u0131m: sepet.setdefault(\"meyveler\", (\"erik\", \"\u00e7ilek\")) ('elma', 'armut') G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi, s\u00f6zl\u00fckte zaten \u201cmeyveler\u201d adl\u0131 bir anahtar bulundu\u011fu i\u00e7in, Python ayn\u0131 ad\u0131 ta\u015f\u0131yan ama de\u011ferleri farkl\u0131 olan yeni bir \u201cmeyveler\u201d anahtar\u0131 olu\u015fturmad\u0131. Demek ki bu metot yard\u0131m\u0131yla bir s\u00f6zl\u00fck i\u00e7inde arama yapabiliyor, e\u011fer arad\u0131\u011f\u0131m\u0131z anahtar s\u00f6zl\u00fckte yoksa, setdefault() metodu i\u00e7inde belirtti\u011fimiz \u00f6zellikleri ta\u015f\u0131yan yeni bir anahtar-de\u011fer \u00e7ifti olu\u015fturabiliyoruz.","title":"setdefault()"},{"location":"python/python_sozluklerin_metotlari/#update","text":"Bu metot yard\u0131m\u0131yla olu\u015fturdu\u011fumuz s\u00f6zl\u00fckleri yeni verilerle g\u00fcncelleyece\u011fiz. Diyelim ki elimizde \u015f\u00f6yle bir s\u00f6zl\u00fck var: stok = {\"elma\": 5, \"armut\": 10, \"peynir\": 6, \"sosis\": 15} Sto\u011fumuzda 5 adet elma, 10 adet armut, 6 kutu peynir, 15 adet de sosis var. Diyelim ki daha sonraki zamanlarda bu sto\u011fa mal giri\u015f-\u00e7\u0131k\u0131\u015f\u0131 oldu ve sto\u011fun son hali \u015f\u00f6yle: yeni_stok = {\"elma\": 3, \"armut\": 20, \"peynir\": 8, \"sosis\": 4, \"sucuk\": 6} Yapmam\u0131z gereken \u015fey, sto\u011fumuzu yeni bilgilere g\u00f6re g\u00fcncellemek olacakt\u0131r. \u0130\u015fte bu i\u015flemi update() metodu ile yapabiliriz: stok.update(yeni_stok) print(stok) {'elma': 3, 'armut': 20, 'peynir': 8, 'sosis': 4, 'sucuk': 6} Son G\u00fcncelleme: 24 Aral\u0131k 2019 - Sal\u0131","title":"update()"},{"location":"python/yorum_isareti/","text":"Yorum \u0130\u015fareti Yaz\u0131l\u0131m d\u00fcnyas\u0131nda yazd\u0131\u011f\u0131m\u0131z kodlar\u0131n ba\u015fkalar\u0131 taraf\u0131ndan da anla\u015f\u0131labilir olmas\u0131 i\u00e7in yorum ve a\u00e7\u0131klama c\u00fcmleleri b\u00fcy\u00fck bir \u00f6nem arz etmektedir. Burada yorum ve a\u00e7\u0131klama c\u00fcmlelerini bir de\u011fi\u015fkeni veya bir fonksiyonun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 a\u00e7\u0131klamak i\u00e7in kullanabilirisiniz. tel_no = 11111 #bu de\u011fi\u015fken kullan\u0131c\u0131 taraf\u0131ndan girilen telefon numaras\u0131n\u0131 tutmak i\u00e7in kullan\u0131lmaktad\u0131r. Yorum i\u015faretleri farkl\u0131 ama\u00e7lar i\u00e7inde kullan\u0131labilr. Yazm\u0131\u015f oldu\u011fumuz kodu etkisizle\u015ftirmek i\u00e7in kullanabiliriz. # \u00fclke = \"T\u00fcrkiye\" Yorum i\u015faretlerini s\u00fcsleme ama\u00e7l\u0131da kullanabiliriz. ####################################################### #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# # Yazan # Lisans # #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# ####################################################### Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"Yorum \u0130\u015fareti"},{"location":"python/yorum_isareti/#yorum-isareti","text":"Yaz\u0131l\u0131m d\u00fcnyas\u0131nda yazd\u0131\u011f\u0131m\u0131z kodlar\u0131n ba\u015fkalar\u0131 taraf\u0131ndan da anla\u015f\u0131labilir olmas\u0131 i\u00e7in yorum ve a\u00e7\u0131klama c\u00fcmleleri b\u00fcy\u00fck bir \u00f6nem arz etmektedir. Burada yorum ve a\u00e7\u0131klama c\u00fcmlelerini bir de\u011fi\u015fkeni veya bir fonksiyonun ne i\u015fe yarad\u0131\u011f\u0131n\u0131 a\u00e7\u0131klamak i\u00e7in kullanabilirisiniz. tel_no = 11111 #bu de\u011fi\u015fken kullan\u0131c\u0131 taraf\u0131ndan girilen telefon numaras\u0131n\u0131 tutmak i\u00e7in kullan\u0131lmaktad\u0131r. Yorum i\u015faretleri farkl\u0131 ama\u00e7lar i\u00e7inde kullan\u0131labilr. Yazm\u0131\u015f oldu\u011fumuz kodu etkisizle\u015ftirmek i\u00e7in kullanabiliriz. # \u00fclke = \"T\u00fcrkiye\" Yorum i\u015faretlerini s\u00fcsleme ama\u00e7l\u0131da kullanabiliriz. ####################################################### #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# # Yazan # Lisans # #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# ####################################################### Son G\u00fcncelleme: 16 Aral\u0131k 2019 - Pazartesi","title":"Yorum \u0130\u015fareti"}]}